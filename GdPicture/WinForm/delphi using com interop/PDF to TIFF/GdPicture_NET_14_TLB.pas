unit GdPicture_NET_14_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 17244 $
// File generated on 03/08/2023 16:52:54 from Type Library described below.

// ************************************************************************  //
// Type Lib: D:\GdPicture\Dev\Dist\bin14\DotNet\framework\COM\redist\obfuscated\GdPicture.NET.14.tlb (1)
// LIBID: {B5893B58-701E-4110-9871-1DA14CF9C1DC}
// LCID: 0
// Helpfile: 
// HelpString: GdPicture.NET 14 - Document Imaging SDK
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
//   (2) v2.4 mscorlib, (C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.tlb)
//   (3) v2.4 System, (C:\Windows\Microsoft.NET\Framework\v4.0.30319\System.tlb)
//   (4) v2.4 System_Windows_Forms, (C:\Windows\Microsoft.NET\Framework\v4.0.30319\System.Windows.Forms.tlb)
// Cmdline:
//   "D:\gdpicture\dev\DotNet\GdPicture.NET\v14\build\tlibimp.exe"  /Hr- /Hs- /Pt+ /Ps+ /C- /p+ "D:\GdPicture\Dev\Dist\bin14\DotNet\framework\COM\redist\obfuscated\GdPicture.NET.14.tlb
// ************************************************************************ //
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}
interface

uses Windows, ActiveX, Classes, Graphics, mscorlib_TLB, OleCtrls, OleServer, StdVCL, 
System_TLB, System_Windows_Forms_TLB, Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  GdPicture_NET_14MajorVersion = 14;
  GdPicture_NET_14MinorVersion = 2;

  LIBID_GdPicture_NET_14: TGUID = '{B5893B58-701E-4110-9871-1DA14CF9C1DC}';

  IID_IAnnotationEditor: TGUID = '{CBF041E8-7CFC-4389-9122-809AAA85BE8B}';
  DIID___AnnotationEditor: TGUID = '{69CD38B0-3CA1-48D3-B1AA-21EBB9C78932}';
  IID__OnDisposeEventHandler: TGUID = '{B2149EA7-B58E-378B-8E52-70645A0BEC94}';
  IID__PropertyChangedEventHandler: TGUID = '{32D44884-99CC-3154-9F83-788F6C375F49}';
  IID_IAnnotationManager: TGUID = '{664D5B33-C2CC-4D66-94F8-E8E11FA39242}';
  DIID___AnnotationManager: TGUID = '{B12F8F5E-D424-40F7-91DA-9BE02520AAA9}';
  IID__SavingProgressEventHandler: TGUID = '{0120955E-BC65-3769-B8CF-9D372AEA99F2}';
  IID_IBookmarksTree: TGUID = '{539F514E-E675-4BE1-86DC-1E5A8E904636}';
  DIID___BookmarksTree: TGUID = '{BAF46C9E-C563-4436-9BAC-C029B7A18E0C}';
  IID__NodeSelectedEventHandler: TGUID = '{0D0F7342-1A8A-3692-BBC0-210CF12D216A}';
  IID_IGdPictureDocumentConverter: TGUID = '{03EE6E3C-9F78-4EAE-BB91-5DB4D5D95CA7}';
  CLASS_GdPictureDocumentConverter: TGUID = '{6BA216B3-0CCA-39E5-B68B-F4F943B65D9D}';
  IID_IGdPictureDocumentUtilities: TGUID = '{A79755A3-8507-48EE-A616-611BB01CF94B}';
  CLASS_GdPictureDocumentUtilities: TGUID = '{A46B9230-3A18-3180-9BA9-1D063B9DB1B7}';
  IID_IGdPictureImaging: TGUID = '{572B1557-5AAB-4A36-99D4-3BEC5AD538E8}';
  CLASS_GdPictureImaging: TGUID = '{C9E52549-FC4C-33F9-99DE-61302E5F2E47}';
  IID__TwainImagePreviewEventHandler: TGUID = '{2F578A25-D034-35D4-86DE-F5B986E0AC71}';
  IID_IGdPictureOCR: TGUID = '{AA29CE09-A9EF-4A25-8FCC-30D3264CF319}';
  CLASS_GdPictureOCR: TGUID = '{4813FAB2-FDF6-3ACA-8C00-511671D1214B}';
  IID_ISpreadsheetOptions: TGUID = '{107507E4-8258-4E89-9167-CADCD46059BB}';
  CLASS_SpreadsheetOptions: TGUID = '{CBD34A5D-CCD7-47B5-B8D4-121D40FA0934}';
  IID_IGdPicturePDF: TGUID = '{4862F192-136A-4700-9F1D-0B6164A36B99}';
  DIID___GdPicturePDF: TGUID = '{75738A39-DE0A-3278-A2A6-44414D88375A}';
  IID__BeforePdfPrintPageEventHandler: TGUID = '{0425FA11-3762-3F0D-B044-833385D423F5}';
  IID__AfterPdfPrintPageEventHandler: TGUID = '{BE4EB426-7321-3D5B-A255-694F9D887551}';
  IID__ExternalOcrPageRequestEventHandler: TGUID = '{49423ABA-6AC6-3259-BF41-09893EEE9A32}';
  IID__OcrPagesProgressEventHandler: TGUID = '{AEF95872-5108-3B21-945F-2AC999C690F9}';
  IID__BeforePageOcrEventHandler: TGUID = '{3A12D321-718B-3588-A18A-F7F236C6CB46}';
  IID__PageBitmapOcrReadyEventHandler: TGUID = '{E09B1C3C-4818-319E-8C07-BCEAB34C5DF6}';
  IID__OcrPagesDoneEventHandler: TGUID = '{12A9C2C4-700D-3621-BF41-CA4109FB648A}';
  IID_IPdfOcrOptions: TGUID = '{3D63F369-74F5-4C4B-A203-B68374F6A35A}';
  CLASS_PdfOcrOptions: TGUID = '{BA480C17-421F-4053-8288-C96C53C26CE8}';
  IID_ISmartRedactionOptions: TGUID = '{14587E1E-35FA-4716-AE19-A18E355EFA17}';
  CLASS_SmartRedactionOptions: TGUID = '{718C8EE7-1EEF-4717-8E60-C3661B610550}';
  IID_IGdPicturePDFReducer: TGUID = '{426B5317-D5C9-411D-A518-E026C137E3F0}';
  CLASS_GdPicturePDFReducer: TGUID = '{732C85A4-B68F-4D3F-920A-B13DB0BDC9C8}';
  IID_IGdPictureSegmenter: TGUID = '{96AAC88F-80CA-43E8-8576-8221FA5608B2}';
  CLASS_GdPictureSegmenter: TGUID = '{8D8DD4B1-B719-303C-8F01-7C00B4A93B1F}';
  IID_IGdViewer: TGUID = '{5209D70B-F745-4442-A65E-C84161C8DBFE}';
  DIID___GdViewer: TGUID = '{49B9A7C8-DA4F-47D5-95EB-A973DC48D461}';
  IID__ViewerDoubleClickEventHandler: TGUID = '{AC9A354E-D916-3EB1-8050-CEEAB0CE0180}';
  IID__ViewerMouseWheelEventHandler: TGUID = '{88E2BE4A-4D46-333E-A9AF-DFCFB68F9492}';
  IID__ViewerClickEventHandler: TGUID = '{BF8C36AE-BC94-3E40-BD5D-BEB08AB16C86}';
  IID__ViewerMouseUpEventHandler: TGUID = '{47E0ED94-1A20-3001-B99E-93B943446B6D}';
  IID__ViewerMouseDownEventHandler: TGUID = '{32396BA9-AE47-3B2B-93E0-A968D7D41BF3}';
  IID__ViewerMouseMoveEventHandler: TGUID = '{684FA90B-67D2-396E-8FC9-BC56810A75A6}';
  IID__ViewerKeyUpEventHandler: TGUID = '{BA12E7F3-0CA4-3416-A1CB-D5F163AC17B0}';
  IID__ViewerKeyDownEventHandler: TGUID = '{3D9725FB-C4AE-3241-87C2-74EB5AEF08C5}';
  IID__ViewerKeyPressEventHandler: TGUID = '{FB7399B9-914D-3C44-92A1-D3D8E9E0E0B7}';
  IID__AnnotationTextBoxKeyDownEventHandler: TGUID = '{3E6D0619-BA35-3EB3-8E59-23C13860254E}';
  IID__AnnotationTextBoxLostFocusEventHandler: TGUID = '{8756C601-DB33-3E27-A201-89D054D1148A}';
  IID__DropFileEventHandler: TGUID = '{D6E145F8-828D-36C9-9FAD-24DAFD63BE9A}';
  IID__AnnotationStartEditingTextEventHandler: TGUID = '{4DEF6A2E-AE0C-33DB-907D-F5C2153DE192}';
  IID__AnnotationEndEditingTextEventHandler: TGUID = '{B5D0BEB5-ED08-3D26-8270-37A007BE8B8A}';
  IID__AnnotationSelectedEventHandler: TGUID = '{84DC8941-53C0-33F1-81D7-4010CA75208A}';
  IID__AnnotationClickedEventHandler: TGUID = '{7AC2C7B9-4FF4-34FA-812C-32DDC27F06C4}';
  IID__BeforeAnnotationAddedByUserEventHandler: TGUID = '{609E8793-664B-38F4-B1BD-2D9C67BFB540}';
  IID__AnnotationAddedByUserEventHandler: TGUID = '{D3074C30-3837-31AA-81D3-8AB09BDFC431}';
  IID__AnnotationRotatedEventHandler: TGUID = '{655F7BC8-243D-3C01-BB76-AF67553FF501}';
  IID__AnnotationMovedEventHandler: TGUID = '{C023D333-1DE2-3611-8A05-5D48816051B9}';
  IID__AnnotationResizedEventHandler: TGUID = '{B5F17DA6-F0A6-3042-BD69-A2361AB50040}';
  IID__PdfPasswordRequestEventHandler: TGUID = '{04F02086-5AEB-39DB-AFBE-B01E669F37FB}';
  IID__PdfCertificateRequestEventHandler: TGUID = '{8C479FC7-3BFF-3614-A06B-813AB8EE540B}';
  IID__PdfFileNavigationEventHandler: TGUID = '{22B41BDF-FCC9-34BE-8E81-1E1DD84BC918}';
  IID__PdfLaunchActionEventHandler: TGUID = '{CF2FFA17-1D52-38D2-8B6A-CEA4C426C891}';
  IID__PdfUriNavigationEventHandler: TGUID = '{063E51BB-4D88-3B05-9A50-D54BE70E6F64}';
  IID__BeforePrintPageEventHandler: TGUID = '{1A24393F-4D6C-3F64-9B96-967D90763F06}';
  IID__AfterPrintPageEventHandler: TGUID = '{64C637FA-F48B-34D1-A304-DC66BA9197C7}';
  IID__DataReceivedEventHandler: TGUID = '{1A17E454-5D3A-3D52-A777-81B2A7E22CE6}';
  IID__TransferEndedEventHandler: TGUID = '{4CD756C2-772F-36B6-AB38-83815EF4F923}';
  IID__AfterZoomChangeEventHandler: TGUID = '{5037219D-F496-3D35-8258-B9B561BF622B}';
  IID__BeforeZoomChangeEventHandler: TGUID = '{607DAA74-906B-3146-999C-F4688F1E354D}';
  IID__ScrollViewerEventHandler: TGUID = '{9776114E-70C3-3EE4-B62F-4817230551DF}';
  IID__RectEditedByUserEventHandler: TGUID = '{59E2C36F-1CC9-3991-A780-6C6A3CD4A19B}';
  IID__RegionEditedByUserEventHandler: TGUID = '{B2642276-4441-3971-A644-CD86E416C204}';
  IID__RegionMovedByUserEventHandler: TGUID = '{2D2798C8-51C8-3763-80BA-392C01EA2241}';
  IID__RegionResizedByUserEventHandler: TGUID = '{F8A4A824-0465-3B24-B21A-0C73D889EE6E}';
  IID__RegionSelectedByUserEventHandler: TGUID = '{0AEEECF1-CBD4-3DE4-ACFF-35A4A66F8D87}';
  IID__RotationEventHandler: TGUID = '{0E4E931C-6928-3EF1-B0FE-599D0340241C}';
  IID__BeforeRotationEventHandler: TGUID = '{5033D8D5-1C10-3359-B2AE-5B1B28D1A0BD}';
  IID__PageChangedEventHandler: TGUID = '{7F6F77C6-6570-3583-B9E4-95C1551B0455}';
  IID__BeforeDocumentChangeEventHandler: TGUID = '{AD74E532-D113-3F50-A247-49926E0C6476}';
  IID__AfterDocumentChangeEventHandler: TGUID = '{681F0BA3-6BEA-37FA-9AD5-4AD97E322866}';
  IID__DocumentClosedEventHandler: TGUID = '{F7531ACC-4D30-3648-A313-E0918DEF364B}';
  IID__BeforeDocumentClosedEventHandler: TGUID = '{16CE9138-95FB-3278-9F24-65C45F18D2E7}';
  IID__PageDisplayedEventHandler: TGUID = '{97AC7381-9417-323E-8AAE-234B95A6157B}';
  IID__ClickMenuEventHandler: TGUID = '{0C586B36-FF43-34BB-81FD-3702DB555991}';
  IID_ILicenseManager: TGUID = '{1491043E-1B4D-489D-BED8-B9E2E7598289}';
  CLASS_LicenseManager: TGUID = '{51DE5D08-F43E-386D-AE8D-9A8EEF3C7B60}';
  IID_IPDFReducerConfiguration: TGUID = '{5CB4C389-2562-4339-BD98-EBB158192D61}';
  CLASS_PDFReducerConfiguration: TGUID = '{8F656181-7551-47DC-8A8A-7BB562F91A6F}';
  IID_IThumbnailEx: TGUID = '{CF79EF22-544F-4E0B-8557-57A7950A507C}';
  DIID___ThumbnailEx: TGUID = '{C6B5D334-094A-4DD9-9827-780B09C418CA}';
  IID__ControlDoubleClickEventHandler: TGUID = '{879706ED-6E59-32EA-9C05-FDC9D5CFB7D4}';
  IID__ControlMouseWheelEventHandler: TGUID = '{00A6C0B2-9F12-3145-BBA5-DC5D71A5963B}';
  IID__ControlClickEventHandler: TGUID = '{3862573D-5BFA-3850-ABBF-016FCCAF161F}';
  IID__ControlMouseUpEventHandler: TGUID = '{90BA8ACE-747B-317F-8FA0-A36609CA8081}';
  IID__ControlMouseDownEventHandler: TGUID = '{2D6A9405-9A84-362E-875E-2B6C1801C196}';
  IID__ControlMouseMoveEventHandler: TGUID = '{305E49A1-E840-32C3-9527-E12F71E26DB6}';
  IID__ControlKeyUpEventHandler: TGUID = '{757D1792-2ABC-3FDB-8D16-FB2D4CFD8C57}';
  IID__ControlKeyDownEventHandler: TGUID = '{620F501F-DA83-36AE-9BDA-0977D76DDDD0}';
  IID__ControlKeyPressEventHandler: TGUID = '{08718A37-1C72-3F52-87EA-C89F0FEA6DD2}';
  IID__ScrollEventHandler: TGUID = '{AB2B171B-0765-3453-975D-05DDFAC1DACA}';
  IID__OnAllItemsLoadedEventHandler: TGUID = '{09EA018A-8293-38A7-816E-0251F9E09C9B}';
  IID__ItemCheckedEventHandler: TGUID = '{37E99E54-EBC0-3812-8B9C-9694F16FF3F3}';
  IID__ItemClickedEventHandler: TGUID = '{5C0F85EB-00C8-33F4-8407-D77C223841B9}';
  IID__ItemDoubleClickedEventHandler: TGUID = '{057F64D9-47A8-35D3-874F-2832B1CEF33E}';
  IID__ItemSelectionChangedEventHandler: TGUID = '{2293891F-4728-36DE-ACB6-0B586EC3BCFF}';
  IID__ItemMovedEventHandler: TGUID = '{B7BBC124-8E57-3078-A2F4-691C5468C076}';
  IID__FileTypeNotSupportedEventHandler: TGUID = '{164FD132-B662-3C32-8443-A7B8CAD07EB2}';
  CLASS_AnnotationEditor: TGUID = '{0CEB68BB-FEF5-3F6C-9F82-7C6B1F524A3F}';
  CLASS_GdPicturePDF: TGUID = '{A3AB685D-A017-34B0-B2B6-08EE7121AF3C}';
  CLASS_AnnotationManager: TGUID = '{B6835517-900C-37F4-B861-936E79F91A48}';
  CLASS_BookmarksTree: TGUID = '{8AFC06F6-7848-37B5-8044-97A2EBECF8BB}';
  CLASS_ThumbnailEx: TGUID = '{DBED514A-A877-398F-AE2A-A1EDE5F43724}';
  CLASS_GdViewer: TGUID = '{0CC0D923-B9ED-310C-B453-D1A59F25712C}';
  IID__GdPictureEventsHandler: TGUID = '{9BB0EB1C-DFE1-3939-85FE-856BEA15B1E4}';
  IID__AfterSubstitutedFontArgs: TGUID = '{3CC6BCC0-00F6-3263-8873-DE6E1AB45737}';
  IID__BeforeAlternativeFontLookupArgs: TGUID = '{D3875CE8-36F6-3C53-8790-00366D3EA1FB}';
  IID__Annotation: TGUID = '{AE3700AE-86F3-37A8-A2C8-8C0AA17E55E0}';
  IID__AnnotationComment: TGUID = '{AC305882-1ABA-3F2C-A65E-21C65724405D}';
  IID__AnnotationConnectedLines: TGUID = '{146A78C6-C6F0-3A13-A4E2-0F2DDF535EAC}';
  IID__AnnotationPolygon: TGUID = '{728DE4F5-1EC1-36CD-A66A-2A879E0CD577}';
  IID__AnnotationCustom: TGUID = '{65466D04-F72E-325C-9E42-7F7F939C773E}';
  IID__AnnotationEllipse: TGUID = '{DEF47EFF-BB69-3277-96AB-06F377382D3E}';
  IID__AnnotationEmbeddedImage: TGUID = '{DAF696B5-9F99-3DC4-A568-B94A5AFC7420}';
  IID__AnnotationFreeHand: TGUID = '{335694A2-64B4-35B6-A41D-73130ED24101}';
  IID__AnnotationFreeHandHighlighter: TGUID = '{B52202F4-E4F2-35B9-A7B2-A6449259B6B3}';
  IID__AnnotationFreeHandPolygon: TGUID = '{406440DC-FFCC-3E1B-AC9C-D35BD060E943}';
  IID__AnnotationLine: TGUID = '{FC70B8EB-6829-3575-8A6C-F50F1F17132F}';
  IID__AnnotationLineArrow: TGUID = '{9310DDA5-F90E-3131-8969-7DBD433D1754}';
  IID__AnnotationLink: TGUID = '{37CCC269-E4B0-3E34-B03A-98598FD986DD}';
  IID__AnnotationRubberStamp: TGUID = '{886A40F5-7B25-3959-A8F1-1861AE1B9AD5}';
  IID__AnnotationPolyRuler: TGUID = '{8A423192-ADF5-313F-A768-6FCD2AA5192D}';
  IID__AnnotationRectangle: TGUID = '{B75BCD7E-0F65-37A7-A2B7-7471DD8B3B09}';
  IID__AnnotationRectangleHighlighter: TGUID = '{E8C2F816-B4B2-311D-BAA8-EF842F78E378}';
  IID__AnnotationRedaction: TGUID = '{56169002-DDE6-3E69-B5A6-F822875A8F98}';
  IID__AnnotationRuler: TGUID = '{F4F8F66C-8F08-33CE-AEF2-AC3B0E8B9EFD}';
  IID__AnnotationStickyNote: TGUID = '{21934FDF-3C12-386C-AF83-930445E4BF5B}';
  IID__AnnotationText: TGUID = '{732F9719-9EA7-3026-A19D-D320EDAC3088}';
  IID__GdPictureRectangle: TGUID = '{B6910CD2-DD1E-3C78-BE53-5F96E5EF96BC}';
  IID__GdPictureRectangleF: TGUID = '{AC50C196-9EF9-3BFB-8E62-BC5CE6779E4C}';
  IID__OnDisposeEventHandler_2: TGUID = '{F279E381-71DB-39C4-9419-EF92C8FC045D}';
  IID__OnDisposeEventHandler_3: TGUID = '{0C47EDD9-60A8-3CE6-B254-40B8B31C854F}';
  IID__SavingProgressEventHandler_2: TGUID = '{A218AB2E-2BD6-3184-B092-CFC3BB53E29B}';
  IID__OnDisposeEventHandler_4: TGUID = '{955D2F05-B07B-3AAF-A439-FA145616FCCF}';
  CLASS_OnDisposeEventHandler: TGUID = '{3195DF71-CBF6-416C-8187-419B579BEE25}';
  CLASS_PropertyChangedEventHandler: TGUID = '{70B826EE-D279-393E-B95B-0AC52D695983}';
  CLASS_SavingProgressEventHandler: TGUID = '{250D2EC2-4694-316B-B604-8759689303E3}';
  CLASS_OnDisposeEventHandler_2: TGUID = '{389B71CD-21BF-4249-80A7-65EEF4B0734F}';
  CLASS_NodeSelectedEventHandler: TGUID = '{79FE8365-BCFC-3901-B117-73E8FCDE9C74}';
  CLASS_TwainImagePreviewEventHandler: TGUID = '{897C9477-E1B0-49D5-9C9B-C6386F0A3D9C}';
  CLASS_BeforePdfPrintPageEventHandler: TGUID = '{3FA7C0D4-EE1C-4406-8036-B41F162E09D2}';
  CLASS_AfterPdfPrintPageEventHandler: TGUID = '{B92ACCFE-AABA-4F1B-89FF-C97920558626}';
  CLASS_ExternalOcrPageRequestEventHandler: TGUID = '{8B93F907-B23F-404E-A37C-243865E928AB}';
  CLASS_OcrPagesProgressEventHandler: TGUID = '{98BF3A4E-53C6-346F-9035-20202BF5757A}';
  CLASS_BeforePageOcrEventHandler: TGUID = '{09334C38-AE77-3E0C-A453-9809D2CE2091}';
  CLASS_PageBitmapOcrReadyEventHandler: TGUID = '{A49ED401-CEBC-30A0-A6CD-4C3F686BDB84}';
  CLASS_OcrPagesDoneEventHandler: TGUID = '{E9D2F7A8-71A2-3554-BA06-815FC368384D}';
  CLASS_ViewerDoubleClickEventHandler: TGUID = '{15E9223C-00BA-39AC-AB09-264D367CD04B}';
  CLASS_ViewerMouseWheelEventHandler: TGUID = '{CD195645-5A9B-30AE-A77B-900F4171C207}';
  CLASS_ViewerClickEventHandler: TGUID = '{54648CF5-F199-3705-ACB8-1E032D3DB2EA}';
  CLASS_ViewerMouseUpEventHandler: TGUID = '{8208FD2C-15DA-3B40-B319-E90C947BCE0A}';
  CLASS_ViewerMouseDownEventHandler: TGUID = '{4C9E8D27-ED7A-36B4-B13A-E142B2C345BA}';
  CLASS_ViewerMouseMoveEventHandler: TGUID = '{474E77C2-9486-3436-BA9C-C34FEC0B4BAA}';
  CLASS_ViewerKeyUpEventHandler: TGUID = '{359B56D0-F995-35A3-A55D-82B8C40988CB}';
  CLASS_ViewerKeyDownEventHandler: TGUID = '{F89B5B28-D3B0-33C6-8B7E-167A8F98FE22}';
  CLASS_ViewerKeyPressEventHandler: TGUID = '{2CA540D3-514C-3A11-B9CC-2F2B17776D82}';
  CLASS_OnDisposeEventHandler_3: TGUID = '{49E77120-F305-422D-A2EB-9EB945CA4D9F}';
  CLASS_AnnotationTextBoxKeyDownEventHandler: TGUID = '{960C7959-F688-4DCB-A183-823350A5A973}';
  CLASS_AnnotationTextBoxLostFocusEventHandler: TGUID = '{E9D08D65-9DC2-47CC-8657-EF8AB80EBEF7}';
  CLASS_DropFileEventHandler: TGUID = '{C2E4C361-8454-33BD-A2D1-AF1CB026F4A2}';
  CLASS_SavingProgressEventHandler_2: TGUID = '{BAAF5A35-0E19-3C39-A510-4BF5ABFF2538}';
  CLASS_AnnotationStartEditingTextEventHandler: TGUID = '{85B03EBE-19FD-37EF-9C69-CCC47BB6DD4F}';
  CLASS_AnnotationEndEditingTextEventHandler: TGUID = '{A481695D-F994-3BFD-9DBB-5253753092A6}';
  CLASS_AnnotationSelectedEventHandler: TGUID = '{B42D70F9-F19A-3819-A43D-75D1F47198A8}';
  CLASS_AnnotationClickedEventHandler: TGUID = '{24A5D1FD-E24A-38E7-BABB-D9681D723197}';
  CLASS_BeforeAnnotationAddedByUserEventHandler: TGUID = '{ACB229C4-C9BF-3BA3-9B4F-83A6DE238C6E}';
  CLASS_AnnotationAddedByUserEventHandler: TGUID = '{83EFD50A-F8B0-3EC0-B23B-3D8E915DA22A}';
  CLASS_AnnotationRotatedEventHandler: TGUID = '{47EC51B0-03CF-3AE9-BF3E-81856E89E3C7}';
  CLASS_AnnotationMovedEventHandler: TGUID = '{CEE63AB3-BB88-31F4-89A7-5B0C68104AC8}';
  CLASS_AnnotationResizedEventHandler: TGUID = '{AE4CAD5D-88DF-3301-97A7-4D7040D697FD}';
  CLASS_PdfPasswordRequestEventHandler: TGUID = '{B5B9C31D-C9BC-3017-8B7C-8316C5A975F4}';
  CLASS_PdfCertificateRequestEventHandler: TGUID = '{22153247-A27D-39EA-9DED-2803907CC76D}';
  CLASS_PdfFileNavigationEventHandler: TGUID = '{1747605B-CF88-3985-8A50-F4B859A5DFBD}';
  CLASS_PdfLaunchActionEventHandler: TGUID = '{13EA88E9-92CB-390A-9601-6A8C831D85AE}';
  CLASS_PdfUriNavigationEventHandler: TGUID = '{8591BDB6-83CD-31AD-A6D0-3ED2DBB70B72}';
  CLASS_BeforePrintPageEventHandler: TGUID = '{7DCED13B-9202-3393-BFAC-0FF52AA3AB29}';
  CLASS_AfterPrintPageEventHandler: TGUID = '{EAAC53C6-6F01-3ADA-BB1D-EB7890FBC575}';
  CLASS_DataReceivedEventHandler: TGUID = '{A7DD9B21-C058-32A5-8C21-64BB88FD8221}';
  CLASS_TransferEndedEventHandler: TGUID = '{28478E0F-3F94-3ACD-A9A1-4B683F782E66}';
  CLASS_AfterZoomChangeEventHandler: TGUID = '{AD252FD1-C37E-354D-9B33-CEA062F5400F}';
  CLASS_BeforeZoomChangeEventHandler: TGUID = '{DBDA3B40-1119-3863-9908-4413E72A3BF2}';
  CLASS_ScrollViewerEventHandler: TGUID = '{21E209C5-EAE6-3F32-8A17-73B90CCBF019}';
  CLASS_RectEditedByUserEventHandler: TGUID = '{2A7D2893-621B-3D91-8816-C318ABF20A05}';
  CLASS_RegionEditedByUserEventHandler: TGUID = '{ECD67294-37FC-31F0-B88D-6B86B78C817D}';
  CLASS_RegionMovedByUserEventHandler: TGUID = '{66A92246-DFC0-3D9B-9AD4-5CBDA716ACFA}';
  CLASS_RegionResizedByUserEventHandler: TGUID = '{EE757F10-7533-35C9-8038-36FFAF85A768}';
  CLASS_RegionSelectedByUserEventHandler: TGUID = '{8DB727F6-B618-3CEB-8B77-908BCBC29FB5}';
  CLASS_RotationEventHandler: TGUID = '{2D6F69CD-D985-3A84-B199-C58264DFCF22}';
  CLASS_BeforeRotationEventHandler: TGUID = '{5F2CE532-7B0D-3097-BE1F-CDEF4D4073F7}';
  CLASS_PageChangedEventHandler: TGUID = '{5A618A70-E015-37B2-B6A5-2749A6E5C01C}';
  CLASS_BeforeDocumentChangeEventHandler: TGUID = '{086CAC60-C4E4-3073-AEEB-FF62AF0EF999}';
  CLASS_AfterDocumentChangeEventHandler: TGUID = '{BAD76367-D499-3F64-A35E-F16EBE243E9D}';
  CLASS_DocumentClosedEventHandler: TGUID = '{22AB7629-90F2-33B0-94B0-A3D80760D417}';
  CLASS_BeforeDocumentClosedEventHandler: TGUID = '{EA9C031E-C43B-3957-A8A7-51A40478BD9C}';
  CLASS_PageDisplayedEventHandler: TGUID = '{8D0ED1D8-0ECF-3B1F-BBFB-9E2CC12651B5}';
  CLASS_ClickMenuEventHandler: TGUID = '{6FA20F4B-414D-34FA-AEA9-52F614F0BFB4}';
  CLASS_OnDisposeEventHandler_4: TGUID = '{87E1BF93-CA3B-4B14-B362-F8EEDA2A8567}';
  CLASS_ControlDoubleClickEventHandler: TGUID = '{4A12D6A4-88EA-3BF6-8ED4-20FA4991B15E}';
  CLASS_ControlMouseWheelEventHandler: TGUID = '{A739DD76-7608-3CA6-A3DB-0AF30AC7972A}';
  CLASS_ControlClickEventHandler: TGUID = '{6357EEA2-88D8-360D-A3E3-00878B671E4A}';
  CLASS_ControlMouseUpEventHandler: TGUID = '{4CF652C2-976E-3C61-AA52-CA3883DED224}';
  CLASS_ControlMouseDownEventHandler: TGUID = '{5C6B1DB4-7EF1-3580-94EE-F37E95E557E6}';
  CLASS_ControlMouseMoveEventHandler: TGUID = '{8F9A70F7-7904-3B9D-9366-EADC92242F1F}';
  CLASS_ControlKeyUpEventHandler: TGUID = '{0C016F06-B135-3E6E-937E-F40375A73215}';
  CLASS_ControlKeyDownEventHandler: TGUID = '{ED5174A4-A75F-3B84-9BFA-3451CFE4AD43}';
  CLASS_ControlKeyPressEventHandler: TGUID = '{67690A37-005D-3041-9930-484732AFADBB}';
  CLASS_ScrollEventHandler: TGUID = '{DA4CC89C-AA74-399C-8F96-72D85826E7D5}';
  CLASS_OnAllItemsLoadedEventHandler: TGUID = '{4ED2F9D1-9A42-3F4F-8AED-B494A5DCE71E}';
  CLASS_ItemCheckedEventHandler: TGUID = '{3AEAA04B-DE48-3345-8835-9A9F92C08718}';
  CLASS_ItemClickedEventHandler: TGUID = '{2434924D-3F7F-39C9-A6F0-40E85A8736E7}';
  CLASS_ItemDoubleClickedEventHandler: TGUID = '{D1C0089D-6491-3DAA-917F-BE5C86A66606}';
  CLASS_ItemSelectionChangedEventHandler: TGUID = '{5593E96C-034E-3FC4-86F2-0D522E367DF6}';
  CLASS_ItemMovedEventHandler: TGUID = '{087288FE-F973-330B-8E85-3FA29675FA2B}';
  CLASS_FileTypeNotSupportedEventHandler: TGUID = '{D48E3ADF-7C99-325D-A791-1B6C6B7BF59F}';
  CLASS_GdPictureEventsHandler: TGUID = '{EEF4C99A-08FC-36DB-B656-DCF8D308D99F}';
  CLASS_AfterSubstitutedFontArgs: TGUID = '{91D51C97-7223-3466-A9B3-BAB56FB8E8F7}';
  CLASS_BeforeAlternativeFontLookupArgs: TGUID = '{C74EEF83-3559-3AC9-A6E5-422C875E0DD2}';
  CLASS_Annotation: TGUID = '{5BA01424-5CB5-392B-902C-FDFC94218817}';
  CLASS_AnnotationComment: TGUID = '{35C905AB-10B6-35FF-AF79-68C79C0DA74D}';
  CLASS_AnnotationConnectedLines: TGUID = '{53A9C5C4-7DA7-3976-8E70-9E524C2C23DE}';
  CLASS_AnnotationPolygon: TGUID = '{AA6BCC50-1A02-3022-8896-C7B43BF286FB}';
  CLASS_AnnotationCustom: TGUID = '{F407A6EE-5146-34C7-B22A-C94761CDF5E7}';
  CLASS_AnnotationEllipse: TGUID = '{4B708A22-8805-3521-93CB-81639B3BDC6C}';
  CLASS_AnnotationEmbeddedImage: TGUID = '{93226F0E-AB76-38D1-A5AE-1B2A42C66822}';
  CLASS_AnnotationFreeHand: TGUID = '{87D1EA57-CF64-3832-8FDE-AC8421A51563}';
  CLASS_AnnotationFreeHandHighlighter: TGUID = '{229858F7-DABD-32B6-8E4A-FD450E67F7B0}';
  CLASS_AnnotationFreeHandPolygon: TGUID = '{9832485C-1CAD-3A95-8ED7-8AB96E7AEF78}';
  CLASS_AnnotationLine: TGUID = '{3A6F6D9A-419A-3C98-A515-2B745EE786DF}';
  CLASS_AnnotationLineArrow: TGUID = '{D1E7A833-C159-36FD-A53E-94799668DBA7}';
  CLASS_AnnotationLink: TGUID = '{39EC9BC5-4D38-33E1-9E10-73490C3039CB}';
  CLASS_AnnotationRubberStamp: TGUID = '{D7DB0FC7-04D5-301C-AB0B-0555C632AF3F}';
  CLASS_AnnotationPolyRuler: TGUID = '{77EE56EC-61E3-30E8-B42A-49452F99BCC7}';
  CLASS_AnnotationRectangle: TGUID = '{6153D942-3CAA-3092-BB8E-4034DB335BC0}';
  CLASS_AnnotationRectangleHighlighter: TGUID = '{22EA2941-E468-351A-ACEA-BC9D29EF41C9}';
  CLASS_AnnotationRedaction: TGUID = '{373E1604-75E5-4969-90DE-215B75D31E86}';
  CLASS_AnnotationRuler: TGUID = '{BCB0F895-9B96-3B3D-8DB8-92C2782023CA}';
  CLASS_AnnotationStickyNote: TGUID = '{44C32D9E-3498-3387-99FE-7962E1AC7498}';
  CLASS_AnnotationText: TGUID = '{FA10D076-7965-3F32-8BA4-F2F1BDD1B8CF}';
  CLASS_GdPictureRectangle: TGUID = '{B28FD7D7-F731-364A-ABC5-9925FF4EE831}';
  CLASS_GdPictureRectangleF: TGUID = '{4E28F6BE-7B2B-33DE-A39D-28B3F99DEE1C}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum PDFReducerWarningStatus
type
  PDFReducerWarningStatus = TOleEnum;
const
  PDFReducerWarningStatus_OK = $00000001;
  PDFReducerWarningStatus_ImageExtractionFailure = $00000002;
  PDFReducerWarningStatus_ColorDetectionFailure = $00000003;
  PDFReducerWarningStatus_ImageResizeFailure = $00000004;
  PDFReducerWarningStatus_ImageCropFailure = $00000005;
  PDFReducerWarningStatus_ImageResolutionObtentionFailure = $00000006;
  PDFReducerWarningStatus_ImageReplacementFailure = $00000007;
  PDFReducerWarningStatus_MRCImageReplacementFailure = $00000008;
  PDFReducerWarningStatus_PageSelectionFailure = $00000009;
  PDFReducerWarningStatus_ImageObtentionFailure = $0000000A;
  PDFReducerWarningStatus_FileSizeReductionFailure = $0000000B;
  PDFReducerWarningStatus_OriginalFileDeletionFailure = $0000000C;
  PDFReducerWarningStatus_BlankPageRemovalFailure = $0000000D;

// Constants for enum PDFReducerErrorStatus
type
  PDFReducerErrorStatus = TOleEnum;
const
  PDFReducerErrorStatus_OK = $00000001;
  PDFReducerErrorStatus_GetPageImagesCount = $00000002;
  PDFReducerErrorStatus_MRCPostOperationsFailure = $00000003;
  PDFReducerErrorStatus_PageConversionFailure = $00000004;
  PDFReducerErrorStatus_DocumentEncrypted = $00000005;
  PDFReducerErrorStatus_UnexpectedError = $00000006;
  PDFReducerErrorStatus_DirectoryCreationFailure = $00000007;
  PDFReducerErrorStatus_FileOpeningFailure = $00000008;
  PDFReducerErrorStatus_FileOverwriteFailure = $00000009;
  PDFReducerErrorStatus_FileSaveFailure = $0000000A;
  PDFReducerErrorStatus_FileCopyFailure = $0000000B;

// Constants for enum PDFReducerImageQuality
type
  PDFReducerImageQuality = TOleEnum;
const
  PDFReducerImageQuality_ImageQualityVeryLow = $FFFFFFFF;
  PDFReducerImageQuality_ImageQualityLow = $00000000;
  PDFReducerImageQuality_ImageQualityMedium = $00000001;
  PDFReducerImageQuality_ImageQualityHigh = $00000002;
  PDFReducerImageQuality_ImageQualityVeryHigh = $00000003;
  PDFReducerImageQuality_ImageQualityVeryVeryHigh = $00000004;

// Constants for enum PDFReducerPDFVersion
type
  PDFReducerPDFVersion = TOleEnum;
const
  PDFReducerPDFVersion_PdfVersionRetainExisting = $00000000;
  PDFReducerPDFVersion_PdfVersion14 = $00000001;
  PDFReducerPDFVersion_PdfVersion15 = $00000002;
  PDFReducerPDFVersion_PdfVersion16 = $00000003;
  PDFReducerPDFVersion_PdfVersion17 = $00000004;
  PDFReducerPDFVersion_PdfVersion20 = $00000005;
  PDFReducerPDFVersion_PdfVersionA1a = $00000006;
  PDFReducerPDFVersion_PdfVersionA1b = $00000007;
  PDFReducerPDFVersion_PdfVersionA2a = $00000008;
  PDFReducerPDFVersion_PdfVersionA2b = $00000009;
  PDFReducerPDFVersion_PdfVersionA2u = $0000000A;
  PDFReducerPDFVersion_PdfVersionA3a = $0000000B;
  PDFReducerPDFVersion_PdfVersionA3b = $0000000C;
  PDFReducerPDFVersion_PdfVersionA3u = $0000000D;
  PDFReducerPDFVersion_PdfVersionA4 = $0000000E;
  PDFReducerPDFVersion_PdfVersionA4e = $0000000F;
  PDFReducerPDFVersion_PdfVersionA4f = $00000010;

// Constants for enum RotateFlipType
type
  RotateFlipType = TOleEnum;
const
  RotateFlipType_RotateNoneFlipNone = $00000000;
  RotateFlipType_Rotate90FlipNone = $00000001;
  RotateFlipType_Rotate180FlipNone = $00000002;
  RotateFlipType_Rotate270FlipNone = $00000003;
  RotateFlipType_RotateNoneFlipX = $00000004;
  RotateFlipType_Rotate90FlipX = $00000005;
  RotateFlipType_Rotate180FlipX = $00000006;
  RotateFlipType_Rotate270FlipX = $00000007;
  RotateFlipType_RotateNoneFlipY = $00000006;
  RotateFlipType_Rotate90FlipY = $00000007;
  RotateFlipType_Rotate180FlipY = $00000004;
  RotateFlipType_Rotate270FlipY = $00000005;
  RotateFlipType_RotateNoneFlipXY = $00000002;
  RotateFlipType_Rotate90FlipXY = $00000003;
  RotateFlipType_Rotate180FlipXY = $00000000;
  RotateFlipType_Rotate270FlipXY = $00000001;

// Constants for enum InterpolationMode
type
  InterpolationMode = TOleEnum;
const
  InterpolationMode_Bicubic = $00000004;
  InterpolationMode_Bilinear = $00000003;
  InterpolationMode_Default = $00000000;
  InterpolationMode_High = $00000002;
  InterpolationMode_HighQualityBicubic = $00000007;
  InterpolationMode_HighQualityBilinear = $00000006;
  InterpolationMode_Invalid = $FFFFFFFF;
  InterpolationMode_Low = $00000001;
  InterpolationMode_NearestNeighbor = $00000005;

// Constants for enum PixelFormat
type
  PixelFormat = TOleEnum;
const
  PixelFormat_Alpha = $00040000;
  PixelFormat_Canonical = $00200000;
  PixelFormat_DontCare = $00000000;
  PixelFormat_Extended = $00100000;
  PixelFormat_Format16bppArgb1555 = $00061007;
  PixelFormat_Format16bppGrayScale = $00101004;
  PixelFormat_Format16bppRgb555 = $00021005;
  PixelFormat_Format16bppRgb565 = $00021006;
  PixelFormat_Format1bppIndexed = $00030101;
  PixelFormat_Format24bppRgb = $00021808;
  PixelFormat_Format32bppArgb = $0026200A;
  PixelFormat_Format32bppPArgb = $000E200B;
  PixelFormat_Format32bppRgb = $00022009;
  PixelFormat_Format48bppRgb = $0010300C;
  PixelFormat_Format4bppIndexed = $00030402;
  PixelFormat_Format64bppArgb = $0034400D;
  PixelFormat_Format64bppPArgb = $001C400E;
  PixelFormat_Format8bppIndexed = $00030803;
  PixelFormat_Gdi = $00020000;
  PixelFormat_Indexed = $00010000;
  PixelFormat_Max = $0000000F;
  PixelFormat_PAlpha = $00080000;
  PixelFormat_Undefined = $00000000;

// Constants for enum Duplex
type
  Duplex = TOleEnum;
const
  Duplex_Default = $FFFFFFFF;
  Duplex_Horizontal = $00000003;
  Duplex_Simplex = $00000001;
  Duplex_Vertical = $00000002;

// Constants for enum FontStyle
type
  FontStyle = TOleEnum;
const
  FontStyle_Regular = $00000000;
  FontStyle_Bold = $00000001;
  FontStyle_Italic = $00000002;
  FontStyle_Underline = $00000004;
  FontStyle_Strikeout = $00000008;

// Constants for enum OCRBlockSpecialFormat
type
  OCRBlockSpecialFormat = TOleEnum;
const
  OCRBlockSpecialFormat_None = $00000000;
  OCRBlockSpecialFormat_MRZ = $00000001;
  OCRBlockSpecialFormat_MICRLineE13B = $00000002;
  OCRBlockSpecialFormat_MICRLineCMC7 = $00000003;

// Constants for enum SegmentationMode
type
  SegmentationMode = TOleEnum;
const
  SegmentationMode_ConnectedComponents4 = $00000000;
  SegmentationMode_ConnectedComponents8 = $00000001;
  SegmentationMode_PageLayout = $00000002;
  SegmentationMode_WordLayout = $00000003;
  SegmentationMode_WordLayoutLK = $00000004;

// Constants for enum DataType
type
  DataType = TOleEnum;
const
  DataType_Unknown = $00000001;
  DataType_PhoneNumber = $00000002;
  DataType_EmailAddress = $00000003;
  DataType_Currency = $00000004;
  DataType_Number = $00000005;
  DataType_DateTime = $00000006;
  DataType_String = $00000007;
  DataType_PostCode = $00000008;
  DataType_URL = $00000009;
  DataType_Percentage = $0000000A;
  DataType_Symbol = $0000000B;
  DataType_VatIDValue = $0000000C;
  DataType_TimePeriod = $0000000D;
  DataType_IBAN = $0000000E;
  DataType_BIC = $0000000F;
  DataType_CreditCard = $00000010;
  DataType_UID = $00000011;
  DataType_PostalAddress = $00000012;
  DataType_VIN = $00000013;
  DataType_SSN = $00000014;

// Constants for enum MRZFormat
type
  MRZFormat = TOleEnum;
const
  MRZFormat_Unknown = $00000000;
  MRZFormat_TD1 = $00000001;
  MRZFormat_TD2 = $00000002;
  MRZFormat_TD3 = $00000003;
  MRZFormat_MRVA = $00000004;
  MRZFormat_MRVB = $00000005;
  MRZFormat_FRID = $00000006;
  MRZFormat_CR = $00000007;
  MRZFormat_MRVAUS = $00000008;

// Constants for enum RAWImageLoadingOptions
type
  RAWImageLoadingOptions = TOleEnum;
const
  RAWImageLoadingOptions_Preview = $00000000;
  RAWImageLoadingOptions_Display = $00000001;
  RAWImageLoadingOptions_LoadHalf = $00000002;
  RAWImageLoadingOptions_RawColorSpace = $00000004;
  RAWImageLoadingOptions_AutomaticBrightness = $00000008;

// Constants for enum PdfConformance
type
  PdfConformance = TOleEnum;
const
  PdfConformance_Unknown = $FFFFFFFF;
  PdfConformance_PDF = $00000000;
  PdfConformance_PDF_A_1a = $00000001;
  PdfConformance_PDF_A_1b = $00000002;
  PdfConformance_PDF_A_2a = $00000003;
  PdfConformance_PDF_A_2u = $00000004;
  PdfConformance_PDF_A_2b = $00000005;
  PdfConformance_PDF_A_3a = $00000006;
  PdfConformance_PDF_A_3u = $00000007;
  PdfConformance_PDF_A_3b = $00000008;
  PdfConformance_PDF_A_4 = $00000009;
  PdfConformance_PDF_A_4e = $0000000A;
  PdfConformance_PDF_A_4f = $0000000B;
  PdfConformance_PDF1_0 = $0000000C;
  PdfConformance_PDF1_1 = $0000000D;
  PdfConformance_PDF1_2 = $0000000E;
  PdfConformance_PDF1_3 = $0000000F;
  PdfConformance_PDF1_4 = $00000010;
  PdfConformance_PDF1_5 = $00000011;
  PdfConformance_PDF1_6 = $00000012;
  PdfConformance_PDF1_7 = $00000013;
  PdfConformance_PDF2_0 = $00000014;
  PdfConformance_PDF_UA_1 = $00000015;

// Constants for enum PdfConversionConformance
type
  PdfConversionConformance = TOleEnum;
const
  PdfConversionConformance_PDF_A_1a = $00000000;
  PdfConversionConformance_PDF_A_1b = $00000001;
  PdfConversionConformance_PDF_A_2a = $00000002;
  PdfConversionConformance_PDF_A_2u = $00000003;
  PdfConversionConformance_PDF_A_2b = $00000004;
  PdfConversionConformance_PDF_A_3a = $00000005;
  PdfConversionConformance_PDF_A_3u = $00000006;
  PdfConversionConformance_PDF_A_3b = $00000007;
  PdfConversionConformance_PDF_A_4 = $00000008;
  PdfConversionConformance_PDF_A_4e = $00000009;
  PdfConversionConformance_PDF_A_4f = $0000000A;

// Constants for enum PdfValidationConformance
type
  PdfValidationConformance = TOleEnum;
const
  PdfValidationConformance_PDF_A_1a = $00000000;
  PdfValidationConformance_PDF_A_1b = $00000001;
  PdfValidationConformance_PDF_A_2a = $00000002;
  PdfValidationConformance_PDF_A_2u = $00000003;
  PdfValidationConformance_PDF_A_2b = $00000004;
  PdfValidationConformance_PDF_A_3a = $00000005;
  PdfValidationConformance_PDF_A_3u = $00000006;
  PdfValidationConformance_PDF_A_3b = $00000007;
  PdfValidationConformance_PDF_A_4 = $00000008;
  PdfValidationConformance_PDF_A_4e = $00000009;
  PdfValidationConformance_PDF_A_4f = $0000000A;

// Constants for enum PdfOrigin
type
  PdfOrigin = TOleEnum;
const
  PdfOrigin_PdfOriginUnknown = $FFFFFFFF;
  PdfOrigin_PdfOriginBottomLeft = $00000000;
  PdfOrigin_PdfOriginTopLeft = $00000001;
  PdfOrigin_PdfOriginTopRight = $00000002;
  PdfOrigin_PdfOriginBottomRight = $00000003;

// Constants for enum PdfOcgState
type
  PdfOcgState = TOleEnum;
const
  PdfOcgState_Undefined = $FFFFFFFF;
  PdfOcgState_StateOff = $00000000;
  PdfOcgState_StateOn = $00000001;

// Constants for enum PdfPageLabelStyle
type
  PdfPageLabelStyle = TOleEnum;
const
  PdfPageLabelStyle_PdfPageLabelStyleUndefined = $00000000;
  PdfPageLabelStyle_PdfPageLabelStyleDecimalArabicNumerals = $00000001;
  PdfPageLabelStyle_PdfPageLabelStyleUppercaseRomanNumerals = $00000002;
  PdfPageLabelStyle_PdfPageLabelStyleLowercaseRomanNumerals = $00000003;
  PdfPageLabelStyle_PdfPageLabelStyleUppercaseLetters = $00000004;
  PdfPageLabelStyle_PdfPageLabelStyleLowercaseLetters = $00000005;

// Constants for enum PdfImageMaskType
type
  PdfImageMaskType = TOleEnum;
const
  PdfImageMaskType_PdfMaskTypeUnknown = $FFFFFFFF;
  PdfImageMaskType_PdfMaskTypeNone = $00000000;
  PdfImageMaskType_PdfMaskTypeStencil = $00000001;
  PdfImageMaskType_PdfMaskTypeExplicit = $00000002;
  PdfImageMaskType_PdfMaskTypeSoft = $00000003;
  PdfImageMaskType_PdfMaskTypeColorKey = $00000004;

// Constants for enum PdfViewerPreference
type
  PdfViewerPreference = TOleEnum;
const
  PdfViewerPreference_PdfViewerPreferenceHideToolbar = $00000000;
  PdfViewerPreference_PdfViewerPreferenceHideMenubar = $00000001;
  PdfViewerPreference_PdfViewerPreferenceHideWindowUI = $00000002;
  PdfViewerPreference_PdfViewerPreferenceFitWindow = $00000003;
  PdfViewerPreference_PdfViewerPreferenceCenterWindow = $00000004;
  PdfViewerPreference_PdfViewerPreferenceDisplayDocTitle = $00000005;

// Constants for enum PdfViewerPageMode
type
  PdfViewerPageMode = TOleEnum;
const
  PdfViewerPageMode_PdfViewerPageModeUseNone = $00000000;
  PdfViewerPageMode_PdfViewerPageModeUseOutlines = $00000001;
  PdfViewerPageMode_PdfViewerPageModeUseThumbs = $00000002;
  PdfViewerPageMode_PdfViewerPageModeFullScreen = $00000003;
  PdfViewerPageMode_PdfViewerPageModeUseOC = $00000004;
  PdfViewerPageMode_PdfViewerPageModeUseAttachments = $00000005;

// Constants for enum PdfViewerNonFullScreenPageMode
type
  PdfViewerNonFullScreenPageMode = TOleEnum;
const
  PdfViewerNonFullScreenPageMode_PdfViewerNonFullScreenPageModeUseNone = $00000000;
  PdfViewerNonFullScreenPageMode_PdfViewerNonFullScreenPageModeUseOutlines = $00000001;
  PdfViewerNonFullScreenPageMode_PdfViewerNonFullScreenPageModeUseThumbs = $00000002;
  PdfViewerNonFullScreenPageMode_PdfViewerNonFullScreenPageModeUseOC = $00000003;

// Constants for enum PdfViewerLayoutMode
type
  PdfViewerLayoutMode = TOleEnum;
const
  PdfViewerLayoutMode_PdfViewerLayoutModeSinglePage = $00000000;
  PdfViewerLayoutMode_PdfViewerLayoutModeOneColumn = $00000001;
  PdfViewerLayoutMode_PdfViewerLayoutModeTwoColumnLeft = $00000002;
  PdfViewerLayoutMode_PdfViewerLayoutModeTwoColumnRight = $00000003;
  PdfViewerLayoutMode_PdfViewerLayoutModeTwoPageLeft = $00000004;
  PdfViewerLayoutMode_PdfViewerLayoutModeTwoPageRight = $00000005;

// Constants for enum PdfPageSizes
type
  PdfPageSizes = TOleEnum;
const
  PdfPageSizes_PdfPageSizeLetter = $00000001;
  PdfPageSizes_PdfPageSizeLetterSmall = $00000002;
  PdfPageSizes_PdfPageSizeTabloid = $00000003;
  PdfPageSizes_PdfPageSizeLedger = $00000004;
  PdfPageSizes_PdfPageSizeLegal = $00000005;
  PdfPageSizes_PdfPageSizeStatement = $00000006;
  PdfPageSizes_PdfPageSizeExecutive = $00000007;
  PdfPageSizes_PdfPageSizeA3 = $00000008;
  PdfPageSizes_PdfPageSizeA4 = $00000009;
  PdfPageSizes_PdfPageSizeA4Small = $0000000A;
  PdfPageSizes_PdfPageSizeA5 = $0000000B;
  PdfPageSizes_PdfPageSizeB4 = $0000000C;
  PdfPageSizes_PdfPageSizeB5 = $0000000D;
  PdfPageSizes_PdfPageSizeFolio = $0000000E;
  PdfPageSizes_PdfPageSizeQuarto = $0000000F;
  PdfPageSizes_PdfPageSize10X14 = $00000010;
  PdfPageSizes_PdfPageSize11X17 = $00000011;
  PdfPageSizes_PdfPageSizeNote = $00000012;
  PdfPageSizes_PdfPageSizeEnv_9 = $00000013;
  PdfPageSizes_PdfPageSizeEnv_10 = $00000014;
  PdfPageSizes_PdfPageSizeEnv_11 = $00000015;
  PdfPageSizes_PdfPageSizeEnv_12 = $00000016;
  PdfPageSizes_PdfPageSizeEnv_14 = $00000017;
  PdfPageSizes_PdfPageSizeCSheet = $00000018;
  PdfPageSizes_PdfPageSizeDSheet = $00000019;
  PdfPageSizes_PdfPageSizeESheet = $0000001A;
  PdfPageSizes_PdfPageSizeEnv_Dl = $0000001B;
  PdfPageSizes_PdfPageSizeEnv_C5 = $0000001C;
  PdfPageSizes_PdfPageSizeEnv_C3 = $0000001D;
  PdfPageSizes_PdfPageSizeEnv_C4 = $0000001E;
  PdfPageSizes_PdfPageSizeEnv_C6 = $0000001F;
  PdfPageSizes_PdfPageSizeEnv_C65 = $00000020;
  PdfPageSizes_PdfPageSizeEnv_B4 = $00000021;
  PdfPageSizes_PdfPageSizeEnv_B5 = $00000022;
  PdfPageSizes_PdfPageSizeEnv_B6 = $00000023;
  PdfPageSizes_PdfPageSizeEnv_Italy = $00000024;
  PdfPageSizes_PdfPageSizeEnv_Monarch = $00000025;
  PdfPageSizes_PdfPageSizeEnv_Personal = $00000026;
  PdfPageSizes_PdfPageSizeFanFold_Us = $00000027;
  PdfPageSizes_PdfPageSizeFanFold_Std_German = $00000028;
  PdfPageSizes_PdfPageSizeFanFold_Lgl_German = $00000029;
  PdfPageSizes_PdfPageSizeIso_B4 = $0000002A;
  PdfPageSizes_PdfPageSizeJapanese_Postcard = $0000002B;
  PdfPageSizes_PdfPageSize9X11 = $0000002C;
  PdfPageSizes_PdfPageSize10X11 = $0000002D;
  PdfPageSizes_PdfPageSize15X11 = $0000002E;
  PdfPageSizes_PdfPageSizeEnv_Invite = $0000002F;
  PdfPageSizes_PdfPageSizeLetter_Extra = $00000032;
  PdfPageSizes_PdfPageSizeLegal_Extra = $00000033;
  PdfPageSizes_PdfPageSizeTabloid_Extra = $00000034;
  PdfPageSizes_PdfPageSizeA4_Extra = $00000035;
  PdfPageSizes_PdfPageSizeLetter_Transverse = $00000036;
  PdfPageSizes_PdfPageSizeA4_Transverse = $00000037;
  PdfPageSizes_PdfPageSizeLetter_Extra_Transverse = $00000038;
  PdfPageSizes_PdfPageSizeA_Plus = $00000039;
  PdfPageSizes_PdfPageSizeB_Plus = $0000003A;
  PdfPageSizes_PdfPageSizeLetter_Plus = $0000003B;
  PdfPageSizes_PdfPageSizeA4_Plus = $0000003C;
  PdfPageSizes_PdfPageSizeA5_Transverse = $0000003D;
  PdfPageSizes_PdfPageSizeB5_Transverse = $0000003E;
  PdfPageSizes_PdfPageSizeA3_Extra = $0000003F;
  PdfPageSizes_PdfPageSizeA5_Extra = $00000040;
  PdfPageSizes_PdfPageSizeB5_Extra = $00000041;
  PdfPageSizes_PdfPageSizeA2 = $00000042;
  PdfPageSizes_PdfPageSizeA3_Transverse = $00000043;
  PdfPageSizes_PdfPageSizeA3_Extra_Transverse = $00000044;
  PdfPageSizes_PdfPageSizeDbl_Japanese_Postcard = $00000045;
  PdfPageSizes_PdfPageSizeA6 = $00000046;
  PdfPageSizes_PdfPageSizeJEnv_Kaku2 = $00000047;
  PdfPageSizes_PdfPageSizeJEnv_Kaku3 = $00000048;
  PdfPageSizes_PdfPageSizeJEnv_Chou3 = $00000049;
  PdfPageSizes_PdfPageSizeJEnv_Chou4 = $0000004A;
  PdfPageSizes_PdfPageSizeLetter_Rotated = $0000004B;
  PdfPageSizes_PdfPageSizeA3_Rotated = $0000004C;
  PdfPageSizes_PdfPageSizeA4_Rotated = $0000004D;
  PdfPageSizes_PdfPageSizeA5_Rotated = $0000004E;
  PdfPageSizes_PdfPageSizeB4_Jis_Rotated = $0000004F;
  PdfPageSizes_PdfPageSizeB5_Jis_Rotated = $00000050;
  PdfPageSizes_PdfPageSizeJapanese_Postcard_Rotated = $00000051;
  PdfPageSizes_PdfPageSizeDbl_Japanese_Postcard_Rotated = $00000052;
  PdfPageSizes_PdfPageSizeA6_Rotated = $00000053;
  PdfPageSizes_PdfPageSizeJEnv_Kaku2_Rotated = $00000054;
  PdfPageSizes_PdfPageSizeJEnv_Kaku3_Rotated = $00000055;
  PdfPageSizes_PdfPageSizeJEnv_Chou3_Rotated = $00000056;
  PdfPageSizes_PdfPageSizeJEnv_Chou4_Rotated = $00000057;
  PdfPageSizes_PdfPageSizeB6_Jis = $00000058;
  PdfPageSizes_PdfPageSizeB6_Jis_Rotated = $00000059;
  PdfPageSizes_PdfPageSize12X11 = $0000005A;
  PdfPageSizes_PdfPageSizeJEnv_You4 = $0000005B;
  PdfPageSizes_PdfPageSizeJEnv_You4_Rotated = $0000005C;
  PdfPageSizes_PdfPageSizeP16K = $0000005D;
  PdfPageSizes_PdfPageSizeP32K = $0000005E;
  PdfPageSizes_PdfPageSizeP32KBig = $0000005F;
  PdfPageSizes_PdfPageSizePEnv_1 = $00000060;
  PdfPageSizes_PdfPageSizePEnv_2 = $00000061;
  PdfPageSizes_PdfPageSizePEnv_3 = $00000062;
  PdfPageSizes_PdfPageSizePEnv_4 = $00000063;
  PdfPageSizes_PdfPageSizePEnv_5 = $00000064;
  PdfPageSizes_PdfPageSizePEnv_6 = $00000065;
  PdfPageSizes_PdfPageSizePEnv_7 = $00000066;
  PdfPageSizes_PdfPageSizePEnv_8 = $00000067;
  PdfPageSizes_PdfPageSizePEnv_9 = $00000068;
  PdfPageSizes_PdfPageSizePEnv_10 = $00000069;
  PdfPageSizes_PdfPageSizeP16K_Rotated = $0000006A;
  PdfPageSizes_PdfPageSizeP32K_Rotated = $0000006B;
  PdfPageSizes_PdfPageSizeP32KBig_Rotated = $0000006C;
  PdfPageSizes_PdfPageSizePEnv_1_Rotated = $0000006D;
  PdfPageSizes_PdfPageSizePEnv_2_Rotated = $0000006E;
  PdfPageSizes_PdfPageSizePEnv_3_Rotated = $0000006F;
  PdfPageSizes_PdfPageSizePEnv_4_Rotated = $00000070;
  PdfPageSizes_PdfPageSizePEnv_5_Rotated = $00000071;
  PdfPageSizes_PdfPageSizePEnv_6_Rotated = $00000072;
  PdfPageSizes_PdfPageSizePEnv_7_Rotated = $00000073;
  PdfPageSizes_PdfPageSizePEnv_8_Rotated = $00000074;
  PdfPageSizes_PdfPageSizePEnv_9_Rotated = $00000075;
  PdfPageSizes_PdfPageSizePEnv_10_Rotated = $00000076;

// Constants for enum PdfSignatureType
type
  PdfSignatureType = TOleEnum;
const
  PdfSignatureType_SignatureTypeUnknown = $FFFFFFFF;
  PdfSignatureType_SignatureTypePlaceHolder = $00000000;
  PdfSignatureType_SignatureTypeAdobePPKLite = $00000001;

// Constants for enum PdfSignatureCertificationLevel
type
  PdfSignatureCertificationLevel = TOleEnum;
const
  PdfSignatureCertificationLevel_NotCertified = $00000000;
  PdfSignatureCertificationLevel_NoChanges = $00000001;
  PdfSignatureCertificationLevel_FormFilling = $00000002;
  PdfSignatureCertificationLevel_FormFillingAndAnnotations = $00000003;

// Constants for enum PdfAnnotationFlag
type
  PdfAnnotationFlag = TOleEnum;
const
  PdfAnnotationFlag_PdfAnnotationFlagDefault = $00000000;
  PdfAnnotationFlag_PdfAnnotationFlagInvisible = $00000001;
  PdfAnnotationFlag_PdfAnnotationFlagHidden = $00000002;
  PdfAnnotationFlag_PdfAnnotationFlagPrint = $00000004;
  PdfAnnotationFlag_PdfAnnotationFlagNoZoom = $00000008;
  PdfAnnotationFlag_PdfAnnotationFlagNoRotate = $00000010;
  PdfAnnotationFlag_PdfAnnotationFlagNoView = $00000020;
  PdfAnnotationFlag_PdfAnnotationFlagReadOnly = $00000040;
  PdfAnnotationFlag_PdfAnnotationFlagLocked = $00000080;
  PdfAnnotationFlag_PdfAnnotationFlagToggleNoView = $00000100;
  PdfAnnotationFlag_PdfAnnotationFlagLockedContents = $00000200;

// Constants for enum PdfFormFieldVisibility
type
  PdfFormFieldVisibility = TOleEnum;
const
  PdfFormFieldVisibility_PdfFormFieldVisible = $00000000;
  PdfFormFieldVisibility_PdfFormFieldHidden = $00000001;
  PdfFormFieldVisibility_PdfFormFieldVisibleNotPrintable = $00000002;
  PdfFormFieldVisibility_PdfFormFieldHidenPrintable = $00000003;

// Constants for enum PdfAnnotationBorderStyle
type
  PdfAnnotationBorderStyle = TOleEnum;
const
  PdfAnnotationBorderStyle_PdfAnnotationBorderStyleSolid = $00000000;
  PdfAnnotationBorderStyle_PdfAnnotationBorderStyleDashed = $00000001;
  PdfAnnotationBorderStyle_PdfAnnotationBorderStyleBeveled = $00000002;
  PdfAnnotationBorderStyle_PdfAnnotationBorderStyleInset = $00000003;
  PdfAnnotationBorderStyle_PdfAnnotationBorderStyleUnderline = $00000004;

// Constants for enum PdfCheckBoxStyle
type
  PdfCheckBoxStyle = TOleEnum;
const
  PdfCheckBoxStyle_PdfCheckBoxStyleCheck = $00000000;
  PdfCheckBoxStyle_PdfCheckBoxStyleCircle = $00000001;
  PdfCheckBoxStyle_PdfCheckBoxStyleCross = $00000002;
  PdfCheckBoxStyle_PdfCheckBoxStyleDiamond = $00000003;
  PdfCheckBoxStyle_PdfCheckBoxStyleSquare = $00000004;
  PdfCheckBoxStyle_PdfCheckBoxStyleStar = $00000005;

// Constants for enum PdfAnnotationLineEndingStyle
type
  PdfAnnotationLineEndingStyle = TOleEnum;
const
  PdfAnnotationLineEndingStyle_PdfAnnotationLineEndingStyleSquare = $00000000;
  PdfAnnotationLineEndingStyle_PdfAnnotationLineEndingStyleCircle = $00000001;
  PdfAnnotationLineEndingStyle_PdfAnnotationLineEndingStyleDiamond = $00000002;
  PdfAnnotationLineEndingStyle_PdfAnnotationLineEndingStyleOpenArrow = $00000003;
  PdfAnnotationLineEndingStyle_PdfAnnotationLineEndingStyleClosedArrow = $00000004;
  PdfAnnotationLineEndingStyle_PdfAnnotationLineEndingStyleNone = $00000005;
  PdfAnnotationLineEndingStyle_PdfAnnotationLineEndingStyleButt = $00000006;
  PdfAnnotationLineEndingStyle_PdfAnnotationLineEndingStyleROpenArrow = $00000007;
  PdfAnnotationLineEndingStyle_PdfAnnotationLineEndingStyleRClosedArrow = $00000008;
  PdfAnnotationLineEndingStyle_PdfAnnotationLineEndingStyleSlash = $00000009;

// Constants for enum PdfStickyNoteAnnotationIcon
type
  PdfStickyNoteAnnotationIcon = TOleEnum;
const
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconComment = $00000000;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconKey = $00000001;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconNote = $00000002;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconHelp = $00000003;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconNewParagraph = $00000004;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconParagraph = $00000005;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconInsert = $00000006;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconCheck = $00000007;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconCircle = $00000008;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconCross = $00000009;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconCrossHairs = $0000000A;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconRightArrow = $0000000B;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconRightPointer = $0000000C;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconStar = $0000000D;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconUpArrow = $0000000E;
  PdfStickyNoteAnnotationIcon_PdfAnnotationIconUpLeftArrow = $0000000F;

// Constants for enum PdfRubberStampAnnotationIcon
type
  PdfRubberStampAnnotationIcon = TOleEnum;
const
  PdfRubberStampAnnotationIcon_Approved = $00000000;
  PdfRubberStampAnnotationIcon_NotApproved = $00000001;
  PdfRubberStampAnnotationIcon_NotForPublicRelease = $00000002;
  PdfRubberStampAnnotationIcon_Confidential = $00000003;
  PdfRubberStampAnnotationIcon_Final = $00000004;
  PdfRubberStampAnnotationIcon_ForComment = $00000005;
  PdfRubberStampAnnotationIcon_Draft = $00000006;
  PdfRubberStampAnnotationIcon_ForPublicRelease = $00000007;
  PdfRubberStampAnnotationIcon_SBCompleted = $00000008;
  PdfRubberStampAnnotationIcon_SBInformationOnly = $00000009;
  PdfRubberStampAnnotationIcon_SBVoid = $0000000A;
  PdfRubberStampAnnotationIcon_SBPreliminaryResults = $0000000B;
  PdfRubberStampAnnotationIcon_SBRejected = $0000000C;
  PdfRubberStampAnnotationIcon_SHAccepted = $0000000D;
  PdfRubberStampAnnotationIcon_SHInitialHere = $0000000E;
  PdfRubberStampAnnotationIcon_SHSignHere = $0000000F;
  PdfRubberStampAnnotationIcon_SHWitness = $00000010;
  PdfRubberStampAnnotationIcon_DApproved = $00000011;
  PdfRubberStampAnnotationIcon_DConfidential = $00000012;
  PdfRubberStampAnnotationIcon_DReceived = $00000013;
  PdfRubberStampAnnotationIcon_DReviewed = $00000014;

// Constants for enum PdfMeasurementUnit
type
  PdfMeasurementUnit = TOleEnum;
const
  PdfMeasurementUnit_PdfMeasurementUnitUndefined = $FFFFFFFF;
  PdfMeasurementUnit_PdfMeasurementUnitPoint = $00000000;
  PdfMeasurementUnit_PdfMeasurementUnitMillimeter = $00000001;
  PdfMeasurementUnit_PdfMeasurementUnitCentimeter = $00000002;
  PdfMeasurementUnit_PdfMeasurementUnitInch = $00000003;

// Constants for enum PdfPageOrientation
type
  PdfPageOrientation = TOleEnum;
const
  PdfPageOrientation_PdfPageOrientationUndefined = $FFFFFFFF;
  PdfPageOrientation_PdfPageOrientationPortrait = $00000000;
  PdfPageOrientation_PdfPageOrientationLandscape = $00000001;

// Constants for enum PdfTextMode
type
  PdfTextMode = TOleEnum;
const
  PdfTextMode_PdfTextModeFill = $00000000;
  PdfTextMode_PdfTextModeStroke = $00000001;
  PdfTextMode_PdfTextModeFillStroke = $00000002;
  PdfTextMode_PdfTextModeInvisible = $00000003;
  PdfTextMode_PdfTextModeFillPath = $00000004;
  PdfTextMode_PdfTextModeOutlinePath = $00000005;
  PdfTextMode_PdfTextModeFillStrokePath = $00000006;
  PdfTextMode_PdfTextClipPath = $00000007;

// Constants for enum PdfPageBox
type
  PdfPageBox = TOleEnum;
const
  PdfPageBox_PdfPageBoxMediaBox = $00000000;
  PdfPageBox_PdfPageBoxCropBox = $00000001;
  PdfPageBox_PdfPageBoxBleedBox = $00000002;
  PdfPageBox_PdfPageBoxTrimBox = $00000003;
  PdfPageBox_PdfPageBoxArtBox = $00000004;

// Constants for enum PdfEncryption
type
  PdfEncryption = TOleEnum;
const
  PdfEncryption_PdfEncryptionUnknown = $FFFFFFFF;
  PdfEncryption_PdfEncryptionNone = $00000000;
  PdfEncryption_PdfEncryption40BitRC4 = $00000001;
  PdfEncryption_PdfEncryption128BitRC4 = $00000002;
  PdfEncryption_PdfEncryption128BitAES = $00000003;
  PdfEncryption_PdfEncryption256BitAES = $00000004;
  PdfEncryption_PdfEncryption256BitAES2 = $00000005;

// Constants for enum PdfRight
type
  PdfRight = TOleEnum;
const
  PdfRight_PdfRightCanView = $00000000;
  PdfRight_PdfRightCanPrint = $00000004;
  PdfRight_PdfRightCanModify = $00000008;
  PdfRight_PdfRightCanCopy = $00000010;
  PdfRight_PdfRightCanAddNotes = $00000020;
  PdfRight_PdfRightCanFillFields = $00000100;
  PdfRight_PdfRightCanCopyAccess = $00000200;
  PdfRight_PdfRightCanAssemble = $00000400;
  PdfRight_PdfRightCanPrintFull = $00000800;
  PdfRight_PdfRightAll = $00000F3C;

// Constants for enum PdfEncryptionMode
type
  PdfEncryptionMode = TOleEnum;
const
  PdfEncryptionMode_UnKnown = $FFFFFFFF;
  PdfEncryptionMode_None = $00000000;
  PdfEncryptionMode_Standard = $00000001;
  PdfEncryptionMode_PublicKey = $00000002;

// Constants for enum PdfActionNamed
type
  PdfActionNamed = TOleEnum;
const
  PdfActionNamed_ActionNamedUndefined = $FFFFFFFF;
  PdfActionNamed_ActionNamedNextPage = $00000000;
  PdfActionNamed_ActionNamedPrevPage = $00000001;
  PdfActionNamed_ActionNamedFirstPage = $00000002;
  PdfActionNamed_ActionNamedLastPage = $00000003;

// Constants for enum PdfActionLaunchOperation
type
  PdfActionLaunchOperation = TOleEnum;
const
  PdfActionLaunchOperation_ActionLaunchOperationUndefined = $FFFFFFFF;
  PdfActionLaunchOperation_ActionLaunchOperationOpen = $00000000;
  PdfActionLaunchOperation_ActionLaunchOperationPrint = $00000001;

// Constants for enum PdfActionType
type
  PdfActionType = TOleEnum;
const
  PdfActionType_ActionTypeUnknown = $FFFFFFFF;
  PdfActionType_ActionTypeGoTo = $00000000;
  PdfActionType_ActionTypeGoToR = $00000001;
  PdfActionType_ActionTypeGoToE = $00000002;
  PdfActionType_ActionTypeLaunch = $00000003;
  PdfActionType_ActionTypeThread = $00000004;
  PdfActionType_ActionTypeURI = $00000005;
  PdfActionType_ActionTypeSound = $00000006;
  PdfActionType_ActionTypeMovie = $00000007;
  PdfActionType_ActionTypeHide = $00000008;
  PdfActionType_ActionTypeNamed = $00000009;
  PdfActionType_ActionTypeSubmitForm = $0000000A;
  PdfActionType_ActionTypeResetForm = $0000000B;
  PdfActionType_ActionTypeImportData = $0000000C;
  PdfActionType_ActionTypeJavaScript = $0000000D;
  PdfActionType_ActionTypeSetOCGState = $0000000E;
  PdfActionType_ActionTypeRendition = $0000000F;
  PdfActionType_ActionTypeTransition = $00000010;
  PdfActionType_ActionTypeGoTo3DView = $00000011;
  PdfActionType_ActionTypeExplicitDestination = $00000012;

// Constants for enum PdfDestinationType
type
  PdfDestinationType = TOleEnum;
const
  PdfDestinationType_DestinationTypeUndefined = $FFFFFFFF;
  PdfDestinationType_DestinationTypeXYZ = $00000000;
  PdfDestinationType_DestinationTypeFit = $00000001;
  PdfDestinationType_DestinationTypeFitH = $00000002;
  PdfDestinationType_DestinationTypeFitV = $00000003;
  PdfDestinationType_DestinationTypeFitR = $00000004;
  PdfDestinationType_DestinationTypeFitB = $00000005;
  PdfDestinationType_DestinationTypeFitBH = $00000006;
  PdfDestinationType_DestinationTypeFitBV = $00000007;

// Constants for enum PdfColorSpace
type
  PdfColorSpace = TOleEnum;
const
  PdfColorSpace_PdfColorSpaceUnknown = $FFFFFFFF;
  PdfColorSpace_PdfColorSpaceDeviceGray = $00000000;
  PdfColorSpace_PdfColorSpaceDeviceRGB = $00000001;
  PdfColorSpace_PdfColorSpaceDeviceCMYK = $00000002;
  PdfColorSpace_PdfColorSpaceCalGray = $00000003;
  PdfColorSpace_PdfColorSpaceCalRGB = $00000004;
  PdfColorSpace_PdfColorSpaceLab = $00000005;
  PdfColorSpace_PdfColorSpaceICCBased = $00000006;
  PdfColorSpace_PdfColorSpaceIndexed = $00000007;
  PdfColorSpace_PdfColorSpacePattern = $00000008;
  PdfColorSpace_PdfColorSpaceSeparation = $00000009;
  PdfColorSpace_PdfColorSpaceDeviceN = $0000000A;

// Constants for enum PdfLineCapStyle
type
  PdfLineCapStyle = TOleEnum;
const
  PdfLineCapStyle_PdfLineCapStyleButt = $00000000;
  PdfLineCapStyle_PdfLineCapStyleRound = $00000001;
  PdfLineCapStyle_PdfLineCapStyleProjectingSquare = $00000002;

// Constants for enum PdfLineJoinStyle
type
  PdfLineJoinStyle = TOleEnum;
const
  PdfLineJoinStyle_PdfLineJoinStyleMiter = $00000000;
  PdfLineJoinStyle_PdfLineJoinStyleRound = $00000001;
  PdfLineJoinStyle_PdfLineJoinStyleBevel = $00000002;

// Constants for enum PdfAdvancedImageCompression
type
  PdfAdvancedImageCompression = TOleEnum;
const
  PdfAdvancedImageCompression_PdfAdvancedImageCompressionNone = $00000000;
  PdfAdvancedImageCompression_PdfAdvancedImageCompressionColorDetection = $00000001;
  PdfAdvancedImageCompression_PdfAdvancedImageCompressionMRC = $00000002;

// Constants for enum PdfCompression
type
  PdfCompression = TOleEnum;
const
  PdfCompression_PdfCompressionUnknown = $FFFFFFFF;
  PdfCompression_PdfCompressionNone = $00000000;
  PdfCompression_PdfCompressionFlate = $00000001;
  PdfCompression_PdfCompressionCCITT4 = $00000002;
  PdfCompression_PdfCompressionJPEG = $00000003;
  PdfCompression_PdfCompressionJBIG2 = $00000004;
  PdfCompression_PdfCompressionJPEG2000 = $00000005;

// Constants for enum PdfStandardFont
type
  PdfStandardFont = TOleEnum;
const
  PdfStandardFont_PdfStandardFontCourier = $00000001;
  PdfStandardFont_PdfStandardFontCourierOblique = $00000002;
  PdfStandardFont_PdfStandardFontCourierBold = $00000003;
  PdfStandardFont_PdfStandardFontCourierBoldOblique = $00000004;
  PdfStandardFont_PdfStandardFontHelvetica = $00000005;
  PdfStandardFont_PdfStandardFontHelveticaOblique = $00000006;
  PdfStandardFont_PdfStandardFontHelveticaBold = $00000007;
  PdfStandardFont_PdfStandardFontHelveticaBoldOblique = $00000008;
  PdfStandardFont_PdfStandardFontTimesRoman = $00000009;
  PdfStandardFont_PdfStandardFontTimesItalic = $0000000A;
  PdfStandardFont_PdfStandardFontTimesBold = $0000000B;
  PdfStandardFont_PdfStandardFontTimesBoldItalic = $0000000C;
  PdfStandardFont_PdfStandardFontSymbol = $0000000D;
  PdfStandardFont_PdfStandardFontZapfDingbats = $0000000E;

// Constants for enum PdfPortFolioType
type
  PdfPortFolioType = TOleEnum;
const
  PdfPortFolioType_Detail = $00000000;
  PdfPortFolioType_Tile = $00000001;
  PdfPortFolioType_Hiden = $00000002;

// Constants for enum PdfFileAttachmentAnnotIcon
type
  PdfFileAttachmentAnnotIcon = TOleEnum;
const
  PdfFileAttachmentAnnotIcon_None = $00000000;
  PdfFileAttachmentAnnotIcon_Graph = $00000001;
  PdfFileAttachmentAnnotIcon_Paperclip = $00000002;
  PdfFileAttachmentAnnotIcon_PushPin = $00000003;
  PdfFileAttachmentAnnotIcon_Tag = $00000004;

// Constants for enum PdfDocumentMergingOptions
type
  PdfDocumentMergingOptions = TOleEnum;
const
  PdfDocumentMergingOptions_Default = $00000000;
  PdfDocumentMergingOptions_ExcludeAttachments = $00000001;

// Constants for enum PdfRemoveJavaScriptOptions
type
  PdfRemoveJavaScriptOptions = TOleEnum;
const
  PdfRemoveJavaScriptOptions_None = $00000000;
  PdfRemoveJavaScriptOptions_RemoveDocumentActions = $00000001;
  PdfRemoveJavaScriptOptions_RemoveGlobalJavaScript = $00000002;
  PdfRemoveJavaScriptOptions_RemovePageActionsJavaScript = $00000004;
  PdfRemoveJavaScriptOptions_RemoveAnnotationActionsJavaScript = $00000008;
  PdfRemoveJavaScriptOptions_RemoveBookmarkActionsJavaScript = $00000010;
  PdfRemoveJavaScriptOptions_RemoveAllJavaScript = $0000001F;

// Constants for enum PdfTabOrderType
type
  PdfTabOrderType = TOleEnum;
const
  PdfTabOrderType_UnspecifiedOrder = $00000000;
  PdfTabOrderType_RowOrder = $00000001;
  PdfTabOrderType_ColumnOrder = $00000002;
  PdfTabOrderType_StructureOrder = $00000003;
  PdfTabOrderType_AnnotationOrder = $00000004;
  PdfTabOrderType_WidgetOrder = $00000005;

// Constants for enum PdfTextDecorationStyle
type
  PdfTextDecorationStyle = TOleEnum;
const
  PdfTextDecorationStyle_None = $00000000;
  PdfTextDecorationStyle_Underline = $00000001;
  PdfTextDecorationStyle_Strikethrough = $00000002;
  PdfTextDecorationStyle_Overline = $00000004;

// Constants for enum PdfTextUnderlineStyle
type
  PdfTextUnderlineStyle = TOleEnum;
const
  PdfTextUnderlineStyle_Single = $00000001;
  PdfTextUnderlineStyle_Double = $00000002;

// Constants for enum PdfGridSplitOrdering
type
  PdfGridSplitOrdering = TOleEnum;
const
  PdfGridSplitOrdering_ByRows = $00000001;
  PdfGridSplitOrdering_ByColumns = $00000002;

// Constants for enum PageCacheMode
type
  PageCacheMode = TOleEnum;
const
  PageCacheMode_Unspecified = $FFFFFFFF;
  PageCacheMode_Memory = $00000000;
  PageCacheMode_File = $00000001;
  PageCacheMode_FileNoDeleteOnClose = $00000002;

// Constants for enum ColorKey
type
  ColorKey = TOleEnum;
const
  ColorKey_ColorKeyBlue = $00000000;
  ColorKey_ColorKeyGreen = $00000001;
  ColorKey_ColorKeyRed = $00000002;

// Constants for enum ColorDropoutFilter
type
  ColorDropoutFilter = TOleEnum;
const
  ColorDropoutFilter_Red = $00000000;
  ColorDropoutFilter_Magenta = $00000001;
  ColorDropoutFilter_Blue = $00000002;
  ColorDropoutFilter_Cyan = $00000003;
  ColorDropoutFilter_Green = $00000004;
  ColorDropoutFilter_Yellow = $00000005;
  ColorDropoutFilter_MoreRed = $00000006;
  ColorDropoutFilter_MoreMagenta = $00000007;
  ColorDropoutFilter_MoreBlue = $00000008;
  ColorDropoutFilter_MoreCyan = $00000009;
  ColorDropoutFilter_MoreGreen = $0000000A;
  ColorDropoutFilter_MoreYellow = $0000000B;
  ColorDropoutFilter_BlackForm = $0000000C;
  ColorDropoutFilter_RedForm = $0000000D;
  ColorDropoutFilter_BlueForm = $0000000E;

// Constants for enum SearchDirectionHint
type
  SearchDirectionHint = TOleEnum;
const
  SearchDirectionHint_Up = $00000026;
  SearchDirectionHint_Down = $00000028;
  SearchDirectionHint_Left = $00000025;
  SearchDirectionHint_Right = $00000027;

// Constants for enum ExrCompression
type
  ExrCompression = TOleEnum;
const
  ExrCompression_ExrCompressionDefault = $00000000;
  ExrCompression_ExrCompressionFloat = $00000001;
  ExrCompression_ExrCompressionNone = $00000002;
  ExrCompression_ExrCompressionZip = $00000004;
  ExrCompression_ExrCompressionPiz = $00000008;
  ExrCompression_ExrCompressionPxr24 = $00000010;
  ExrCompression_ExrCompressionB44 = $00000020;
  ExrCompression_ExrCompressionLC = $00000040;

// Constants for enum LineRemoveOrientation
type
  LineRemoveOrientation = TOleEnum;
const
  LineRemoveOrientation_Horizontal = $00000001;
  LineRemoveOrientation_Vertical = $00000002;

// Constants for enum HolePunchMargins
type
  HolePunchMargins = TOleEnum;
const
  HolePunchMargins_MarginLeft = $00000001;
  HolePunchMargins_MarginRight = $00000002;
  HolePunchMargins_MarginTop = $00000004;
  HolePunchMargins_MarginBottom = $00000008;
  HolePunchMargins_MarginAll = $0000000F;

// Constants for enum TiffCompression
type
  TiffCompression = TOleEnum;
const
  TiffCompression_TiffCompressionUnknown = $00000000;
  TiffCompression_TiffCompressionNONE = $00000001;
  TiffCompression_TiffCompressionRLE = $00000002;
  TiffCompression_TiffCompressionCCITT3 = $00000003;
  TiffCompression_TiffCompressionCCITT4 = $00000004;
  TiffCompression_TiffCompressionLZW = $00000005;
  TiffCompression_TiffCompressionOJPEG = $00000006;
  TiffCompression_TiffCompressionJPEG = $00000007;
  TiffCompression_TiffCompressionADOBEDEFLATE = $00000008;
  TiffCompression_TiffCompressionNEXT = $00007FFE;
  TiffCompression_TiffCompressionCCITTRLEW = $00008003;
  TiffCompression_TiffCompressionPACKBITS = $00008005;
  TiffCompression_TiffCompressionTHUNDERSCAN = $00008029;
  TiffCompression_TiffCompressionDEFLATE = $000080B2;
  TiffCompression_TiffCompressionAUTO = $00010000;
  TiffCompression_TiffCompressionAUTO2 = $00010001;

// Constants for enum JPEGTransformation
type
  JPEGTransformation = TOleEnum;
const
  JPEGTransformation_JPEGTransformationRotate90 = $00000000;
  JPEGTransformation_JPEGTransformationRotate180 = $00000001;
  JPEGTransformation_JPEGTransformationRotate270 = $00000002;
  JPEGTransformation_JPEGTransformationFlipHorizontal = $00000003;
  JPEGTransformation_JPEGTransformationFlipVertical = $00000004;
  JPEGTransformation_JPEGTransformationTranspose = $00000005;
  JPEGTransformation_JPEGTransformationTransverse = $00000006;

// Constants for enum JPEGSubsamplingMode
type
  JPEGSubsamplingMode = TOleEnum;
const
  JPEGSubsamplingMode_Default = $00000000;
  JPEGSubsamplingMode_Y4Cb1Cr1 = $00001000;
  JPEGSubsamplingMode_Y4Cb2Cr0 = $00004000;
  JPEGSubsamplingMode_Y4Cb2Cr2 = $00008000;
  JPEGSubsamplingMode_Y4Cb4Cr4 = $00010000;

// Constants for enum TwainStatus
type
  TwainStatus = TOleEnum;
const
  TwainStatus_TWAIN_ERROR = $FFFFFFFF;
  TwainStatus_TWAIN_PRESESSION = $00000001;
  TwainStatus_TWAIN_SM_LOADED = $00000002;
  TwainStatus_TWAIN_SM_OPEN = $00000003;
  TwainStatus_TWAIN_SOURCE_OPEN = $00000004;
  TwainStatus_TWAIN_SOURCE_ENABLED = $00000005;
  TwainStatus_TWAIN_TRANSFER_READY = $00000006;
  TwainStatus_TWAIN_TRANSFERRING = $00000007;

// Constants for enum TwainPixelType
type
  TwainPixelType = TOleEnum;
const
  TwainPixelType_TWPT_BW = $00000000;
  TwainPixelType_TWPT_GRAY = $00000001;
  TwainPixelType_TWPT_RGB = $00000002;
  TwainPixelType_TWPT_PALETTE = $00000003;
  TwainPixelType_TWPT_CMY = $00000004;
  TwainPixelType_TWPT_CMYK = $00000005;
  TwainPixelType_TWPT_YUV = $00000006;
  TwainPixelType_TWPT_YUVK = $00000007;
  TwainPixelType_TWPT_CIEXYZ = $00000008;
  TwainPixelType_TWPT_LAB = $00000009;
  TwainPixelType_TWPT_SRGB = $0000000A;
  TwainPixelType_TWPT_SCRGB = $0000000B;
  TwainPixelType_TWPT_BGR = $0000000C;
  TwainPixelType_TWPT_CIELAB = $0000000D;
  TwainPixelType_TWPT_CIELUV = $0000000E;
  TwainPixelType_TWPT_YCBCR = $0000000F;
  TwainPixelType_TWPT_INFRARED = $00000010;

// Constants for enum TwainBarCodeType
type
  TwainBarCodeType = TOleEnum;
const
  TwainBarCodeType_TWBT_NONE = $FFFFFFFF;
  TwainBarCodeType_TWBT_3OF9 = $00000000;
  TwainBarCodeType_TWBT_2OF5INTERLEAVED = $00000001;
  TwainBarCodeType_TWBT_2OF5NONINTERLEAVED = $00000002;
  TwainBarCodeType_TWBT_CODE93 = $00000003;
  TwainBarCodeType_TWBT_CODE128 = $00000004;
  TwainBarCodeType_TWBT_UCC128 = $00000005;
  TwainBarCodeType_TWBT_CODABAR = $00000006;
  TwainBarCodeType_TWBT_UPCA = $00000007;
  TwainBarCodeType_TWBT_UPCE = $00000008;
  TwainBarCodeType_TWBT_EAN8 = $00000009;
  TwainBarCodeType_TWBT_EAN13 = $0000000A;
  TwainBarCodeType_TWBT_POSTNET = $0000000B;
  TwainBarCodeType_TWBT_PDF417 = $0000000C;
  TwainBarCodeType_TWBT_2OF5INDUSTRIAL = $0000000D;
  TwainBarCodeType_TWBT_2OF5MATRIX = $0000000E;
  TwainBarCodeType_TWBT_2OF5DATALOGIC = $0000000F;
  TwainBarCodeType_TWBT_2OF5IATA = $00000010;
  TwainBarCodeType_TWBT_3OF9FULLASCII = $00000011;
  TwainBarCodeType_TWBT_CODABARWITHSTARTSTOP = $00000012;
  TwainBarCodeType_TWBT_MAXICODE = $00000013;

// Constants for enum TwainBarCodeRotation
type
  TwainBarCodeRotation = TOleEnum;
const
  TwainBarCodeRotation_TWBCOR_ROT0 = $00000000;
  TwainBarCodeRotation_TWBCOR_ROT90 = $00000001;
  TwainBarCodeRotation_TWBCOR_ROT180 = $00000002;
  TwainBarCodeRotation_TWBCOR_ROT270 = $00000003;
  TwainBarCodeRotation_TWBCOR_ROTX = $00000004;

// Constants for enum TwainNoiseFilterMode
type
  TwainNoiseFilterMode = TOleEnum;
const
  TwainNoiseFilterMode_TWNF_NONE = $00000000;
  TwainNoiseFilterMode_TWNF_AUTO = $00000001;
  TwainNoiseFilterMode_TWNF_LONEPIXEL = $00000002;
  TwainNoiseFilterMode_TWNF_MAJORITYRULE = $00000003;

// Constants for enum TwainResultCode
type
  TwainResultCode = TOleEnum;
const
  TwainResultCode_TWRC_SUCCESS = $00000000;
  TwainResultCode_TWRC_FAILURE = $00000001;
  TwainResultCode_TWRC_CHECKSTATUS = $00000002;
  TwainResultCode_TWRC_CANCEL = $00000003;
  TwainResultCode_TWRC_DSEVENT = $00000004;
  TwainResultCode_TWRC_NOTDSEVENT = $00000005;
  TwainResultCode_TWRC_XFERDONE = $00000006;
  TwainResultCode_TWRC_ENDOFLIST = $00000007;
  TwainResultCode_TWRC_INFONOTSUPPORTED = $00000008;
  TwainResultCode_TWRC_DATANOTAVAILABLE = $00000009;

// Constants for enum TwainPixelFlavor
type
  TwainPixelFlavor = TOleEnum;
const
  TwainPixelFlavor_TwainPixelFlavorUndefined = $FFFFFFFF;
  TwainPixelFlavor_TwainPixelFlavorChocolate = $00000000;
  TwainPixelFlavor_TwainPixelFlavorVanilla = $00000001;

// Constants for enum TwainConditionCode
type
  TwainConditionCode = TOleEnum;
const
  TwainConditionCode_TWCC_SUCCESS = $00000000;
  TwainConditionCode_TWCC_BUMMER = $00000001;
  TwainConditionCode_TWCC_LOWMEMORY = $00000002;
  TwainConditionCode_TWCC_NODS = $00000003;
  TwainConditionCode_TWCC_MAXCONNECTIONS = $00000004;
  TwainConditionCode_TWCC_OPERATIONERROR = $00000005;
  TwainConditionCode_TWCC_BADCAP = $00000006;
  TwainConditionCode_TWCC_BADPROTOCOL = $00000009;
  TwainConditionCode_TWCC_BADVALUE = $0000000A;
  TwainConditionCode_TWCC_SEQERROR = $0000000B;
  TwainConditionCode_TWCC_BADDEST = $0000000C;
  TwainConditionCode_TWCC_CAPUNSUPPORTED = $0000000D;
  TwainConditionCode_TWCC_CAPBADOPERATION = $0000000E;
  TwainConditionCode_TWCC_CAPSEQERROR = $0000000F;
  TwainConditionCode_TWCC_DENIED = $00000010;
  TwainConditionCode_TWCC_FILEEXISTS = $00000011;
  TwainConditionCode_TWCC_FILENOTFOUND = $00000012;
  TwainConditionCode_TWCC_NOTEMPTY = $00000013;
  TwainConditionCode_TWCC_PAPERJAM = $00000014;
  TwainConditionCode_TWCC_PAPERDOUBLEFEED = $00000015;
  TwainConditionCode_TWCC_FILEWRITEERROR = $00000016;
  TwainConditionCode_TWCC_CHECKDEVICEONLINE = $00000017;
  TwainConditionCode_TWCC_INTERLOCK = $00000018;
  TwainConditionCode_TWCC_DAMAGEDCORNER = $00000019;
  TwainConditionCode_TWCC_FOCUSERROR = $0000001A;
  TwainConditionCode_TWCC_DOCTOOLIGHT = $0000001B;
  TwainConditionCode_TWCC_DOCTOODARK = $0000001C;
  TwainConditionCode_TWCC_NOMEDIA = $0000001D;

// Constants for enum TwainPaperSize
type
  TwainPaperSize = TOleEnum;
const
  TwainPaperSize_NONE = $00000000;
  TwainPaperSize_A4LETTER = $00000001;
  TwainPaperSize_B5LETTER = $00000002;
  TwainPaperSize_USLETTER = $00000003;
  TwainPaperSize_USLEGAL = $00000004;
  TwainPaperSize_A5 = $00000005;
  TwainPaperSize_B4 = $00000006;
  TwainPaperSize_B6 = $00000007;
  TwainPaperSize_USLEDGER = $00000009;
  TwainPaperSize_USEXECUTIVE = $0000000A;
  TwainPaperSize_A3 = $0000000B;
  TwainPaperSize_B3 = $0000000C;
  TwainPaperSize_A6 = $0000000D;
  TwainPaperSize_C4 = $0000000E;
  TwainPaperSize_C5 = $0000000F;
  TwainPaperSize_C6 = $00000010;
  TwainPaperSize_A04 = $00000011;
  TwainPaperSize_A02 = $00000012;
  TwainPaperSize_A0 = $00000013;
  TwainPaperSize_A1 = $00000014;
  TwainPaperSize_A2 = $00000015;
  TwainPaperSize_A4 = $00000001;
  TwainPaperSize_A7 = $00000016;
  TwainPaperSize_A8 = $00000017;
  TwainPaperSize_A9 = $00000018;
  TwainPaperSize_A10 = $00000019;
  TwainPaperSize_ISOB0 = $0000001A;
  TwainPaperSize_ISOB1 = $0000001B;
  TwainPaperSize_ISOB2 = $0000001C;
  TwainPaperSize_ISOB3 = $0000000C;
  TwainPaperSize_ISOB4 = $00000006;
  TwainPaperSize_ISOB5 = $0000001D;
  TwainPaperSize_ISOB6 = $00000007;
  TwainPaperSize_ISOB7 = $0000001E;
  TwainPaperSize_ISOB8 = $0000001F;
  TwainPaperSize_ISOB9 = $00000020;
  TwainPaperSize_ISOB10 = $00000021;
  TwainPaperSize_JISB0 = $00000022;
  TwainPaperSize_JISB1 = $00000023;
  TwainPaperSize_JISB2 = $00000024;
  TwainPaperSize_JISB3 = $00000025;
  TwainPaperSize_JISB4 = $00000026;
  TwainPaperSize_JISB5 = $00000002;
  TwainPaperSize_JISB6 = $00000027;
  TwainPaperSize_JISB7 = $00000028;
  TwainPaperSize_JISB8 = $00000029;
  TwainPaperSize_JISB9 = $0000002A;
  TwainPaperSize_JISB10 = $0000002B;
  TwainPaperSize_C0 = $0000002C;
  TwainPaperSize_C1 = $0000002D;
  TwainPaperSize_C2 = $0000002E;
  TwainPaperSize_C3 = $0000002F;
  TwainPaperSize_C7 = $00000030;
  TwainPaperSize_C8 = $00000031;
  TwainPaperSize_C9 = $00000032;
  TwainPaperSize_C10 = $00000033;
  TwainPaperSize_USSTATEMENT = $00000034;
  TwainPaperSize_BUSINESSCARD = $00000035;
  TwainPaperSize_MAXSIZE = $00000036;

// Constants for enum TwainItemTypes
type
  TwainItemTypes = TOleEnum;
const
  TwainItemTypes_TWTY_INVALID = $FFFFFFFF;
  TwainItemTypes_TWTY_INT8 = $00000000;
  TwainItemTypes_TWTY_INT16 = $00000001;
  TwainItemTypes_TWTY_INT32 = $00000002;
  TwainItemTypes_TWTY_UINT8 = $00000003;
  TwainItemTypes_TWTY_UINT16 = $00000004;
  TwainItemTypes_TWTY_UINT32 = $00000005;
  TwainItemTypes_TWTY_BOOL = $00000006;
  TwainItemTypes_TWTY_FIX32 = $00000007;
  TwainItemTypes_TWTY_FRAME = $00000008;
  TwainItemTypes_TWTY_STR32 = $00000009;
  TwainItemTypes_TWTY_STR64 = $0000000A;
  TwainItemTypes_TWTY_STR128 = $0000000B;
  TwainItemTypes_TWTY_STR255 = $0000000C;

// Constants for enum TwainLanguage
type
  TwainLanguage = TOleEnum;
const
  TwainLanguage_TWLG_DAN = $00000000;
  TwainLanguage_TWLG_DUT = $00000001;
  TwainLanguage_TWLG_ENG = $00000002;
  TwainLanguage_TWLG_FCF = $00000003;
  TwainLanguage_TWLG_FIN = $00000004;
  TwainLanguage_TWLG_FRN = $00000005;
  TwainLanguage_TWLG_GER = $00000006;
  TwainLanguage_TWLG_ICE = $00000007;
  TwainLanguage_TWLG_ITN = $00000008;
  TwainLanguage_TWLG_NOR = $00000009;
  TwainLanguage_TWLG_POR = $0000000A;
  TwainLanguage_TWLG_SPA = $0000000B;
  TwainLanguage_TWLG_SWE = $0000000C;
  TwainLanguage_TWLG_USA = $0000000D;
  TwainLanguage_TWLG_USERLOCALE = $FFFFFFFF;
  TwainLanguage_TWLG_AFRIKAANS = $0000000E;
  TwainLanguage_TWLG_ALBANIA = $0000000F;
  TwainLanguage_TWLG_ARABIC = $00000010;
  TwainLanguage_TWLG_ARABIC_ALGERIA = $00000011;
  TwainLanguage_TWLG_ARABIC_BAHRAIN = $00000012;
  TwainLanguage_TWLG_ARABIC_EGYPT = $00000013;
  TwainLanguage_TWLG_ARABIC_IRAQ = $00000014;
  TwainLanguage_TWLG_ARABIC_JORDAN = $00000015;
  TwainLanguage_TWLG_ARABIC_KUWAIT = $00000016;
  TwainLanguage_TWLG_ARABIC_LEBANON = $00000017;
  TwainLanguage_TWLG_ARABIC_LIBYA = $00000018;
  TwainLanguage_TWLG_ARABIC_MOROCCO = $00000019;
  TwainLanguage_TWLG_ARABIC_OMAN = $0000001A;
  TwainLanguage_TWLG_ARABIC_QATAR = $0000001B;
  TwainLanguage_TWLG_ARABIC_SAUDIARABIA = $0000001C;
  TwainLanguage_TWLG_ARABIC_SYRIA = $0000001D;
  TwainLanguage_TWLG_ARABIC_TUNISIA = $0000001E;
  TwainLanguage_TWLG_ARABIC_UAE = $0000001F;
  TwainLanguage_TWLG_ARABIC_YEMEN = $00000020;
  TwainLanguage_TWLG_BASQUE = $00000021;
  TwainLanguage_TWLG_BYELORUSSIAN = $00000022;
  TwainLanguage_TWLG_BULGARIAN = $00000023;
  TwainLanguage_TWLG_CATALAN = $00000024;
  TwainLanguage_TWLG_CHINESE = $00000025;
  TwainLanguage_TWLG_CHINESE_HONGKONG = $00000026;
  TwainLanguage_TWLG_CHINESE_PRC = $00000027;
  TwainLanguage_TWLG_CHINESE_SINGAPORE = $00000028;
  TwainLanguage_TWLG_CHINESE_SIMPLIFIED = $00000029;
  TwainLanguage_TWLG_CHINESE_TAIWAN = $0000002A;
  TwainLanguage_TWLG_CHINESE_TRADITIONAL = $0000002B;
  TwainLanguage_TWLG_CROATIA = $0000002C;
  TwainLanguage_TWLG_CZECH = $0000002D;
  TwainLanguage_TWLG_DANISH = $00000000;
  TwainLanguage_TWLG_DUTCH = $00000001;
  TwainLanguage_TWLG_DUTCH_BELGIAN = $0000002E;
  TwainLanguage_TWLG_ENGLISH = $00000002;
  TwainLanguage_TWLG_ENGLISH_AUSTRALIAN = $0000002F;
  TwainLanguage_TWLG_ENGLISH_CANADIAN = $00000030;
  TwainLanguage_TWLG_ENGLISH_IRELAND = $00000031;
  TwainLanguage_TWLG_ENGLISH_NEWZEALAND = $00000032;
  TwainLanguage_TWLG_ENGLISH_SOUTHAFRICA = $00000033;
  TwainLanguage_TWLG_ENGLISH_UK = $00000034;
  TwainLanguage_TWLG_ENGLISH_USA = $0000000D;
  TwainLanguage_TWLG_ESTONIAN = $00000035;
  TwainLanguage_TWLG_FAEROESE = $00000036;
  TwainLanguage_TWLG_FARSI = $00000037;
  TwainLanguage_TWLG_FINNISH = $00000004;
  TwainLanguage_TWLG_FRENCH = $00000005;
  TwainLanguage_TWLG_FRENCH_BELGIAN = $00000038;
  TwainLanguage_TWLG_FRENCH_CANADIAN = $00000003;
  TwainLanguage_TWLG_FRENCH_LUXEMBOURG = $00000039;
  TwainLanguage_TWLG_FRENCH_SWISS = $0000003A;
  TwainLanguage_TWLG_GERMAN = $00000006;
  TwainLanguage_TWLG_GERMAN_AUSTRIAN = $0000003B;
  TwainLanguage_TWLG_GERMAN_LUXEMBOURG = $0000003C;
  TwainLanguage_TWLG_GERMAN_LIECHTENSTEIN = $0000003D;
  TwainLanguage_TWLG_GERMAN_SWISS = $0000003E;
  TwainLanguage_TWLG_GREEK = $0000003F;
  TwainLanguage_TWLG_HEBREW = $00000040;
  TwainLanguage_TWLG_HUNGARIAN = $00000041;
  TwainLanguage_TWLG_ICELANDIC = $00000007;
  TwainLanguage_TWLG_INDONESIAN = $00000042;
  TwainLanguage_TWLG_ITALIAN = $00000008;
  TwainLanguage_TWLG_ITALIAN_SWISS = $00000043;
  TwainLanguage_TWLG_JAPANESE = $00000044;
  TwainLanguage_TWLG_KOREAN = $00000045;
  TwainLanguage_TWLG_KOREAN_JOHAB = $00000046;
  TwainLanguage_TWLG_LATVIAN = $00000047;
  TwainLanguage_TWLG_LITHUANIAN = $00000048;
  TwainLanguage_TWLG_NORWEGIAN = $00000009;
  TwainLanguage_TWLG_NORWEGIAN_BOKMAL = $00000049;
  TwainLanguage_TWLG_NORWEGIAN_NYNORSK = $0000004A;
  TwainLanguage_TWLG_POLISH = $0000004B;
  TwainLanguage_TWLG_PORTUGUESE = $0000000A;
  TwainLanguage_TWLG_PORTUGUESE_BRAZIL = $0000004C;
  TwainLanguage_TWLG_ROMANIAN = $0000004D;
  TwainLanguage_TWLG_RUSSIAN = $0000004E;
  TwainLanguage_TWLG_SERBIAN_LATIN = $0000004F;
  TwainLanguage_TWLG_SLOVAK = $00000050;
  TwainLanguage_TWLG_SLOVENIAN = $00000051;
  TwainLanguage_TWLG_SPANISH = $0000000B;
  TwainLanguage_TWLG_SPANISH_MEXICAN = $00000052;
  TwainLanguage_TWLG_SPANISH_MODERN = $00000053;
  TwainLanguage_TWLG_SWEDISH = $0000000C;
  TwainLanguage_TWLG_THAI = $00000054;
  TwainLanguage_TWLG_TURKISH = $00000055;
  TwainLanguage_TWLG_UKRANIAN = $00000056;
  TwainLanguage_TWLG_ASSAMESE = $00000057;
  TwainLanguage_TWLG_BENGALI = $00000058;
  TwainLanguage_TWLG_BIHARI = $00000059;
  TwainLanguage_TWLG_BODO = $0000005A;
  TwainLanguage_TWLG_DOGRI = $0000005B;
  TwainLanguage_TWLG_GUJARATI = $0000005C;
  TwainLanguage_TWLG_HARYANVI = $0000005D;
  TwainLanguage_TWLG_HINDI = $0000005E;
  TwainLanguage_TWLG_KANNADA = $0000005F;
  TwainLanguage_TWLG_KASHMIRI = $00000060;
  TwainLanguage_TWLG_MALAYALAM = $00000061;
  TwainLanguage_TWLG_MARATHI = $00000062;
  TwainLanguage_TWLG_MARWARI = $00000063;
  TwainLanguage_TWLG_MEGHALAYAN = $00000064;
  TwainLanguage_TWLG_MIZO = $00000065;
  TwainLanguage_TWLG_NAGA = $00000066;
  TwainLanguage_TWLG_ORISSI = $00000067;
  TwainLanguage_TWLG_PUNJABI = $00000068;
  TwainLanguage_TWLG_PUSHTU = $00000069;
  TwainLanguage_TWLG_SERBIAN_CYRILLIC = $0000006A;
  TwainLanguage_TWLG_SIKKIMI = $0000006B;
  TwainLanguage_TWLG_SWEDISH_FINLAND = $0000006C;
  TwainLanguage_TWLG_TAMIL = $0000006D;
  TwainLanguage_TWLG_TELUGU = $0000006E;
  TwainLanguage_TWLG_TRIPURI = $0000006F;
  TwainLanguage_TWLG_URDU = $00000070;
  TwainLanguage_TWLG_VIETNAMESE = $00000071;

// Constants for enum TwainCountry
type
  TwainCountry = TOleEnum;
const
  TwainCountry_TWCY_AFGHANISTAN = $000003E9;
  TwainCountry_TWCY_ALGERIA = $000000D5;
  TwainCountry_TWCY_AMERICANSAMOA = $000002AC;
  TwainCountry_TWCY_ANDORRA = $00000021;
  TwainCountry_TWCY_ANGOLA = $000003EA;
  TwainCountry_TWCY_ANGUILLA = $00001F9A;
  TwainCountry_TWCY_ANTIGUA = $00001F9B;
  TwainCountry_TWCY_ARGENTINA = $00000036;
  TwainCountry_TWCY_ARUBA = $00000129;
  TwainCountry_TWCY_ASCENSIONI = $000000F7;
  TwainCountry_TWCY_AUSTRALIA = $0000003D;
  TwainCountry_TWCY_AUSTRIA = $0000002B;
  TwainCountry_TWCY_BAHAMAS = $00001F9C;
  TwainCountry_TWCY_BAHRAIN = $000003CD;
  TwainCountry_TWCY_BANGLADESH = $00000370;
  TwainCountry_TWCY_BARBADOS = $00001F9D;
  TwainCountry_TWCY_BELGIUM = $00000020;
  TwainCountry_TWCY_BELIZE = $000001F5;
  TwainCountry_TWCY_BENIN = $000000E5;
  TwainCountry_TWCY_BERMUDA = $00001F9E;
  TwainCountry_TWCY_BHUTAN = $000003EB;
  TwainCountry_TWCY_BOLIVIA = $0000024F;
  TwainCountry_TWCY_BOTSWANA = $0000010B;
  TwainCountry_TWCY_BRITAIN = $00000006;
  TwainCountry_TWCY_BRITVIRGINIS = $00001F9F;
  TwainCountry_TWCY_BRAZIL = $00000037;
  TwainCountry_TWCY_BRUNEI = $000002A1;
  TwainCountry_TWCY_BULGARIA = $00000167;
  TwainCountry_TWCY_BURKINAFASO = $000003EC;
  TwainCountry_TWCY_BURMA = $000003ED;
  TwainCountry_TWCY_BURUNDI = $000003EE;
  TwainCountry_TWCY_CAMAROON = $000000ED;
  TwainCountry_TWCY_CANADA = $00000002;
  TwainCountry_TWCY_CAPEVERDEIS = $000000EE;
  TwainCountry_TWCY_CAYMANIS = $00001FA0;
  TwainCountry_TWCY_CENTRALAFREP = $000003EF;
  TwainCountry_TWCY_CHAD = $000003F0;
  TwainCountry_TWCY_CHILE = $00000038;
  TwainCountry_TWCY_CHINA = $00000056;
  TwainCountry_TWCY_CHRISTMASIS = $000003F1;
  TwainCountry_TWCY_COCOSIS = $000003F1;
  TwainCountry_TWCY_COLOMBIA = $00000039;
  TwainCountry_TWCY_COMOROS = $000003F2;
  TwainCountry_TWCY_CONGO = $000003F3;
  TwainCountry_TWCY_COOKIS = $000003F4;
  TwainCountry_TWCY_COSTARICA = $000001FA;
  TwainCountry_TWCY_CUBA = $00000005;
  TwainCountry_TWCY_CYPRUS = $00000165;
  TwainCountry_TWCY_CZECHOSLOVAKIA = $0000002A;
  TwainCountry_TWCY_DENMARK = $0000002D;
  TwainCountry_TWCY_DJIBOUTI = $000003F5;
  TwainCountry_TWCY_DOMINICA = $00001FA1;
  TwainCountry_TWCY_DOMINCANREP = $00001FA2;
  TwainCountry_TWCY_EASTERIS = $000003F6;
  TwainCountry_TWCY_ECUADOR = $00000251;
  TwainCountry_TWCY_EGYPT = $00000014;
  TwainCountry_TWCY_ELSALVADOR = $000001F7;
  TwainCountry_TWCY_EQGUINEA = $000003F7;
  TwainCountry_TWCY_ETHIOPIA = $000000FB;
  TwainCountry_TWCY_FALKLANDIS = $000003F8;
  TwainCountry_TWCY_FAEROEIS = $0000012A;
  TwainCountry_TWCY_FIJIISLANDS = $000002A7;
  TwainCountry_TWCY_FINLAND = $00000166;
  TwainCountry_TWCY_FRANCE = $00000021;
  TwainCountry_TWCY_FRANTILLES = $00000254;
  TwainCountry_TWCY_FRGUIANA = $00000252;
  TwainCountry_TWCY_FRPOLYNEISA = $000002B1;
  TwainCountry_TWCY_FUTANAIS = $00000413;
  TwainCountry_TWCY_GABON = $000000F1;
  TwainCountry_TWCY_GAMBIA = $000000DC;
  TwainCountry_TWCY_GERMANY = $00000031;
  TwainCountry_TWCY_GHANA = $000000E9;
  TwainCountry_TWCY_GIBRALTER = $0000015E;
  TwainCountry_TWCY_GREECE = $0000001E;
  TwainCountry_TWCY_GREENLAND = $0000012B;
  TwainCountry_TWCY_GRENADA = $00001FA3;
  TwainCountry_TWCY_GRENEDINES = $00001F4F;
  TwainCountry_TWCY_GUADELOUPE = $0000024E;
  TwainCountry_TWCY_GUAM = $0000029F;
  TwainCountry_TWCY_GUANTANAMOBAY = $00001517;
  TwainCountry_TWCY_GUATEMALA = $000001F6;
  TwainCountry_TWCY_GUINEA = $000000E0;
  TwainCountry_TWCY_GUINEABISSAU = $000003F9;
  TwainCountry_TWCY_GUYANA = $00000250;
  TwainCountry_TWCY_HAITI = $000001FD;
  TwainCountry_TWCY_HONDURAS = $000001F8;
  TwainCountry_TWCY_HONGKONG = $00000354;
  TwainCountry_TWCY_HUNGARY = $00000024;
  TwainCountry_TWCY_ICELAND = $00000162;
  TwainCountry_TWCY_INDIA = $0000005B;
  TwainCountry_TWCY_INDONESIA = $0000003E;
  TwainCountry_TWCY_IRAN = $00000062;
  TwainCountry_TWCY_IRAQ = $000003C4;
  TwainCountry_TWCY_IRELAND = $00000161;
  TwainCountry_TWCY_ISRAEL = $000003CC;
  TwainCountry_TWCY_ITALY = $00000027;
  TwainCountry_TWCY_IVORYCOAST = $000000E1;
  TwainCountry_TWCY_JAMAICA = $00001F4A;
  TwainCountry_TWCY_JAPAN = $00000051;
  TwainCountry_TWCY_JORDAN = $000003C2;
  TwainCountry_TWCY_KENYA = $000000FE;
  TwainCountry_TWCY_KIRIBATI = $000003FA;
  TwainCountry_TWCY_KOREA = $00000052;
  TwainCountry_TWCY_KUWAIT = $000003C5;
  TwainCountry_TWCY_LAOS = $000003FB;
  TwainCountry_TWCY_LEBANON = $000003FC;
  TwainCountry_TWCY_LIBERIA = $000000E7;
  TwainCountry_TWCY_LIBYA = $000000DA;
  TwainCountry_TWCY_LIECHTENSTEIN = $00000029;
  TwainCountry_TWCY_LUXENBOURG = $00000160;
  TwainCountry_TWCY_MACAO = $00000355;
  TwainCountry_TWCY_MADAGASCAR = $000003FD;
  TwainCountry_TWCY_MALAWI = $00000109;
  TwainCountry_TWCY_MALAYSIA = $0000003C;
  TwainCountry_TWCY_MALDIVES = $000003C0;
  TwainCountry_TWCY_MALI = $000003FE;
  TwainCountry_TWCY_MALTA = $00000164;
  TwainCountry_TWCY_MARSHALLIS = $000002B4;
  TwainCountry_TWCY_MAURITANIA = $000003FF;
  TwainCountry_TWCY_MAURITIUS = $000000E6;
  TwainCountry_TWCY_MEXICO = $00000003;
  TwainCountry_TWCY_MICRONESIA = $000002B3;
  TwainCountry_TWCY_MIQUELON = $000001FC;
  TwainCountry_TWCY_MONACO = $00000021;
  TwainCountry_TWCY_MONGOLIA = $00000400;
  TwainCountry_TWCY_MONTSERRAT = $00001F4B;
  TwainCountry_TWCY_MOROCCO = $000000D4;
  TwainCountry_TWCY_MOZAMBIQUE = $00000401;
  TwainCountry_TWCY_NAMIBIA = $00000108;
  TwainCountry_TWCY_NAURU = $00000402;
  TwainCountry_TWCY_NEPAL = $000003D1;
  TwainCountry_TWCY_NETHERLANDS = $0000001F;
  TwainCountry_TWCY_NETHANTILLES = $00000257;
  TwainCountry_TWCY_NEVIS = $00001F4C;
  TwainCountry_TWCY_NEWCALEDONIA = $000002AF;
  TwainCountry_TWCY_NEWZEALAND = $00000040;
  TwainCountry_TWCY_NICARAGUA = $000001F9;
  TwainCountry_TWCY_NIGER = $000000E3;
  TwainCountry_TWCY_NIGERIA = $000000EA;
  TwainCountry_TWCY_NIUE = $00000403;
  TwainCountry_TWCY_NORFOLKI = $00000404;
  TwainCountry_TWCY_NORWAY = $0000002F;
  TwainCountry_TWCY_OMAN = $000003C8;
  TwainCountry_TWCY_PAKISTAN = $0000005C;
  TwainCountry_TWCY_PALAU = $00000405;
  TwainCountry_TWCY_PANAMA = $000001FB;
  TwainCountry_TWCY_PARAGUAY = $00000253;
  TwainCountry_TWCY_PERU = $00000033;
  TwainCountry_TWCY_PHILLIPPINES = $0000003F;
  TwainCountry_TWCY_PITCAIRNIS = $00000406;
  TwainCountry_TWCY_PNEWGUINEA = $000002A3;
  TwainCountry_TWCY_POLAND = $00000030;
  TwainCountry_TWCY_PORTUGAL = $0000015F;
  TwainCountry_TWCY_QATAR = $000003CE;
  TwainCountry_TWCY_REUNIONI = $00000407;
  TwainCountry_TWCY_ROMANIA = $00000028;
  TwainCountry_TWCY_RWANDA = $000000FA;
  TwainCountry_TWCY_SAIPAN = $0000029E;
  TwainCountry_TWCY_SANMARINO = $00000027;
  TwainCountry_TWCY_SAOTOME = $00000409;
  TwainCountry_TWCY_SAUDIARABIA = $000003C6;
  TwainCountry_TWCY_SENEGAL = $000000DD;
  TwainCountry_TWCY_SEYCHELLESIS = $0000040A;
  TwainCountry_TWCY_SIERRALEONE = $0000040B;
  TwainCountry_TWCY_SINGAPORE = $00000041;
  TwainCountry_TWCY_SOLOMONIS = $0000040C;
  TwainCountry_TWCY_SOMALI = $0000040D;
  TwainCountry_TWCY_SOUTHAFRICA = $0000001B;
  TwainCountry_TWCY_SPAIN = $00000022;
  TwainCountry_TWCY_SRILANKA = $0000005E;
  TwainCountry_TWCY_STHELENA = $00000408;
  TwainCountry_TWCY_STKITTS = $00001F4D;
  TwainCountry_TWCY_STLUCIA = $00001F4E;
  TwainCountry_TWCY_STPIERRE = $000001FC;
  TwainCountry_TWCY_STVINCENT = $00001F4F;
  TwainCountry_TWCY_SUDAN = $0000040E;
  TwainCountry_TWCY_SURINAME = $00000255;
  TwainCountry_TWCY_SWAZILAND = $0000010C;
  TwainCountry_TWCY_SWEDEN = $0000002E;
  TwainCountry_TWCY_SWITZERLAND = $00000029;
  TwainCountry_TWCY_SYRIA = $0000040F;
  TwainCountry_TWCY_TAIWAN = $00000376;
  TwainCountry_TWCY_TANZANIA = $000000FF;
  TwainCountry_TWCY_THAILAND = $00000042;
  TwainCountry_TWCY_TOBAGO = $00001F50;
  TwainCountry_TWCY_TOGO = $000000E4;
  TwainCountry_TWCY_TONGAIS = $000002A4;
  TwainCountry_TWCY_TRINIDAD = $00001F50;
  TwainCountry_TWCY_TUNISIA = $000000D8;
  TwainCountry_TWCY_TURKEY = $0000005A;
  TwainCountry_TWCY_TURKSCAICOS = $00001F51;
  TwainCountry_TWCY_TUVALU = $00000410;
  TwainCountry_TWCY_UGANDA = $00000100;
  TwainCountry_TWCY_USSR = $00000007;
  TwainCountry_TWCY_UAEMIRATES = $000003CB;
  TwainCountry_TWCY_UNITEDKINGDOM = $0000002C;
  TwainCountry_TWCY_USA = $00000001;
  TwainCountry_TWCY_URUGUAY = $00000256;
  TwainCountry_TWCY_VANUATU = $00000411;
  TwainCountry_TWCY_VATICANCITY = $00000027;
  TwainCountry_TWCY_VENEZUELA = $0000003A;
  TwainCountry_TWCY_WAKE = $00000412;
  TwainCountry_TWCY_WALLISIS = $00000413;
  TwainCountry_TWCY_WESTERNSAHARA = $00000414;
  TwainCountry_TWCY_WESTERNSAMOA = $00000415;
  TwainCountry_TWCY_YEMEN = $00000416;
  TwainCountry_TWCY_YUGOSLAVIA = $00000026;
  TwainCountry_TWCY_ZAIRE = $000000F3;
  TwainCountry_TWCY_ZAMBIA = $00000104;
  TwainCountry_TWCY_ZIMBABWE = $00000107;
  TwainCountry_TWCY_ALBANIA = $00000163;
  TwainCountry_TWCY_ARMENIA = $00000176;
  TwainCountry_TWCY_AZERBAIJAN = $000003E2;
  TwainCountry_TWCY_BELARUS = $00000177;
  TwainCountry_TWCY_BOSNIAHERZGO = $00000183;
  TwainCountry_TWCY_CAMBODIA = $00000357;
  TwainCountry_TWCY_CROATIA = $00000181;
  TwainCountry_TWCY_CZECHREPUBLIC = $000001A4;
  TwainCountry_TWCY_DIEGOGARCIA = $000000F6;
  TwainCountry_TWCY_ERITREA = $00000123;
  TwainCountry_TWCY_ESTONIA = $00000174;
  TwainCountry_TWCY_GEORGIA = $000003E3;
  TwainCountry_TWCY_LATVIA = $00000173;
  TwainCountry_TWCY_LESOTHO = $0000010A;
  TwainCountry_TWCY_LITHUANIA = $00000172;
  TwainCountry_TWCY_MACEDONIA = $00000185;
  TwainCountry_TWCY_MAYOTTEIS = $0000010D;
  TwainCountry_TWCY_MOLDOVA = $00000175;
  TwainCountry_TWCY_MYANMAR = $0000005F;
  TwainCountry_TWCY_NORTHKOREA = $00000352;
  TwainCountry_TWCY_PUERTORICO = $00000313;
  TwainCountry_TWCY_RUSSIA = $00000007;
  TwainCountry_TWCY_SERBIA = $0000017D;
  TwainCountry_TWCY_SLOVAKIA = $000001A5;
  TwainCountry_TWCY_SLOVENIA = $00000182;
  TwainCountry_TWCY_SOUTHKOREA = $00000052;
  TwainCountry_TWCY_UKRAINE = $0000017C;
  TwainCountry_TWCY_USVIRGINIS = $00000154;
  TwainCountry_TWCY_VIETNAM = $00000054;

// Constants for enum TwainCompression
type
  TwainCompression = TOleEnum;
const
  TwainCompression_TWCP_UNSUPPORTED = $FFFFFFFF;
  TwainCompression_TWCP_NONE = $00000000;
  TwainCompression_TWCP_PACKBITS = $00000001;
  TwainCompression_TWCP_GROUP31D = $00000002;
  TwainCompression_TWCP_GROUP31DEOL = $00000003;
  TwainCompression_TWCP_GROUP32D = $00000004;
  TwainCompression_TWCP_GROUP4 = $00000005;
  TwainCompression_TWCP_JPEG = $00000006;
  TwainCompression_TWCP_LZW = $00000007;
  TwainCompression_TWCP_JBIG = $00000008;
  TwainCompression_TWCP_PNG = $00000009;
  TwainCompression_TWCP_RLE4 = $0000000A;
  TwainCompression_TWCP_RLE8 = $0000000B;
  TwainCompression_TWCP_BITFIELDS = $0000000C;

// Constants for enum TwainBitDepthReduction
type
  TwainBitDepthReduction = TOleEnum;
const
  TwainBitDepthReduction_TWBR_UNSUPPORTED = $FFFFFFFF;
  TwainBitDepthReduction_TWBR_THRESHOLD = $00000000;
  TwainBitDepthReduction_TWBR_HALFTONES = $00000001;
  TwainBitDepthReduction_TWBR_CUSTHALFTONE = $00000002;
  TwainBitDepthReduction_TWBR_DIFFUSION = $00000003;

// Constants for enum TwainPrinterMode
type
  TwainPrinterMode = TOleEnum;
const
  TwainPrinterMode_TWPR_UNSUPPORTED = $FFFFFFFF;
  TwainPrinterMode_TWPR_IMPRINTERTOPBEFORE = $00000000;
  TwainPrinterMode_TWPR_IMPRINTERTOPAFTER = $00000001;
  TwainPrinterMode_TWPR_IMPRINTERBOTTOMBEFORE = $00000002;
  TwainPrinterMode_TWPR_IMPRINTERBOTTOMAFTER = $00000003;
  TwainPrinterMode_TWPR_ENDORSERTOPBEFORE = $00000004;
  TwainPrinterMode_TWPR_ENDORSERTOPAFTER = $00000005;
  TwainPrinterMode_TWPR_ENDORSERBOTTOMBEFORE = $00000006;
  TwainPrinterMode_TWPR_ENDORSERBOTTOMAFTER = $00000007;

// Constants for enum TwainOrientation
type
  TwainOrientation = TOleEnum;
const
  TwainOrientation_TWOR_ROT0 = $00000000;
  TwainOrientation_TWOR_ROT90 = $00000001;
  TwainOrientation_TWOR_ROT180 = $00000002;
  TwainOrientation_TWOR_ROT270 = $00000003;
  TwainOrientation_TWOR_PORTRAIT = $00000000;
  TwainOrientation_TWOR_LANDSCAPE = $00000003;
  TwainOrientation_TWOR_AUTO = $00000004;
  TwainOrientation_TWOR_AUTOTEXT = $00000005;
  TwainOrientation_TWOR_AUTOPICTURE = $00000006;

// Constants for enum TwainImageFileFormats
type
  TwainImageFileFormats = TOleEnum;
const
  TwainImageFileFormats_TWFF_UNSUPPORTED = $FFFFFFFF;
  TwainImageFileFormats_TWFF_TIFF = $00000000;
  TwainImageFileFormats_TWFF_PICT = $00000001;
  TwainImageFileFormats_TWFF_BMP = $00000002;
  TwainImageFileFormats_TWFF_XBM = $00000003;
  TwainImageFileFormats_TWFF_JFIF = $00000004;
  TwainImageFileFormats_TWFF_FPX = $00000005;
  TwainImageFileFormats_TWFF_TIFFMULTI = $00000006;
  TwainImageFileFormats_TWFF_PNG = $00000007;
  TwainImageFileFormats_TWFF_SPIFF = $00000008;
  TwainImageFileFormats_TWFF_EXIF = $00000009;
  TwainImageFileFormats_TWPT_PDF = $0000000A;
  TwainImageFileFormats_TWPT_JPEG2000 = $0000000B;
  TwainImageFileFormats_TWFF_JPN = $0000000C;
  TwainImageFileFormats_TWFF_JPX = $0000000D;
  TwainImageFileFormats_TWFF_DEJAVU = $0000000E;
  TwainImageFileFormats_TWFF_PDFA = $0000000F;
  TwainImageFileFormats_TWFF_PDFA2 = $00000010;

// Constants for enum TwainCapabilities
type
  TwainCapabilities = TOleEnum;
const
  TwainCapabilities_CAP_AUTHOR = $00001000;
  TwainCapabilities_CAP_CAPTION = $00001001;
  TwainCapabilities_CAP_TIMEDATE = $00001004;
  TwainCapabilities_CAP_DEVICETIMEDATE = $0000101F;
  TwainCapabilities_CAP_SERIALNUMBER = $00001024;
  TwainCapabilities_CAP_PRINTERSTRING = $0000102A;
  TwainCapabilities_CAP_PRINTERSUFFIX = $0000102B;
  TwainCapabilities_ICAP_HALFTONES = $00001109;
  TwainCapabilities_CAP_CUSTOMBASE = $00008000;
  TwainCapabilities_CAP_XFERCOUNT = $00000001;
  TwainCapabilities_ICAP_COMPRESSION = $00000100;
  TwainCapabilities_ICAP_PIXELTYPE = $00000101;
  TwainCapabilities_ICAP_UNITS = $00000102;
  TwainCapabilities_ICAP_XFERMECH = $00000103;
  TwainCapabilities_CAP_FEEDERENABLED = $00001002;
  TwainCapabilities_CAP_FEEDERLOADED = $00001003;
  TwainCapabilities_CAP_SUPPORTEDCAPS = $00001005;
  TwainCapabilities_CAP_EXTENDEDCAPS = $00001006;
  TwainCapabilities_CAP_AUTOFEED = $00001007;
  TwainCapabilities_CAP_CLEARPAGE = $00001008;
  TwainCapabilities_CAP_FEEDPAGE = $00001009;
  TwainCapabilities_CAP_REWINDPAGE = $0000100A;
  TwainCapabilities_CAP_INDICATORS = $0000100B;
  TwainCapabilities_CAP_SUPPORTEDCAPSEXT = $0000100C;
  TwainCapabilities_CAP_PAPERDETECTABLE = $0000100D;
  TwainCapabilities_CAP_UICONTROLLABLE = $0000100E;
  TwainCapabilities_CAP_DEVICEONLINE = $0000100F;
  TwainCapabilities_CAP_AUTOSCAN = $00001010;
  TwainCapabilities_CAP_THUMBNAILSENABLED = $00001011;
  TwainCapabilities_CAP_DUPLEX = $00001012;
  TwainCapabilities_CAP_DUPLEXENABLED = $00001013;
  TwainCapabilities_CAP_ENABLEDSUIONLY = $00001014;
  TwainCapabilities_CAP_CUSTOMDSDATA = $00001015;
  TwainCapabilities_CAP_ENDORSER = $00001016;
  TwainCapabilities_CAP_JOBCONTROL = $00001017;
  TwainCapabilities_CAP_ALARMS = $00001018;
  TwainCapabilities_CAP_ALARMVOLUME = $00001019;
  TwainCapabilities_CAP_AUTOMATICCAPTURE = $0000101A;
  TwainCapabilities_CAP_TIMEBEFOREFIRSTCAPTURE = $0000101B;
  TwainCapabilities_CAP_TIMEBETWEENCAPTURES = $0000101C;
  TwainCapabilities_CAP_CLEARBUFFERS = $0000101D;
  TwainCapabilities_CAP_MAXBATCHBUFFERS = $0000101E;
  TwainCapabilities_CAP_POWERSUPPLY = $00001020;
  TwainCapabilities_CAP_CAMERAPREVIEWUI = $00001021;
  TwainCapabilities_CAP_DEVICEEVENT = $00001022;
  TwainCapabilities_CAP_PRINTER = $00001026;
  TwainCapabilities_CAP_PRINTERENABLED = $00001027;
  TwainCapabilities_CAP_PRINTERINDEX = $00001028;
  TwainCapabilities_CAP_PRINTERMODE = $00001029;
  TwainCapabilities_CAP_LANGUAGE = $0000102C;
  TwainCapabilities_CAP_FEEDERALIGNMENT = $0000102D;
  TwainCapabilities_CAP_FEEDERORDER = $0000102E;
  TwainCapabilities_CAP_REACQUIREALLOWED = $00001030;
  TwainCapabilities_CAP_BATTERYMINUTES = $00001032;
  TwainCapabilities_CAP_BATTERYPERCENTAGE = $00001033;
  TwainCapabilities_CAP_CAMERASIDE = $00001034;
  TwainCapabilities_CAP_SEGMENTED = $00001035;
  TwainCapabilities_CAP_CAMERAENABLED = $00001036;
  TwainCapabilities_CAP_CAMERAORDER = $00001037;
  TwainCapabilities_CAP_MICRENABLED = $00001038;
  TwainCapabilities_CAP_FEEDERPREP = $00001039;
  TwainCapabilities_CAP_FEEDERPOCKET = $0000103A;
  TwainCapabilities_CAP_AUTOMATICSENSEMEDIUM = $0000103B;
  TwainCapabilities_CAP_CUSTOMINTERFACEGUID = $0000103C;
  TwainCapabilities_CAP_SUPPORTEDCAPSSEGMENTUNIQUE = $0000103D;
  TwainCapabilities_CAP_SUPPORTEDDATS = $0000103E;
  TwainCapabilities_CAP_DOUBLEFEEDDETECTION = $0000103F;
  TwainCapabilities_CAP_DOUBLEFEEDDETECTIONLENGTH = $00001040;
  TwainCapabilities_CAP_DOUBLEFEEDDETECTIONSENSITIVITY = $00001041;
  TwainCapabilities_CAP_DOUBLEFEEDDETECTIONRESPONSE = $00001042;
  TwainCapabilities_CAP_PAPERHANDLING = $00001043;
  TwainCapabilities_CAP_INDICATORSMODE = $00001044;
  TwainCapabilities_CAP_PRINTERVERTICALOFFSET = $00001045;
  TwainCapabilities_CAP_POWERSAVETIME = $00001046;
  TwainCapabilities_CAP_PRINTERCHARROTATION = $00001047;
  TwainCapabilities_CAP_PRINTERFONTSTYLE = $00001048;
  TwainCapabilities_CAP_PRINTERINDEXLEADCHAR = $00001049;
  TwainCapabilities_CAP_PRINTERINDEXMAXVALUE = $0000104A;
  TwainCapabilities_CAP_PRINTERINDEXNUMDIGITS = $0000104B;
  TwainCapabilities_CAP_PRINTERINDEXSTEP = $0000104C;
  TwainCapabilities_CAP_PRINTERINDEXTRIGGER = $0000104D;
  TwainCapabilities_CAP_PRINTERSTRINGPREVIEW = $0000104E;
  TwainCapabilities_ICAP_AUTOBRIGHT = $00001100;
  TwainCapabilities_ICAP_BRIGHTNESS = $00001101;
  TwainCapabilities_ICAP_CONTRAST = $00001103;
  TwainCapabilities_ICAP_CUSTHALFTONE = $00001104;
  TwainCapabilities_ICAP_EXPOSURETIME = $00001105;
  TwainCapabilities_ICAP_FILTER = $00001106;
  TwainCapabilities_ICAP_FLASHUSED = $00001107;
  TwainCapabilities_ICAP_GAMMA = $00001108;
  TwainCapabilities_ICAP_HIGHLIGHT = $0000110A;
  TwainCapabilities_ICAP_IMAGEFILEFORMAT = $0000110C;
  TwainCapabilities_ICAP_LAMPSTATE = $0000110D;
  TwainCapabilities_ICAP_LIGHTSOURCE = $0000110E;
  TwainCapabilities_ICAP_ORIENTATION = $00001110;
  TwainCapabilities_ICAP_PHYSICALWIDTH = $00001111;
  TwainCapabilities_ICAP_PHYSICALHEIGHT = $00001112;
  TwainCapabilities_ICAP_SHADOW = $00001113;
  TwainCapabilities_ICAP_FRAMES = $00001114;
  TwainCapabilities_ICAP_XNATIVERESOLUTION = $00001116;
  TwainCapabilities_ICAP_YNATIVERESOLUTION = $00001117;
  TwainCapabilities_ICAP_XRESOLUTION = $00001118;
  TwainCapabilities_ICAP_YRESOLUTION = $00001119;
  TwainCapabilities_ICAP_MAXFRAMES = $0000111A;
  TwainCapabilities_ICAP_TILES = $0000111B;
  TwainCapabilities_ICAP_BITORDER = $0000111C;
  TwainCapabilities_ICAP_CCITTKFACTOR = $0000111D;
  TwainCapabilities_ICAP_LIGHTPATH = $0000111E;
  TwainCapabilities_ICAP_PIXELFLAVOR = $0000111F;
  TwainCapabilities_ICAP_PLANARCHUNKY = $00001120;
  TwainCapabilities_ICAP_ROTATION = $00001121;
  TwainCapabilities_ICAP_SUPPORTEDSIZES = $00001122;
  TwainCapabilities_ICAP_THRESHOLD = $00001123;
  TwainCapabilities_ICAP_XSCALING = $00001124;
  TwainCapabilities_ICAP_YSCALING = $00001125;
  TwainCapabilities_ICAP_BITORDERCODES = $00001126;
  TwainCapabilities_ICAP_PIXELFLAVORCODES = $00001127;
  TwainCapabilities_ICAP_JPEGPIXELTYPE = $00001128;
  TwainCapabilities_ICAP_TIMEFILL = $0000112A;
  TwainCapabilities_ICAP_BITDEPTH = $0000112B;
  TwainCapabilities_ICAP_BITDEPTHREDUCTION = $0000112C;
  TwainCapabilities_ICAP_UNDEFINEDIMAGESIZE = $0000112D;
  TwainCapabilities_ICAP_IMAGEDATASET = $0000112E;
  TwainCapabilities_ICAP_EXTIMAGEINFO = $0000112F;
  TwainCapabilities_ICAP_MINIMUMHEIGHT = $00001130;
  TwainCapabilities_ICAP_MINIMUMWIDTH = $00001131;
  TwainCapabilities_ICAP_FLIPROTATION = $00001136;
  TwainCapabilities_ICAP_BARCODEDETECTIONENABLED = $00001137;
  TwainCapabilities_ICAP_SUPPORTEDBARCODETYPES = $00001138;
  TwainCapabilities_ICAP_BARCODEMAXSEARCHPRIORITIES = $00001139;
  TwainCapabilities_ICAP_BARCODESEARCHPRIORITIES = $0000113A;
  TwainCapabilities_ICAP_BARCODESEARCHMODE = $0000113B;
  TwainCapabilities_ICAP_BARCODEMAXRETRIES = $0000113C;
  TwainCapabilities_ICAP_BARCODETIMEOUT = $0000113D;
  TwainCapabilities_ICAP_ZOOMFACTOR = $0000113E;
  TwainCapabilities_ICAP_PATCHCODEDETECTIONENABLED = $0000113F;
  TwainCapabilities_ICAP_SUPPORTEDPATCHCODETYPES = $00001140;
  TwainCapabilities_ICAP_PATCHCODEMAXSEARCHPRIORITIES = $00001141;
  TwainCapabilities_ICAP_PATCHCODESEARCHPRIORITIES = $00001142;
  TwainCapabilities_ICAP_PATCHCODESEARCHMODE = $00001143;
  TwainCapabilities_ICAP_PATCHCODEMAXRETRIES = $00001144;
  TwainCapabilities_ICAP_PATCHCODETIMEOUT = $00001145;
  TwainCapabilities_ICAP_FLASHUSED2 = $00001146;
  TwainCapabilities_ICAP_IMAGEFILTER = $00001147;
  TwainCapabilities_ICAP_NOISEFILTER = $00001148;
  TwainCapabilities_ICAP_OVERSCAN = $00001149;
  TwainCapabilities_ICAP_AUTOMATICBORDERDETECTION = $00001150;
  TwainCapabilities_ICAP_AUTOMATICDESKEW = $00001151;
  TwainCapabilities_ICAP_AUTOMATICROTATE = $00001152;
  TwainCapabilities_ICAP_JPEGQUALITY = $00001153;
  TwainCapabilities_ACAP_AUDIOFILEFORMAT = $00001201;
  TwainCapabilities_ACAP_XFERMECH = $00001202;
  TwainCapabilities_ICAP_AUTODISCARDBLANKPAGES = $00001134;
  TwainCapabilities_ICAP_FEEDERTYPE = $00001154;
  TwainCapabilities_ICAP_ICCPROFILE = $00001155;
  TwainCapabilities_ICAP_AUTOSIZE = $00001156;
  TwainCapabilities_ICAP_AUTOMATICCROPUSESFRAME = $00001157;
  TwainCapabilities_ICAP_AUTOMATICLENGTHDETECTION = $00001158;
  TwainCapabilities_ICAP_AUTOMATICCOLORENABLED = $00001159;
  TwainCapabilities_ICAP_AUTOMATICCOLORNONCOLORPIXELTYPE = $0000115A;
  TwainCapabilities_ICAP_COLORMANAGEMENTENABLED = $0000115B;
  TwainCapabilities_ICAP_IMAGEMERGE = $0000115C;
  TwainCapabilities_ICAP_IMAGEMERGEHEIGHTTHRESHOLD = $0000115D;
  TwainCapabilities_ICAP_SUPPORTEDEXTIMAGEINFO = $0000115E;
  TwainCapabilities_ICAP_FILMTYPE = $0000115F;
  TwainCapabilities_ICAP_MIRROR = $00001160;
  TwainCapabilities_ICAP_JPEGSUBSAMPLING = $00001161;

// Constants for enum TwainPageSide
type
  TwainPageSide = TOleEnum;
const
  TwainPageSide_Unknown = $FFFFFFFF;
  TwainPageSide_Both = $00000000;
  TwainPageSide_Top = $00000001;
  TwainPageSide_Bottom = $00000002;

// Constants for enum TagType
type
  TagType = TOleEnum;
const
  TagType_TagTypeByte = $00000001;
  TagType_TagTypeASCII = $00000002;
  TagType_TagTypeShort = $00000003;
  TagType_TagTypeLong = $00000004;
  TagType_TagTypeRational = $00000005;
  TagType_TagTypeSByte = $00000006;
  TagType_TagTypeUndefined = $00000007;
  TagType_TagTypeSShort = $00000008;
  TagType_TagTypeSLong = $00000009;
  TagType_TagTypeSRational = $0000000A;
  TagType_TagTypeFloat = $0000000B;
  TagType_TagTypeDouble = $0000000C;
  TagType_TagTypeLong64 = $00000010;
  TagType_TagTypeSLong64 = $00000011;
  TagType_TagTypeIFD = $00000012;

// Constants for enum IPTCTags
type
  IPTCTags = TOleEnum;
const
  IPTCTags_IPTCTagUnknown = $FFFFFFFF;
  IPTCTags_IPTCTagRecordVersion = $00000200;
  IPTCTags_IPTCTagCaption = $00000278;
  IPTCTags_IPTCTagWriter = $0000027A;
  IPTCTags_IPTCTagHeadline = $00000269;
  IPTCTags_IPTCTagSpecialInstructions = $00000228;
  IPTCTags_IPTCTagByLine = $00000250;
  IPTCTags_IPTCTagByLineTitle = $00000255;
  IPTCTags_IPTCTagCredit = $0000026E;
  IPTCTags_IPTCTagSource = $00000273;
  IPTCTags_IPTCTagObjectName = $00000205;
  IPTCTags_IPTCTagDateCreated = $00000237;
  IPTCTags_IPTCTagCity = $0000025A;
  IPTCTags_IPTCTagProvinceOfState = $0000025F;
  IPTCTags_IPTCTagCountryOfPrimaryLocation = $00000265;
  IPTCTags_IPTCTagOriginalTransmissionReference = $00000267;
  IPTCTags_IPTCTagCategory = $0000020F;
  IPTCTags_IPTCTagSupplementalCategories = $00000214;
  IPTCTags_IPTCTagUrgency = $0000020A;
  IPTCTags_IPTCTagKeywords = $00000219;
  IPTCTags_IPTCTagCopyrightNotice = $00000274;
  IPTCTags_IPTCTagReleaseDate = $0000021E;
  IPTCTags_IPTCTagReleaseTime = $00000223;
  IPTCTags_IPTCTagTimeCreated = $0000023C;
  IPTCTags_IPTCTagOriginatingProgram = $00000241;

// Constants for enum Tags
type
  Tags = TOleEnum;
const
  Tags_TagUnknown = $FFFFFFFF;
  Tags_TagGpsVer = $00000000;
  Tags_TagGpsLatitudeRef = $00000001;
  Tags_TagGpsLatitude = $00000002;
  Tags_TagGpsLongitudeRef = $00000003;
  Tags_TagGpsLongitude = $00000004;
  Tags_TagGpsAltitudeRef = $00000005;
  Tags_TagGpsAltitude = $00000006;
  Tags_TagGpsGpsTime = $00000007;
  Tags_TagGpsGpsSatellites = $00000008;
  Tags_TagGpsGpsStatus = $00000009;
  Tags_TagGpsGpsMeasureMode = $0000000A;
  Tags_TagGpsGpsDop = $0000000B;
  Tags_TagGpsSpeedRef = $0000000C;
  Tags_TagGpsSpeed = $0000000D;
  Tags_TagGpsTrackRef = $0000000E;
  Tags_TagGpsTrack = $0000000F;
  Tags_TagGpsImgDirRef = $00000010;
  Tags_TagGpsImgDir = $00000011;
  Tags_TagGpsMapDatum = $00000012;
  Tags_TagGpsDestLatRef = $00000013;
  Tags_TagGpsDestLat = $00000014;
  Tags_TagGpsDestLongRef = $00000015;
  Tags_TagGpsDestLong = $00000016;
  Tags_TagGpsDestBearRef = $00000017;
  Tags_TagGpsDestBear = $00000018;
  Tags_TagGpsDestDistRef = $00000019;
  Tags_TagGpsDestDist = $0000001A;
  Tags_TagGpsProcessingMethod = $0000001B;
  Tags_TagGpsAreaInformation = $0000001C;
  Tags_TagGpsDateStamp = $0000001D;
  Tags_TagGpsDifferential = $0000001E;
  Tags_TagNewSubfileType = $000000FE;
  Tags_TagSubfileType = $000000FF;
  Tags_TagImageWidth = $00000100;
  Tags_TagImageHeight = $00000101;
  Tags_TagBitsPerSample = $00000102;
  Tags_TagCompression = $00000103;
  Tags_TagPhotometricInterp = $00000106;
  Tags_TagThreshHolding = $00000107;
  Tags_TagCellWidth = $00000108;
  Tags_TagCellHeight = $00000109;
  Tags_TagFillOrder = $0000010A;
  Tags_TagDocumentName = $0000010D;
  Tags_TagImageDescription = $0000010E;
  Tags_TagEquipMake = $0000010F;
  Tags_TagEquipModel = $00000110;
  Tags_TagStripOffsets = $00000111;
  Tags_TagOrientation = $00000112;
  Tags_TagSamplesPerPixel = $00000115;
  Tags_TagRowsPerStrip = $00000116;
  Tags_TagStripBytesCount = $00000117;
  Tags_TagMinSampleValue = $00000118;
  Tags_TagMaxSampleValue = $00000119;
  Tags_TagXResolution = $0000011A;
  Tags_TagYResolution = $0000011B;
  Tags_TagPlanarConfig = $0000011C;
  Tags_TagPageName = $0000011D;
  Tags_TagXPosition = $0000011E;
  Tags_TagYPosition = $0000011F;
  Tags_TagFreeOffsets = $00000120;
  Tags_TagFreeByteCounts = $00000121;
  Tags_TagGrayResponseUnit = $00000122;
  Tags_TagGrayResponseCurve = $00000123;
  Tags_TagT4Option = $00000124;
  Tags_TagT6Option = $00000125;
  Tags_TagResolutionUnit = $00000128;
  Tags_TagPageNumber = $00000129;
  Tags_TagTransferFunction = $0000012D;
  Tags_TagSoftwareUsed = $00000131;
  Tags_TagDateTime = $00000132;
  Tags_TagArtist = $0000013B;
  Tags_TagHostComputer = $0000013C;
  Tags_TagPredictor = $0000013D;
  Tags_TagWhitePoint = $0000013E;
  Tags_TagPrimaryChromaticities = $0000013F;
  Tags_TagColorMap = $00000140;
  Tags_TagHalftoneHints = $00000141;
  Tags_TagTileWidth = $00000142;
  Tags_TagTileLength = $00000143;
  Tags_TagTileOffset = $00000144;
  Tags_TagTileByteCounts = $00000145;
  Tags_TagBadFaxLines = $00000146;
  Tags_TagCleanFaxData = $00000147;
  Tags_TagConsecutiveBadFaxLines = $00000148;
  Tags_TagSubIFDs = $0000014A;
  Tags_TagInkSet = $0000014C;
  Tags_TagInkNames = $0000014D;
  Tags_TagNumberOfInks = $0000014E;
  Tags_TagDotRange = $00000150;
  Tags_TagTargetPrinter = $00000151;
  Tags_TagExtraSamples = $00000152;
  Tags_TagSampleFormat = $00000153;
  Tags_TagSMinSampleValue = $00000154;
  Tags_TagSMaxSampleValue = $00000155;
  Tags_TagTransferRange = $00000156;
  Tags_TagClipPath = $00000157;
  Tags_TagXClipPathUnits = $00000158;
  Tags_TagYClipPathUnits = $00000159;
  Tags_TagIndex = $0000015A;
  Tags_TagJPEGTables = $0000015B;
  Tags_TagOPIProxy = $0000015F;
  Tags_TagGlobalParametersIFD = $00000190;
  Tags_TagProfileType = $00000191;
  Tags_TagFaxProfile = $00000192;
  Tags_TagCodingMethods = $00000193;
  Tags_TagVersionYear = $00000194;
  Tags_TagModeNumber = $00000195;
  Tags_TagDecode = $000001B1;
  Tags_TagDefaultImageColor = $000001B2;
  Tags_TagJPEGProc = $00000200;
  Tags_TagJPEGInterFormat = $00000201;
  Tags_TagJPEGInterLength = $00000202;
  Tags_TagJPEGRestartInterval = $00000203;
  Tags_TagJPEGLosslessPredictors = $00000205;
  Tags_TagJPEGPointTransforms = $00000206;
  Tags_TagJPEGQTables = $00000207;
  Tags_TagJPEGDCTables = $00000208;
  Tags_TagJPEGACTables = $00000209;
  Tags_TagYCbCrCoefficients = $00000211;
  Tags_TagYCbCrSubsampling = $00000212;
  Tags_TagYCbCrPositioning = $00000213;
  Tags_TagREFBlackWhite = $00000214;
  Tags_TagStripRowCounts = $0000022F;
  Tags_TagXMLPacket = $000002BC;
  Tags_TagRating = $00004746;
  Tags_TagRatingPercent = $00004749;
  Tags_TagFrameDelay = $00005100;
  Tags_TagLoopCount = $00005101;
  Tags_TagImageID = $0000800D;
  Tags_TagWangAnnotations = $000080A4;
  Tags_TagExifImageCFARepeatPatternDim = $0000828D;
  Tags_TagExifImageCFAPattern = $0000828E;
  Tags_TagExifBatteryLevel = $0000828F;
  Tags_TagCopyright = $00008298;
  Tags_TagExifExposureTime = $0000829A;
  Tags_TagExifFNumber = $0000829D;
  Tags_TagGeoPixelScale = $0000830E;
  Tags_TagIntergraphTransformationMatrix = $00008480;
  Tags_TagIPTC = $000083BB;
  Tags_TagGeoTiePoints = $00008482;
  Tags_TagJPLCartoIFDoffset = $000085D7;
  Tags_TagGeoTransformationMatrix = $000085D8;
  Tags_TagPhotoshop = $00008649;
  Tags_TagExifIFD = $00008769;
  Tags_TagImageLayer = $000087AC;
  Tags_TagGeoKeyDirectory = $000087AF;
  Tags_TagGeoDoubleParams = $000087B0;
  Tags_TagGeoASCIIParams = $000087B1;
  Tags_TagExifExposureProg = $00008822;
  Tags_TagExifSpectralSense = $00008824;
  Tags_TagGpsIFD = $00008825;
  Tags_TagExifISOSpeed = $00008827;
  Tags_TagExifOECF = $00008828;
  Tags_TagExifInterlace = $00008829;
  Tags_TagExifTimeZoneOffset = $0000882A;
  Tags_TagExifSelfTimerMode = $0000882B;
  Tags_TagExifSensitivityType = $00008830;
  Tags_TagExifStandardOutputSensitivity = $00008831;
  Tags_TagExifRecommendedExposureIndex = $00008832;
  Tags_TagExifPhotoISOSpeed = $00008833;
  Tags_TagExifPhotoISOSpeedLatitudeyyy = $00008834;
  Tags_TagExifPhotoISOSpeedLatitudezzz = $00008835;
  Tags_TagExifVer = $00009000;
  Tags_TagExifDTOrig = $00009003;
  Tags_TagExifDTDigitized = $00009004;
  Tags_TagExifCompConfig = $00009101;
  Tags_TagExifCompBPP = $00009102;
  Tags_TagExifShutterSpeed = $00009201;
  Tags_TagExifAperture = $00009202;
  Tags_TagExifBrightness = $00009203;
  Tags_TagExifExposureBias = $00009204;
  Tags_TagExifMaxAperture = $00009205;
  Tags_TagExifSubjectDist = $00009206;
  Tags_TagExifMeteringMode = $00009207;
  Tags_TagExifLightSource = $00009208;
  Tags_TagExifFlash = $00009209;
  Tags_TagExifFocalLength = $0000920A;
  Tags_TagExifImageFlashEnergy = $0000920B;
  Tags_TagExifSpatialFrequencyResponse = $0000920C;
  Tags_TagExifNoise = $0000920D;
  Tags_TagExifFocalPlaneXResolution = $0000920E;
  Tags_TagExifFocalPlaneYResolution = $0000920F;
  Tags_TagExifFocalPlaneResolutionUnit = $00009210;
  Tags_TagExifImageNumber = $00009211;
  Tags_TagExifSecurityClassification = $00009212;
  Tags_TagExifImageHistory = $00009213;
  Tags_TagExifSubjectLocation = $00009214;
  Tags_TagExifImageExposureIndex = $00009215;
  Tags_TagExifTIFFEPStandardID = $00009216;
  Tags_TagExifImageSensingMethod = $00009217;
  Tags_TagExifMakerNote = $0000927C;
  Tags_TagExifUserComment = $00009286;
  Tags_TagExifDTSubsec = $00009290;
  Tags_TagExifDTOrigSS = $00009291;
  Tags_TagExifDTDigSS = $00009292;
  Tags_TagImageSourceData = $0000935D;
  Tags_TagXPTitle = $00009C9B;
  Tags_TagXPComment = $00009C9C;
  Tags_TagXPAuthor = $00009C9D;
  Tags_TagXPKeywords = $00009C9E;
  Tags_TagXPSubject = $00009C9F;
  Tags_TagExifFPXVer = $0000A000;
  Tags_TagExifColorSpace = $0000A001;
  Tags_TagExifPixXDim = $0000A002;
  Tags_TagExifPixYDim = $0000A003;
  Tags_TagExifRelatedWav = $0000A004;
  Tags_TagExifInterop = $0000A005;
  Tags_TagExifFlashEnergy = $0000A20B;
  Tags_TagExifSpatialFR = $0000A20C;
  Tags_TagExifFocalXRes = $0000A20E;
  Tags_TagExifFocalYRes = $0000A20F;
  Tags_TagExifFocalResUnit = $0000A210;
  Tags_TagExifSubjectLoc = $0000A214;
  Tags_TagExifExposureIndex = $0000A215;
  Tags_TagExifSensingMethod = $0000A217;
  Tags_TagExifFileSource = $0000A300;
  Tags_TagExifSceneType = $0000A301;
  Tags_TagExifCfaPattern = $0000A302;
  Tags_TagExifCustomRendered = $0000A401;
  Tags_TagExifExposureMode = $0000A402;
  Tags_TagExifWhiteBalance = $0000A403;
  Tags_TagExifDigitalZoomRatio = $0000A404;
  Tags_TagExifFocalLengthIn35mmFilm = $0000A405;
  Tags_TagExifSceneCaptureType = $0000A406;
  Tags_TagExifGainControl = $0000A407;
  Tags_TagExifContrast = $0000A408;
  Tags_TagExifSaturation = $0000A409;
  Tags_TagExifSharpness = $0000A40A;
  Tags_TagExifDeviceSettingDescription = $0000A40B;
  Tags_TagExifSubjectDistanceRange = $0000A40C;
  Tags_TagExifImageUniqueID = $0000A420;
  Tags_TagExifCameraOwnerName = $0000A430;
  Tags_TagExifBodySerialNumber = $0000A431;
  Tags_TagExifLensSpecification = $0000A432;
  Tags_TagExifLensMake = $0000A433;
  Tags_TagExifLensModel = $0000A434;
  Tags_TagExifLensSerialNumber = $0000A435;
  Tags_TagGDALMetaData = $0000A480;
  Tags_TagGamma = $0000A500;
  Tags_TagFilmProductCode = $0000C350;
  Tags_TagImageSourceEK = $0000C351;
  Tags_TagCaptureConditionsPAR = $0000C352;
  Tags_TagCameraOwner = $0000C353;
  Tags_TagSerialNumber = $0000C354;
  Tags_TagUserSelectGroupTitle = $0000C355;
  Tags_TagDealerIDNumber = $0000C356;
  Tags_CaptureDeviceFID = $0000C357;
  Tags_TagPrintIMData = $0000C4A5;
  Tags_TagExifDNGVersion = $0000C612;
  Tags_TagExifDNGBackwardVersion = $0000C613;
  Tags_TagExifUniqueCameraModel = $0000C614;
  Tags_TagExifLocalizedCameraModel = $0000C615;
  Tags_TagExifCFAPlaneColor = $0000C616;
  Tags_TagExifCFALayout = $0000C617;
  Tags_TagExifLinearizationTable = $0000C618;
  Tags_TagExifBlackLevelRepeatDim = $0000C619;
  Tags_TagExifBlackLevel = $0000C61A;
  Tags_TagExifBlackLevelDeltaH = $0000C61B;
  Tags_TagExifBlackLevelDeltaV = $0000C61C;
  Tags_TagExifWhiteLevel = $0000C61D;
  Tags_TagExifDefaultScale = $0000C61E;
  Tags_TagExifDefaultCropOrigin = $0000C61F;
  Tags_TagExifDefaultCropSize = $0000C620;
  Tags_TagExifColorMatrix1 = $0000C621;
  Tags_TagExifColorMatrix2 = $0000C622;
  Tags_TagExifCameraCalibration1 = $0000C623;
  Tags_TagExifCameraCalibration2 = $0000C624;
  Tags_TagExifReductionMatrix1 = $0000C625;
  Tags_TagExifReductionMatrix2 = $0000C626;
  Tags_TagExifAnalogBalance = $0000C627;
  Tags_TagExifAsShotNeutral = $0000C628;
  Tags_TagExifAsShotWhiteXY = $0000C629;
  Tags_TagExifBaselineExposure = $0000C62A;
  Tags_TagExifBaselineNoise = $0000C62B;
  Tags_TagExifBaselineSharpness = $0000C62C;
  Tags_TagExifBayerGreenSplit = $0000C62D;
  Tags_TagExifLinearResponseLimit = $0000C62E;
  Tags_TagExifCameraSerialNumber = $0000C62F;
  Tags_TagExifLensInfo = $0000C630;
  Tags_TagExifChromaBlurRadius = $0000C631;
  Tags_TagExifAntiAliasStrength = $0000C632;
  Tags_TagExifShadowScale = $0000C633;
  Tags_TagExifDNGPrivateData = $0000C634;
  Tags_TagExifMakerNoteSafety = $0000C635;
  Tags_TagExifCalibrationIlluminant1 = $0000C65A;
  Tags_TagExifCalibrationIlluminant2 = $0000C65B;
  Tags_TagExifBestQualityScale = $0000C65C;
  Tags_TagExifRawDataUniqueID = $0000C65D;
  Tags_TagExifOriginalRawFileName = $0000C68B;
  Tags_TagExifOriginalRawFileData = $0000C68C;
  Tags_TagExifActiveArea = $0000C68D;
  Tags_TagExifMaskedAreas = $0000C68E;
  Tags_TagExifAsShotICCProfile = $0000C68F;
  Tags_TagExifAsShotPreProfileMatrix = $0000C690;
  Tags_TagExifCurrentICCProfile = $0000C691;
  Tags_TagExifCurrentPreProfileMatrix = $0000C692;
  Tags_TagExifColorimetricReference = $0000C6BF;
  Tags_TagExifCameraCalibrationSignature = $0000C6F3;
  Tags_TagExifProfileCalibrationSignature = $0000C6F4;
  Tags_TagExifAsShotProfileName = $0000C6F6;
  Tags_TagExifNoiseReductionApplied = $0000C6F7;
  Tags_TagExifProfileName = $0000C6F8;
  Tags_TagExifProfileHueSatMapDims = $0000C6F9;
  Tags_TagExifProfileHueSatMapData1 = $0000C6FA;
  Tags_TagExifProfileHueSatMapData2 = $0000C6FB;
  Tags_TagExifProfileToneCurve = $0000C6FC;
  Tags_TagExifProfileEmbedPolicy = $0000C6FD;
  Tags_TagExifProfileCopyright = $0000C6FE;
  Tags_TagExifForwardMatrix1 = $0000C714;
  Tags_TagExifForwardMatrix2 = $0000C715;
  Tags_TagExifPreviewApplicationName = $0000C716;
  Tags_TagExifPreviewApplicationVersion = $0000C717;
  Tags_TagExifPreviewSettingsName = $0000C718;
  Tags_TagExifPreviewSettingsDigest = $0000C719;
  Tags_TagExifPreviewColorSpace = $0000C71A;
  Tags_TagExifPreviewDateTime = $0000C71B;
  Tags_TagExifRawImageDigest = $0000C71C;
  Tags_TagExifOriginalRawFileDigest = $0000C71D;
  Tags_TagExifSubTileBlockSize = $0000C71E;
  Tags_TagExifRowInterleaveFactor = $0000C71F;
  Tags_TagExifProfileLookTableDims = $0000C725;
  Tags_TagExifProfileLookTableData = $0000C726;
  Tags_TagExifOpcodeList1 = $0000C740;
  Tags_TagExifOpcodeList2 = $0000C741;
  Tags_TagExifOpcodeList3 = $0000C74E;
  Tags_TagExifNoiseProfile = $0000C761;
  Tags_TagJPEGTablesMode = $00010003;

// Constants for enum PrintQuality
type
  PrintQuality = TOleEnum;
const
  PrintQuality_PrintQualityCustom = $00000000;
  PrintQuality_PrintQualityDraft = $FFFFFFFF;
  PrintQuality_PrintQualityLowResolution = $FFFFFFFE;
  PrintQuality_PrintQualityMediumResolution = $FFFFFFFD;
  PrintQuality_PrintQualityHighResolution = $FFFFFFFC;

// Constants for enum PaletteType
type
  PaletteType = TOleEnum;
const
  PaletteType_PaletteTypeUndefined = $00000000;
  PaletteType_PaletteTypeHasAlpha = $00000001;
  PaletteType_PaletteTypeGrayScale = $00000002;
  PaletteType_PaletteTypeGrayScaleAlpha = $00000003;
  PaletteType_PaletteTypeHalfTone = $00000004;
  PaletteType_PaletteTypeHalfToneAlpha = $00000005;

// Constants for enum ImageColorSpace
type
  ImageColorSpace = TOleEnum;
const
  ImageColorSpace_ImageColorSpaceUnknown = $00000000;
  ImageColorSpace_ImageColorSpaceRGB = $00000001;
  ImageColorSpace_ImageColorSpaceCMYK = $00000002;
  ImageColorSpace_ImageColorSpaceGRAY = $00000003;

// Constants for enum Operators
type
  Operators = TOleEnum;
const
  Operators_OperatorAnd = $00000000;
  Operators_OperatorOr = $00000001;
  Operators_OperatorXor = $00000002;
  Operators_OperatorMin = $00000003;
  Operators_OperatorMax = $00000004;
  Operators_OperatorAbs = $00000005;
  Operators_OperatorMultiply = $00000006;
  Operators_OperatorDivide = $00000007;
  Operators_OperatorPlus = $00000008;
  Operators_OperatorLess = $00000009;

// Constants for enum ThumbnailAlignment
type
  ThumbnailAlignment = TOleEnum;
const
  ThumbnailAlignment_ThumbnailAlignmentHorizontal = $00000001;
  ThumbnailAlignment_ThumbnailAlignmentVertical = $00000002;

// Constants for enum TextAlignment
type
  TextAlignment = TOleEnum;
const
  TextAlignment_TextAlignmentNear = $00000000;
  TextAlignment_TextAlignmentCenter = $00000001;
  TextAlignment_TextAlignmentFar = $00000002;

// Constants for enum PrintAlignment
type
  PrintAlignment = TOleEnum;
const
  PrintAlignment_PrintAlignmentMiddleLeft = $00000000;
  PrintAlignment_PrintAlignmentMiddleRight = $00000001;
  PrintAlignment_PrintAlignmentMiddleCenter = $00000002;
  PrintAlignment_PrintAlignmentDefault = $00000003;
  PrintAlignment_PrintAlignmentTopLeft = $00000004;
  PrintAlignment_PrintAlignmentTopRight = $00000005;
  PrintAlignment_PrintAlignmentTopCenter = $00000006;
  PrintAlignment_PrintAlignmentBottomLeft = $00000007;
  PrintAlignment_PrintAlignmentBottomRight = $00000008;
  PrintAlignment_PrintAlignmentBottomCenter = $00000009;

// Constants for enum BitonalReduction
type
  BitonalReduction = TOleEnum;
const
  BitonalReduction_NearestColor = $00000001;
  BitonalReduction_OrderedDither = $00000002;
  BitonalReduction_Burke = $00000003;
  BitonalReduction_Stucki = $00000004;
  BitonalReduction_FloydSteinberg = $00000005;

// Constants for enum DocumentType
type
  DocumentType = TOleEnum;
const
  DocumentType_DocumentTypeUnknown = $00000000;
  DocumentType_DocumentTypeBitmap = $00000001;
  DocumentType_DocumentTypeMetaFile = $00000002;
  DocumentType_DocumentTypePDF = $00000003;
  DocumentType_DocumentTypeSVG = $00000004;
  DocumentType_DocumentTypeTXT = $00000005;
  DocumentType_DocumentTypeOpenXMLWord = $00000006;
  DocumentType_DocumentTypeRTF = $00000007;
  DocumentType_DocumentTypeDXF = $00000008;
  DocumentType_DocumentTypeOpenDocumentText = $00000009;
  DocumentType_DocumentTypeOpenXMLSpreadsheet = $0000000A;
  DocumentType_DocumentTypeOpenXMLPresentation = $0000000B;
  DocumentType_DocumentTypeWordBinary = $0000000C;
  DocumentType_DocumentTypeExcelBinary = $0000000D;
  DocumentType_DocumentTypePowerPointBinary = $0000000E;
  DocumentType_DocumentTypeHTML = $0000000F;
  DocumentType_DocumentTypeMSG = $00000010;
  DocumentType_DocumentTypeEML = $00000011;
  DocumentType_DocumentTypePostScript = $00000012;

// Constants for enum MouseButton
type
  MouseButton = TOleEnum;
const
  MouseButton_MouseButtonNone = $00000000;
  MouseButton_MouseButtonLeft = $00000001;
  MouseButton_MouseButtonRight = $00000002;
  MouseButton_MouseButtonMiddle = $00000004;
  MouseButton_MouseButtonXButton1 = $00000008;
  MouseButton_MouseButtonXButton2 = $00000010;

// Constants for enum ViewerZoomMode
type
  ViewerZoomMode = TOleEnum;
const
  ViewerZoomMode_ZoomMode100 = $00000001;
  ViewerZoomMode_ZoomModeFitToViewer = $00000002;
  ViewerZoomMode_ZoomModeWidthViewer = $00000003;
  ViewerZoomMode_ZoomModeCustom = $00000004;
  ViewerZoomMode_ZoomModeHeightViewer = $00000005;
  ViewerZoomMode_ZoomModeToViewer = $00000006;
  ViewerZoomMode_ZoomModeShrinkToViewerWidth = $00000007;

// Constants for enum PageDisplayMode
type
  PageDisplayMode = TOleEnum;
const
  PageDisplayMode_SinglePageView = $00000000;
  PageDisplayMode_MultiplePagesView = $00000001;

// Constants for enum ViewerMouseMode
type
  ViewerMouseMode = TOleEnum;
const
  ViewerMouseMode_MouseModeDefault = $00000000;
  ViewerMouseMode_MouseModeAreaSelection = $00000001;
  ViewerMouseMode_MouseModePan = $00000002;
  ViewerMouseMode_MouseModeAreaZooming = $00000003;
  ViewerMouseMode_MouseModeMagnifier = $00000004;

// Constants for enum ViewerDocumentPosition
type
  ViewerDocumentPosition = TOleEnum;
const
  ViewerDocumentPosition_DocumentPositionMiddleLeft = $00000000;
  ViewerDocumentPosition_DocumentPositionMiddleRight = $00000001;
  ViewerDocumentPosition_DocumentPositionMiddleCenter = $00000002;
  ViewerDocumentPosition_DocumentPositionTopLeft = $00000004;
  ViewerDocumentPosition_DocumentPositionTopRight = $00000005;
  ViewerDocumentPosition_DocumentPositionTopCenter = $00000006;
  ViewerDocumentPosition_DocumentPositionBottomLeft = $00000007;
  ViewerDocumentPosition_DocumentPositionBottomRight = $00000008;
  ViewerDocumentPosition_DocumentPositionBottomCenter = $00000009;

// Constants for enum ViewerDocumentAlignment
type
  ViewerDocumentAlignment = TOleEnum;
const
  ViewerDocumentAlignment_DocumentAlignmentMiddleLeft = $00000000;
  ViewerDocumentAlignment_DocumentAlignmentMiddleRight = $00000001;
  ViewerDocumentAlignment_DocumentAlignmentMiddleCenter = $00000002;
  ViewerDocumentAlignment_DocumentAlignmentTopLeft = $00000004;
  ViewerDocumentAlignment_DocumentAlignmentTopRight = $00000005;
  ViewerDocumentAlignment_DocumentAlignmentTopCenter = $00000006;
  ViewerDocumentAlignment_DocumentAlignmentBottomLeft = $00000007;
  ViewerDocumentAlignment_DocumentAlignmentBottomRight = $00000008;
  ViewerDocumentAlignment_DocumentAlignmentBottomCenter = $00000009;

// Constants for enum DisplayQuality
type
  DisplayQuality = TOleEnum;
const
  DisplayQuality_DisplayQualityLow = $00000000;
  DisplayQuality_DisplayQualityBilinear = $00000001;
  DisplayQuality_DisplayQualityBicubic = $00000002;
  DisplayQuality_DisplayQualityBilinearHQ = $00000003;
  DisplayQuality_DisplayQualityBicubicHQ = $00000004;
  DisplayQuality_DisplayQualityAutomatic = $00000040;

// Constants for enum PrintSizeOption
type
  PrintSizeOption = TOleEnum;
const
  PrintSizeOption_PrintSizeOptionActual = $00000000;
  PrintSizeOption_PrintSizeOptionFit = $00000001;
  PrintSizeOption_PrintSizeOptionShrinkOversized = $00000002;

// Constants for enum ViewerMouseWheelMode
type
  ViewerMouseWheelMode = TOleEnum;
const
  ViewerMouseWheelMode_MouseWheelModeDisabled = $FFFFFFFF;
  ViewerMouseWheelMode_MouseWheelModeZoom = $00000000;
  ViewerMouseWheelMode_MouseWheelModeVerticalScroll = $00000001;
  ViewerMouseWheelMode_MouseWheelModePageChange = $00000002;

// Constants for enum PrinterColorMode
type
  PrinterColorMode = TOleEnum;
const
  PrinterColorMode_PrinterColorModeUnknown = $00000000;
  PrinterColorMode_PrinterColorModeGray = $00000001;
  PrinterColorMode_PrinterColorModeColor = $00000002;

// Constants for enum PrinterOrientation
type
  PrinterOrientation = TOleEnum;
const
  PrinterOrientation_PrinterOrientationPortrait = $00000001;
  PrinterOrientation_PrinterOrientationLandscape = $00000002;

// Constants for enum DocumentFormat
type
  DocumentFormat = TOleEnum;
const
  DocumentFormat_DocumentFormatUNKNOWN = $00000000;
  DocumentFormat_DocumentFormatICO = $00000001;
  DocumentFormat_DocumentFormatBMP = $00000002;
  DocumentFormat_DocumentFormatWBMP = $00000003;
  DocumentFormat_DocumentFormatJPEG = $00000004;
  DocumentFormat_DocumentFormatGIF = $00000005;
  DocumentFormat_DocumentFormatPNG = $00000006;
  DocumentFormat_DocumentFormatTIFF = $00000007;
  DocumentFormat_DocumentFormatFAXG3 = $00000008;
  DocumentFormat_DocumentFormatEXIF = $00000009;
  DocumentFormat_DocumentFormatEMF = $0000000A;
  DocumentFormat_DocumentFormatWMF = $0000000B;
  DocumentFormat_DocumentFormatJNG = $0000000C;
  DocumentFormat_DocumentFormatKOALA = $0000000D;
  DocumentFormat_DocumentFormatIFF = $0000000E;
  DocumentFormat_DocumentFormatMNG = $0000000F;
  DocumentFormat_DocumentFormatPCD = $00000010;
  DocumentFormat_DocumentFormatPCX = $00000011;
  DocumentFormat_DocumentFormatPBM = $00000012;
  DocumentFormat_DocumentFormatPBMRAW = $00000013;
  DocumentFormat_DocumentFormatPFM = $00000014;
  DocumentFormat_DocumentFormatPGM = $00000015;
  DocumentFormat_DocumentFormatPGMRAW = $00000016;
  DocumentFormat_DocumentFormatPPM = $00000017;
  DocumentFormat_DocumentFormatPPMRAW = $00000018;
  DocumentFormat_DocumentFormatRAS = $00000019;
  DocumentFormat_DocumentFormatTARGA = $0000001A;
  DocumentFormat_DocumentFormatPSD = $0000001B;
  DocumentFormat_DocumentFormatCUT = $0000001C;
  DocumentFormat_DocumentFormatXBM = $0000001D;
  DocumentFormat_DocumentFormatXPM = $0000001E;
  DocumentFormat_DocumentFormatDDS = $0000001F;
  DocumentFormat_DocumentFormatHDR = $00000020;
  DocumentFormat_DocumentFormatSGI = $00000021;
  DocumentFormat_DocumentFormatEXR = $00000022;
  DocumentFormat_DocumentFormatJ2K = $00000023;
  DocumentFormat_DocumentFormatJP2 = $00000024;
  DocumentFormat_DocumentFormatJBIG = $00000025;
  DocumentFormat_DocumentFormatPICT = $00000026;
  DocumentFormat_DocumentFormatRAW = $00000027;
  DocumentFormat_DocumentFormatWEBP = $00000028;
  DocumentFormat_DocumentFormatDICOM = $00000029;
  DocumentFormat_DocumentFormatWSQ = $0000002A;
  DocumentFormat_DocumentFormatHEIF = $0000002B;
  DocumentFormat_DocumentFormatJBIG2 = $00000064;
  DocumentFormat_DocumentFormatMemoryBMP = $000001F4;
  DocumentFormat_DocumentFormatPDF = $000003E8;
  DocumentFormat_DocumentFormatSVG = $000003E9;
  DocumentFormat_DocumentFormatTXT = $000003EA;
  DocumentFormat_DocumentFormatDOCX = $000003EB;
  DocumentFormat_DocumentFormatRTF = $000003EC;
  DocumentFormat_DocumentFormatDXF = $000003ED;
  DocumentFormat_DocumentFormatODT = $000003EE;
  DocumentFormat_DocumentFormatXLSX = $000003EF;
  DocumentFormat_DocumentFormatPPTX = $000003F0;
  DocumentFormat_DocumentFormatDOC = $000003F1;
  DocumentFormat_DocumentFormatXLS = $000003F2;
  DocumentFormat_DocumentFormatPPT = $000003F3;
  DocumentFormat_DocumentFormatHTML = $000003F4;
  DocumentFormat_DocumentFormatMSG = $000003F5;
  DocumentFormat_DocumentFormatEML = $000003F6;
  DocumentFormat_DocumentFormatPostScript = $000003F7;

// Constants for enum ReferencePoint
type
  ReferencePoint = TOleEnum;
const
  ReferencePoint_ReferencePointTopLeft = $00000000;
  ReferencePoint_ReferencePointTopRight = $00000001;
  ReferencePoint_ReferencePointBottomLeft = $00000002;
  ReferencePoint_ReferencePointBottomRight = $00000003;

// Constants for enum ForegroundMixMode
type
  ForegroundMixMode = TOleEnum;
const
  ForegroundMixMode_ForegroundMixModeUNDEFINED = $FFFFFFFF;
  ForegroundMixMode_ForegroundMixModeBLACK = $00000001;
  ForegroundMixMode_ForegroundMixModeNOTMERGEPEN = $00000002;
  ForegroundMixMode_ForegroundMixModeMASKNOTPEN = $00000003;
  ForegroundMixMode_ForegroundMixModeNOTCOPYPEN = $00000004;
  ForegroundMixMode_ForegroundMixModeMASKPENNOT = $00000005;
  ForegroundMixMode_ForegroundMixModeNOT = $00000006;
  ForegroundMixMode_ForegroundMixModeXORPEN = $00000007;
  ForegroundMixMode_ForegroundMixModeNOTMASKPEN = $00000008;
  ForegroundMixMode_ForegroundMixModeMASKPEN = $00000009;
  ForegroundMixMode_ForegroundMixModeNOTXORPEN = $0000000A;
  ForegroundMixMode_ForegroundMixModeNOP = $0000000B;
  ForegroundMixMode_ForegroundMixModeMERGENOTPEN = $0000000C;
  ForegroundMixMode_ForegroundMixModeCOPYPEN = $0000000D;
  ForegroundMixMode_ForegroundMixModeMERGEPENNOT = $0000000E;
  ForegroundMixMode_ForegroundMixModeMERGEPEN = $0000000F;
  ForegroundMixMode_ForegroundMixModeWHITE = $00000010;

// Constants for enum PatchCodeType
type
  PatchCodeType = TOleEnum;
const
  PatchCodeType_PatchCodeTypeUnknown = $FFFFFFFF;
  PatchCodeType_PatchCodeType1 = $00000001;
  PatchCodeType_PatchCodeType2 = $00000002;
  PatchCodeType_PatchCodeType3 = $00000004;
  PatchCodeType_PatchCodeType4 = $00000008;
  PatchCodeType_PatchCodeType5 = $00000010;
  PatchCodeType_PatchCodeType6 = $00000020;

// Constants for enum BarcodeAlign
type
  BarcodeAlign = TOleEnum;
const
  BarcodeAlign_BarcodeAlignLeft = $00000000;
  BarcodeAlign_BarcodeAlignCenter = $00000001;
  BarcodeAlign_BarcodeAlignRight = $00000002;

// Constants for enum Barcode1DWriterType
type
  Barcode1DWriterType = TOleEnum;
const
  Barcode1DWriterType_Barcode1DWriterUPCVersionA = $00000000;
  Barcode1DWriterType_Barcode1DWriterUPCVersionE = $00000001;
  Barcode1DWriterType_Barcode1DWriterUPCSupplemental2Digit = $00000002;
  Barcode1DWriterType_Barcode1DWriterUPCSupplemental5Digit = $00000003;
  Barcode1DWriterType_Barcode1DWriterEAN13 = $00000004;
  Barcode1DWriterType_Barcode1DWriterEAN8 = $00000005;
  Barcode1DWriterType_Barcode1DWriterInterleaved2of5 = $00000006;
  Barcode1DWriterType_Barcode1DWriterStandard2of5 = $00000007;
  Barcode1DWriterType_Barcode1DWriterIndustrial2of5 = $00000008;
  Barcode1DWriterType_Barcode1DWriterCode39 = $00000009;
  Barcode1DWriterType_Barcode1DWriterCode39Extended = $0000000A;
  Barcode1DWriterType_Barcode1DWriterCodabar = $0000000B;
  Barcode1DWriterType_Barcode1DWriterPostNet = $0000000C;
  Barcode1DWriterType_Barcode1DWriterBookland = $0000000D;
  Barcode1DWriterType_Barcode1DWriterISBN = $0000000E;
  Barcode1DWriterType_Barcode1DWriterJAN13 = $0000000F;
  Barcode1DWriterType_Barcode1DWriterMSIMod10 = $00000010;
  Barcode1DWriterType_Barcode1DWriterMSI2Mod10 = $00000011;
  Barcode1DWriterType_Barcode1DWriterMSIMod11 = $00000012;
  Barcode1DWriterType_Barcode1DWriterMSIMod11Mod10 = $00000013;
  Barcode1DWriterType_Barcode1DWriterModifiedPlessey = $00000014;
  Barcode1DWriterType_Barcode1DWriterCode11 = $00000015;
  Barcode1DWriterType_Barcode1DWriterUSD8 = $00000016;
  Barcode1DWriterType_Barcode1DWriterUCC12 = $00000017;
  Barcode1DWriterType_Barcode1DWriterUCC13 = $00000018;
  Barcode1DWriterType_Barcode1DWriterLOGMARS = $00000019;
  Barcode1DWriterType_Barcode1DWriterCode128 = $0000001A;
  Barcode1DWriterType_Barcode1DWriterCode128A = $0000001B;
  Barcode1DWriterType_Barcode1DWriterCode128B = $0000001C;
  Barcode1DWriterType_Barcode1DWriterCode128C = $0000001D;
  Barcode1DWriterType_Barcode1DWriterITF14 = $0000001E;
  Barcode1DWriterType_Barcode1DWriterCode93 = $0000001F;
  Barcode1DWriterType_Barcode1DWriterTelePen = $00000020;

// Constants for enum Barcode1DReaderType
type
  Barcode1DReaderType = TOleEnum;
const
  Barcode1DReaderType_Barcode1DReaderNone = $00000000;
  Barcode1DReaderType_Barcode1DReaderIndustrial2of5 = $00000001;
  Barcode1DReaderType_Barcode1DReaderInverted2of5 = $00000002;
  Barcode1DReaderType_Barcode1DReaderInterleaved2of5 = $00000004;
  Barcode1DReaderType_Barcode1DReaderIata2of5 = $00000008;
  Barcode1DReaderType_Barcode1DReaderMatrix2of5 = $00000010;
  Barcode1DReaderType_Barcode1DReaderCode39 = $00000020;
  Barcode1DReaderType_Barcode1DReaderCodeabar = $00000040;
  Barcode1DReaderType_Barcode1DReaderBcdMatrix = $00000080;
  Barcode1DReaderType_Barcode1DReaderDataLogic2of5 = $00000100;
  Barcode1DReaderType_Barcode1DReaderCode128 = $00001000;
  Barcode1DReaderType_Barcode1DReaderCODE93 = $00004000;
  Barcode1DReaderType_Barcode1DReaderEAN13 = $00008000;
  Barcode1DReaderType_Barcode1DReaderUPCA = $00010000;
  Barcode1DReaderType_Barcode1DReaderEAN8 = $00020000;
  Barcode1DReaderType_Barcode1DReaderUPCE = $00040000;
  Barcode1DReaderType_Barcode1DReaderADD5 = $00080000;
  Barcode1DReaderType_Barcode1DReaderADD2 = $00100000;

// Constants for enum Barcode1DReaderScanMode
type
  Barcode1DReaderScanMode = TOleEnum;
const
  Barcode1DReaderScanMode_BestSpeed = $00000000;
  Barcode1DReaderScanMode_BestQuality = $00000001;

// Constants for enum BarcodeQRReaderScanMode
type
  BarcodeQRReaderScanMode = TOleEnum;
const
  BarcodeQRReaderScanMode_BestSpeed = $00000000;
  BarcodeQRReaderScanMode_BestQuality = $00000001;

// Constants for enum BarcodeQRErrorCorrectionLevel
type
  BarcodeQRErrorCorrectionLevel = TOleEnum;
const
  BarcodeQRErrorCorrectionLevel_BarcodeQRErrorCorrectionLevelL = $00000000;
  BarcodeQRErrorCorrectionLevel_BarcodeQRErrorCorrectionLevelM = $00000001;
  BarcodeQRErrorCorrectionLevel_BarcodeQRErrorCorrectionLevelQ = $00000002;
  BarcodeQRErrorCorrectionLevel_BarcodeQRErrorCorrectionLevelH = $00000003;

// Constants for enum BarcodeMicroQRErrorCorrectionLevel
type
  BarcodeMicroQRErrorCorrectionLevel = TOleEnum;
const
  BarcodeMicroQRErrorCorrectionLevel_BarcodeMicroQRErrorCorrectionLevelL = $00000000;
  BarcodeMicroQRErrorCorrectionLevel_BarcodeMicroQRErrorCorrectionLevelM = $00000001;
  BarcodeMicroQRErrorCorrectionLevel_BarcodeMicroQRErrorCorrectionLevelQ = $00000002;

// Constants for enum BarcodeQREncodingMode
type
  BarcodeQREncodingMode = TOleEnum;
const
  BarcodeQREncodingMode_BarcodeQREncodingModeUndefined = $FFFFFFFF;
  BarcodeQREncodingMode_BarcodeQREncodingModeNumeric = $00000000;
  BarcodeQREncodingMode_BarcodeQREncodingModeAlphaNumeric = $00000001;
  BarcodeQREncodingMode_BarcodeQREncodingModeByte = $00000002;
  BarcodeQREncodingMode_BarcodeQREncodingModeKanji = $00000003;

// Constants for enum BarcodeDataMatrixEncodingMode
type
  BarcodeDataMatrixEncodingMode = TOleEnum;
const
  BarcodeDataMatrixEncodingMode_BarcodeDataMatrixEncodingModeUndefined = $FFFFFFFF;
  BarcodeDataMatrixEncodingMode_BarcodeDataMatrixEncodingModeASCII = $00000000;
  BarcodeDataMatrixEncodingMode_BarcodeDataMatrixEncodingModeC40 = $00000001;
  BarcodeDataMatrixEncodingMode_BarcodeDataMatrixEncodingModeText = $00000002;
  BarcodeDataMatrixEncodingMode_BarcodeDataMatrixEncodingModeX12 = $00000003;
  BarcodeDataMatrixEncodingMode_BarcodeDataMatrixEncodingModeEDIFACT = $00000004;
  BarcodeDataMatrixEncodingMode_BarcodeDataMatrixEncodingModeBase256 = $00000005;

// Constants for enum BarcodePDF417EncodingMode
type
  BarcodePDF417EncodingMode = TOleEnum;
const
  BarcodePDF417EncodingMode_BarcodePDF417EncodingModeUndefined = $FFFFFFFF;
  BarcodePDF417EncodingMode_BarcodePDF417EncodingModeText = $00000000;
  BarcodePDF417EncodingMode_BarcodePDF417EncodingModeByte = $00000001;
  BarcodePDF417EncodingMode_BarcodePDF417EncodingModeNumeric = $00000002;

// Constants for enum BarcodePDF417ErrorCorrectionLevel
type
  BarcodePDF417ErrorCorrectionLevel = TOleEnum;
const
  BarcodePDF417ErrorCorrectionLevel_BarcodePDF417ErrorCorrectionLevelAuto = $FFFFFFFF;
  BarcodePDF417ErrorCorrectionLevel_BarcodePDF417ErrorCorrectionLevel0 = $00000000;
  BarcodePDF417ErrorCorrectionLevel_BarcodePDF417ErrorCorrectionLevel1 = $00000001;
  BarcodePDF417ErrorCorrectionLevel_BarcodePDF417ErrorCorrectionLevel2 = $00000002;
  BarcodePDF417ErrorCorrectionLevel_BarcodePDF417ErrorCorrectionLevel3 = $00000003;
  BarcodePDF417ErrorCorrectionLevel_BarcodePDF417ErrorCorrectionLevel4 = $00000004;
  BarcodePDF417ErrorCorrectionLevel_BarcodePDF417ErrorCorrectionLevel5 = $00000005;
  BarcodePDF417ErrorCorrectionLevel_BarcodePDF417ErrorCorrectionLevel6 = $00000006;
  BarcodePDF417ErrorCorrectionLevel_BarcodePDF417ErrorCorrectionLevel7 = $00000007;
  BarcodePDF417ErrorCorrectionLevel_BarcodePDF417ErrorCorrectionLevel8 = $00000008;

// Constants for enum BarcodeDataMatrixVersion
type
  BarcodeDataMatrixVersion = TOleEnum;
const
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersionAuto = $00000000;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion010x010 = $00000001;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion012x012 = $00000002;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion014x014 = $00000003;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion016x016 = $00000004;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion018x018 = $00000005;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion020x020 = $00000006;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion022x022 = $00000007;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion024x024 = $00000008;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion026x026 = $00000009;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion032x032 = $0000000A;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion036x036 = $0000000B;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion040x040 = $0000000C;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion044x044 = $0000000D;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion048x048 = $0000000E;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion052x052 = $0000000F;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion064x064 = $00000010;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion072x072 = $00000011;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion080x080 = $00000012;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion088x088 = $00000013;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion096x096 = $00000014;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion104x104 = $00000015;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion120x120 = $00000016;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion132x132 = $00000017;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion144x144 = $00000018;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion008x018 = $00000019;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion008x032 = $0000001A;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion012x026 = $0000001B;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion012x036 = $0000001C;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion016x036 = $0000001D;
  BarcodeDataMatrixVersion_BarcodeDataMatrixVersion016x048 = $0000001E;

// Constants for enum BarcodeAztecCodeVersion
type
  BarcodeAztecCodeVersion = TOleEnum;
const
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersionAuto = $00000000;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersionCompact1 = $00000001;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion1 = $00000002;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersionCompact2 = $00000003;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion2 = $00000004;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersionCompact3 = $00000005;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion3 = $00000006;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersionCompact4 = $00000007;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion4 = $00000008;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion5 = $00000009;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion6 = $0000000A;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion7 = $0000000B;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion8 = $0000000C;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion9 = $0000000D;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion10 = $0000000E;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion11 = $0000000F;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion12 = $00000010;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion13 = $00000011;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion14 = $00000012;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion15 = $00000013;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion16 = $00000014;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion17 = $00000015;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion18 = $00000016;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion19 = $00000017;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion20 = $00000018;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion21 = $00000019;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion22 = $0000001A;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion23 = $0000001B;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion24 = $0000001C;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion25 = $0000001D;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion26 = $0000001E;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion27 = $0000001F;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion28 = $00000020;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion29 = $00000021;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion30 = $00000022;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion31 = $00000023;
  BarcodeAztecCodeVersion_BarcodeAztecCodeVersion32 = $00000024;

// Constants for enum BarcodePDF417ReaderScanMode
type
  BarcodePDF417ReaderScanMode = TOleEnum;
const
  BarcodePDF417ReaderScanMode_BestSpeed = $00000000;
  BarcodePDF417ReaderScanMode_BestQuality = $00000001;

// Constants for enum BarcodeMaxiCodeEncodingMode
type
  BarcodeMaxiCodeEncodingMode = TOleEnum;
const
  BarcodeMaxiCodeEncodingMode_Mode2 = $00000002;
  BarcodeMaxiCodeEncodingMode_Mode3 = $00000003;
  BarcodeMaxiCodeEncodingMode_Mode4 = $00000004;
  BarcodeMaxiCodeEncodingMode_Mode5 = $00000005;

// Constants for enum OMRMode
type
  OMRMode = TOleEnum;
const
  OMRMode_FavorQuality = $00000000;
  OMRMode_FavorSpeed = $00000001;

// Constants for enum BlobRemoveMode
type
  BlobRemoveMode = TOleEnum;
const
  BlobRemoveMode_FavorQuality = $00000000;
  BlobRemoveMode_FavorSpeed = $00000001;

// Constants for enum BarcodeDataMatrixReaderScanMode
type
  BarcodeDataMatrixReaderScanMode = TOleEnum;
const
  BarcodeDataMatrixReaderScanMode_BestSpeed = $00000000;
  BarcodeDataMatrixReaderScanMode_BestQuality = $00000001;

// Constants for enum BarcodeAztecReaderScanMode
type
  BarcodeAztecReaderScanMode = TOleEnum;
const
  BarcodeAztecReaderScanMode_BestSpeed = $00000000;
  BarcodeAztecReaderScanMode_BestQuality = $00000001;

// Constants for enum BarcodeMaxiCodeReaderScanMode
type
  BarcodeMaxiCodeReaderScanMode = TOleEnum;
const
  BarcodeMaxiCodeReaderScanMode_BestSpeed = $00000000;
  BarcodeMaxiCodeReaderScanMode_BestQuality = $00000001;

// Constants for enum IconSize
type
  IconSize = TOleEnum;
const
  IconSize_IconSize16x16 = $00000000;
  IconSize_IconSize32x32 = $00000001;

// Constants for enum WiaSourceType
type
  WiaSourceType = TOleEnum;
const
  WiaSourceType_WiaSourceUnspecified = $00000000;
  WiaSourceType_WiaSourceScanner = $00000001;
  WiaSourceType_WiaSourceCamera = $00000002;
  WiaSourceType_WiaSourceVideo = $00000003;

// Constants for enum WiaImageFormat
type
  WiaImageFormat = TOleEnum;
const
  WiaImageFormat_WiaImageFormatUnknown = $FFFFFFFF;
  WiaImageFormat_WiaImageFormatBMP = $00000000;
  WiaImageFormat_WiaImageFormatPNG = $00000001;
  WiaImageFormat_WiaImageFormatGIF = $00000002;
  WiaImageFormat_WiaImageFormatJPEG = $00000003;
  WiaImageFormat_WiaImageFormatTIFF = $00000004;

// Constants for enum WiaStatus
type
  WiaStatus = TOleEnum;
const
  WiaStatus_WIA_OK = $00000000;
  WiaStatus_WIA_ERROR_GENERAL_ERROR = $00000001;
  WiaStatus_WIA_ERROR_PAPER_JAM = $00000002;
  WiaStatus_WIA_ERROR_PAPER_EMPTY = $00000003;
  WiaStatus_WIA_ERROR_PAPER_PROBLEM = $00000004;
  WiaStatus_WIA_ERROR_OFFLINE = $00000005;
  WiaStatus_WIA_ERROR_BUSY = $00000006;
  WiaStatus_WIA_ERROR_WARMING_UP = $00000007;
  WiaStatus_WIA_ERROR_USER_INTERVENTION = $00000008;
  WiaStatus_WIA_ERROR_ITEM_DELETED = $00000009;
  WiaStatus_WIA_ERROR_DEVICE_COMMUNICATION = $0000000A;
  WiaStatus_WIA_ERROR_INVALID_COMMAND = $0000000B;
  WiaStatus_WIA_ERROR_INCORRECT_HARDWARE_SETTING = $0000000C;
  WiaStatus_WIA_ERROR_DEVICE_LOCKED = $0000000D;
  WiaStatus_WIA_ERROR_EXCEPTION_IN_DRIVER = $0000000E;
  WiaStatus_WIA_ERROR_INVALID_DRIVER_RESPONSE = $0000000F;
  WiaStatus_WIA_ERROR_COVER_OPEN = $00000010;
  WiaStatus_WIA_ERROR_LAMP_OFF = $00000011;
  WiaStatus_WIA_ERROR_MAXIMUM_PRINTER_ENDORSER_COUNTER = $00000012;
  WiaStatus_WIA_ERROR_MULTI_FEED = $00000013;
  WiaStatus_WIA_S_NO_DEVICE_AVAILABLE = $00000015;
  WiaStatus_WIA_OPEN_SOURCE_FIRST = $0000001E;
  WiaStatus_WIA_OPERATION_CANCELLED = $0000001F;
  WiaStatus_WIA_OUTPUT_FILE_EXISTS = $00000021;
  WiaStatus_WIA_CAN_NOT_SET_VALUE = $00000032;
  WiaStatus_WIA_CAN_NOT_GET_VALUE = $00000033;
  WiaStatus_WIA_UNSUPPORTED_FEATURE = $0000003C;
  WiaStatus_WIA_GENERIC_ERROR = $00000064;

// Constants for enum WiaImageIntent
type
  WiaImageIntent = TOleEnum;
const
  WiaImageIntent_WiaImageIntentNone = $00000000;
  WiaImageIntent_WiaImageIntentColor = $00000001;
  WiaImageIntent_WiaImageIntentGrayscale = $00000002;
  WiaImageIntent_WiaImageIntentText = $00000004;
  WiaImageIntent_WiaImageIntentMask = $0000000F;
  WiaImageIntent_WiaImageIntentMinimizeSize = $00010000;
  WiaImageIntent_WiaImageIntentMaximizeQuality = $00020000;
  WiaImageIntent_WiaImageIntentBestPreview = $00040000;
  WiaImageIntent_WiaImageIntentSizeMask = $000F0000;

// Constants for enum WiaPageSize
type
  WiaPageSize = TOleEnum;
const
  WiaPageSize_WiaPageSizeUnknown = $FFFFFFFF;
  WiaPageSize_WiaPageSizeA4 = $00000000;
  WiaPageSize_WiaPageSizeLETTER = $00000001;
  WiaPageSize_WiaPageSizeCUSTOM = $00000002;
  WiaPageSize_WiaPageSizeUSLEGAL = $00000003;
  WiaPageSize_WiaPageSizeUSLETTER = $00000001;
  WiaPageSize_WiaPageSizeUSLEDGER = $00000004;
  WiaPageSize_WiaPageSizeUSSTATEMENT = $00000005;
  WiaPageSize_WiaPageSizeBUSINESSCARD = $00000006;
  WiaPageSize_WiaPageSizeISO_A0 = $00000007;
  WiaPageSize_WiaPageSizeISO_A1 = $00000008;
  WiaPageSize_WiaPageSizeISO_A2 = $00000009;
  WiaPageSize_WiaPageSizeISO_A3 = $0000000A;
  WiaPageSize_WiaPageSizeISO_A4 = $00000000;
  WiaPageSize_WiaPageSizeISO_A5 = $0000000B;
  WiaPageSize_WiaPageSizeISO_A6 = $0000000C;
  WiaPageSize_WiaPageSizeISO_A7 = $0000000D;
  WiaPageSize_WiaPageSizeISO_A8 = $0000000E;
  WiaPageSize_WiaPageSizeISO_A9 = $0000000F;
  WiaPageSize_WiaPageSizeISO_A10 = $00000010;
  WiaPageSize_WiaPageSizeISO_B0 = $00000011;
  WiaPageSize_WiaPageSizeISO_B1 = $00000012;
  WiaPageSize_WiaPageSizeISO_B2 = $00000013;
  WiaPageSize_WiaPageSizeISO_B3 = $00000014;
  WiaPageSize_WiaPageSizeISO_B4 = $00000015;
  WiaPageSize_WiaPageSizeISO_B5 = $00000016;
  WiaPageSize_WiaPageSizeISO_B6 = $00000017;
  WiaPageSize_WiaPageSizeISO_B7 = $00000018;
  WiaPageSize_WiaPageSizeISO_B8 = $00000019;
  WiaPageSize_WiaPageSizeISO_B9 = $0000001A;
  WiaPageSize_WiaPageSizeISO_B10 = $0000001B;
  WiaPageSize_WiaPageSizeISO_C0 = $0000001C;
  WiaPageSize_WiaPageSizeISO_C1 = $0000001D;
  WiaPageSize_WiaPageSizeISO_C2 = $0000001E;
  WiaPageSize_WiaPageSizeISO_C3 = $0000001F;
  WiaPageSize_WiaPageSizeISO_C4 = $00000020;
  WiaPageSize_WiaPageSizeISO_C5 = $00000021;
  WiaPageSize_WiaPageSizeISO_C6 = $00000022;
  WiaPageSize_WiaPageSizeISO_C7 = $00000023;
  WiaPageSize_WiaPageSizeISO_C8 = $00000024;
  WiaPageSize_WiaPageSizeISO_C9 = $00000025;
  WiaPageSize_WiaPageSizeISO_C10 = $00000026;
  WiaPageSize_WiaPageSizeJIS_B0 = $00000027;
  WiaPageSize_WiaPageSizeJIS_B1 = $00000028;
  WiaPageSize_WiaPageSizeJIS_B2 = $00000029;
  WiaPageSize_WiaPageSizeJIS_B3 = $0000002A;
  WiaPageSize_WiaPageSizeJIS_B4 = $0000002B;
  WiaPageSize_WiaPageSizeJIS_B5 = $0000002C;
  WiaPageSize_WiaPageSizeJIS_B6 = $0000002D;
  WiaPageSize_WiaPageSizeJIS_B7 = $0000002E;
  WiaPageSize_WiaPageSizeJIS_B8 = $0000002F;
  WiaPageSize_WiaPageSizeJIS_B9 = $00000030;
  WiaPageSize_WiaPageSizeJIS_B10 = $00000031;
  WiaPageSize_WiaPageSizeJIS_2A = $00000032;
  WiaPageSize_WiaPageSizeJIS_4A = $00000033;
  WiaPageSize_WiaPageSizeDIN_2B = $00000034;
  WiaPageSize_WiaPageSizeDIN_4B = $00000035;
  WiaPageSize_WiaPageSizeAUTO = $00000064;
  WiaPageSize_WiaPageSizeCUSTOM_BASE = $00008000;

// Constants for enum ImagingContext
type
  ImagingContext = TOleEnum;
const
  ImagingContext_ContextUnknown = $FFFFFFFF;
  ImagingContext_ContextDocument = $00000000;
  ImagingContext_ContextPhoto = $00000001;

// Constants for enum MICRFont
type
  MICRFont = TOleEnum;
const
  MICRFont_MICRFontCMC7 = $00000000;
  MICRFont_MICRFontE13B = $00000001;

// Constants for enum MICRContext
type
  MICRContext = TOleEnum;
const
  MICRContext_MICRContextDocument = $00000000;
  MICRContext_MICRContextLineFinding = $00000001;

// Constants for enum GdPictureOutputIntent
type
  GdPictureOutputIntent = TOleEnum;
const
  GdPictureOutputIntent_IntentUnknown = $FFFFFFFF;
  GdPictureOutputIntent_IntentBlackWhite = $00000000;
  GdPictureOutputIntent_IntentGrayscale = $00000001;
  GdPictureOutputIntent_IntentColor = $00000002;
  GdPictureOutputIntent_IntentPalletized = $00000003;
  GdPictureOutputIntent_IntentWhite = $00000004;
  GdPictureOutputIntent_Rejected = $00000064;

// Constants for enum FontCharSet
type
  FontCharSet = TOleEnum;
const
  FontCharSet_ANSI_CHARSET = $00000000;
  FontCharSet_DEFAULT_CHARSET = $00000001;
  FontCharSet_SYMBOL_CHARSET = $00000002;
  FontCharSet_MAC_CHARSET = $0000004D;
  FontCharSet_SHIFTJIS_CHARSET = $00000080;
  FontCharSet_HANGEUL_CHARSET = $00000081;
  FontCharSet_HANGUL_CHARSET = $00000081;
  FontCharSet_GB2312_CHARSET = $00000086;
  FontCharSet_CHINESEBIG5_CHARSET = $00000088;
  FontCharSet_JOHAB_CHARSET = $00000082;
  FontCharSet_HEBREW_CHARSET = $000000B1;
  FontCharSet_ARABIC_CHARSET = $000000B2;
  FontCharSet_GREEK_CHARSET = $000000A1;
  FontCharSet_TURKISH_CHARSET = $000000A2;
  FontCharSet_VIETNAMESE_CHARSET = $000000A3;
  FontCharSet_BALTIC_CHARSET = $000000BA;
  FontCharSet_RUSSIAN_CHARSET = $000000CC;
  FontCharSet_THAI_CHARSET = $000000DE;
  FontCharSet_EASTEUROPE_CHARSET = $000000EE;
  FontCharSet_OEM_CHARSET = $000000FF;

// Constants for enum DespeckleType
type
  DespeckleType = TOleEnum;
const
  DespeckleType_FourConnected = $00000000;
  DespeckleType_FourConnectedNeighborhood = $00000001;
  DespeckleType_FourConnectedWhite = $00000002;
  DespeckleType_FourConnectedNeighborhoodWhite = $00000003;
  DespeckleType_Connected = $00000004;
  DespeckleType_ConnectedNeighborhood = $00000005;
  DespeckleType_ConnectedWhite = $00000006;
  DespeckleType_ConnectedNeighborhoodWhite = $00000007;

// Constants for enum OCRContext
type
  OCRContext = TOleEnum;
const
  OCRContext_OCRContextUnspecified = $FFFFFFFF;
  OCRContext_OCRContextDocument = $00000000;
  OCRContext_OCRContextSingleColumn = $00000001;
  OCRContext_OCRContextSingleBlock = $00000002;
  OCRContext_OCRContextSingleBlockVertical = $00000003;
  OCRContext_OCRContextSingleLine = $00000004;
  OCRContext_OCRContextSingleWord = $00000005;
  OCRContext_OCRContextSingleWordCircle = $00000006;
  OCRContext_OCRContextSingleChar = $00000007;
  OCRContext_OCRContextSparseText = $00000008;
  OCRContext_OCRContextRawLine = $00000009;
  OCRContext_OCRContextSegmentationOnly = $0000000A;

// Constants for enum OCRSpecialContext
type
  OCRSpecialContext = TOleEnum;
const
  OCRSpecialContext_None = $00000000;
  OCRSpecialContext_OneOrTwoNumerics = $00000001;
  OCRSpecialContext_SingleLineNumerics = $00000002;
  OCRSpecialContext_MRZ = $00000003;
  OCRSpecialContext_MICRLineE13B = $00000004;
  OCRSpecialContext_MICRLineCMC7 = $00000005;
  OCRSpecialContext_NumericLineML = $00000006;
  OCRSpecialContext_HandwrittenNumericBoxML = $00000007;
  OCRSpecialContext_AlphaNumAllCapsML = $00000008;

// Constants for enum OCRWritingDirection
type
  OCRWritingDirection = TOleEnum;
const
  OCRWritingDirection_Unknown = $FFFFFFFF;
  OCRWritingDirection_LeftToRight = $00000000;
  OCRWritingDirection_RightToLeft = $00000001;
  OCRWritingDirection_TopToBottom = $00000002;

// Constants for enum OCRBlockOrientation
type
  OCRBlockOrientation = TOleEnum;
const
  OCRBlockOrientation_Unknown = $FFFFFFFF;
  OCRBlockOrientation_Up = $00000000;
  OCRBlockOrientation_Right = $00000001;
  OCRBlockOrientation_Down = $00000002;
  OCRBlockOrientation_Left = $00000003;

// Constants for enum OCRBlockType
type
  OCRBlockType = TOleEnum;
const
  OCRBlockType_Unknown = $00000000;
  OCRBlockType_FlowingText = $00000001;
  OCRBlockType_HeadingText = $00000002;
  OCRBlockType_PulloutText = $00000003;
  OCRBlockType_Equation = $00000004;
  OCRBlockType_InlineEquation = $00000005;
  OCRBlockType_Table = $00000006;
  OCRBlockType_VerticalText = $00000007;
  OCRBlockType_CaptionText = $00000008;
  OCRBlockType_FlowingImage = $00000009;
  OCRBlockType_HeadingImage = $0000000A;
  OCRBlockType_PulloutImage = $0000000B;
  OCRBlockType_HorizontalLine = $0000000C;
  OCRBlockType_VerticalLine = $0000000D;
  OCRBlockType_Noise = $0000000E;

// Constants for enum OCRMode
type
  OCRMode = TOleEnum;
const
  OCRMode_FavorSpeed = $00000000;
  OCRMode_FavorAccuracy = $00000001;

// Constants for enum OCROutputTextFormat
type
  OCROutputTextFormat = TOleEnum;
const
  OCROutputTextFormat_Utf16 = $00000000;
  OCROutputTextFormat_Utf8 = $00000001;

// Constants for enum OCRLanguage
type
  OCRLanguage = TOleEnum;
const
  OCRLanguage_Unknown = $FFFFFFFF;
  OCRLanguage_Afrikaans = $00000000;
  OCRLanguage_Amharic = $00000001;
  OCRLanguage_Arabic = $00000002;
  OCRLanguage_Assamese = $00000003;
  OCRLanguage_Azerbaijani = $00000004;
  OCRLanguage_AzerbaijaniCyrillic = $00000005;
  OCRLanguage_Belarusian = $00000006;
  OCRLanguage_Bengali = $00000007;
  OCRLanguage_Tibetan = $00000008;
  OCRLanguage_Bosnian = $00000009;
  OCRLanguage_Bulgarian = $0000000A;
  OCRLanguage_CatalanValencian = $0000000B;
  OCRLanguage_Cebuano = $0000000C;
  OCRLanguage_Czech = $0000000D;
  OCRLanguage_ChineseSimplified = $0000000E;
  OCRLanguage_ChineseTraditional = $0000000F;
  OCRLanguage_Cherokee = $00000010;
  OCRLanguage_Welsh = $00000011;
  OCRLanguage_Danish = $00000012;
  OCRLanguage_German = $00000013;
  OCRLanguage_Dzongkha = $00000014;
  OCRLanguage_Greek = $00000015;
  OCRLanguage_English = $00000016;
  OCRLanguage_Esperanto = $00000017;
  OCRLanguage_Estonian = $00000018;
  OCRLanguage_Basque = $00000019;
  OCRLanguage_Persian = $0000001A;
  OCRLanguage_Finnish = $0000001B;
  OCRLanguage_French = $0000001C;
  OCRLanguage_Frankish = $0000001D;
  OCRLanguage_Irish = $0000001E;
  OCRLanguage_Galician = $0000001F;
  OCRLanguage_Gujarati = $00000020;
  OCRLanguage_HaitianCreole = $00000021;
  OCRLanguage_Hebrew = $00000022;
  OCRLanguage_Hindi = $00000023;
  OCRLanguage_Croatian = $00000024;
  OCRLanguage_Hungarian = $00000025;
  OCRLanguage_Inuktitut = $00000026;
  OCRLanguage_Indonesian = $00000027;
  OCRLanguage_Icelandic = $00000028;
  OCRLanguage_Italian = $00000029;
  OCRLanguage_Italian_Old = $0000002A;
  OCRLanguage_Javanese = $0000002B;
  OCRLanguage_Japanese = $0000002C;
  OCRLanguage_Kannada = $0000002D;
  OCRLanguage_Georgian = $0000002E;
  OCRLanguage_Georgian_Old = $0000002F;
  OCRLanguage_Kazakh = $00000030;
  OCRLanguage_CentralKhmer = $00000031;
  OCRLanguage_Kirghiz = $00000032;
  OCRLanguage_Korean = $00000033;
  OCRLanguage_Kurdish = $00000034;
  OCRLanguage_Lao = $00000035;
  OCRLanguage_Latin = $00000036;
  OCRLanguage_Latvian = $00000037;
  OCRLanguage_Lithuanian = $00000038;
  OCRLanguage_Malayalam = $00000039;
  OCRLanguage_Marathi = $0000003A;
  OCRLanguage_Macedonian = $0000003B;
  OCRLanguage_Maltese = $0000003C;
  OCRLanguage_Malay = $0000003D;
  OCRLanguage_Burmese = $0000003E;
  OCRLanguage_Nepali = $0000003F;
  OCRLanguage_Dutch = $00000040;
  OCRLanguage_Norwegian = $00000041;
  OCRLanguage_Oriya = $00000042;
  OCRLanguage_Panjabi = $00000043;
  OCRLanguage_Polish = $00000044;
  OCRLanguage_Portuguese = $00000045;
  OCRLanguage_Pushto = $00000046;
  OCRLanguage_Romanian = $00000047;
  OCRLanguage_Russian = $00000048;
  OCRLanguage_Sanskrit = $00000049;
  OCRLanguage_Sinhala = $0000004A;
  OCRLanguage_Slovak = $0000004B;
  OCRLanguage_Slovenian = $0000004C;
  OCRLanguage_Spanish = $0000004D;
  OCRLanguage_Spanish_Old = $0000004E;
  OCRLanguage_Albanian = $0000004F;
  OCRLanguage_Serbian = $00000050;
  OCRLanguage_SerbianLatin = $00000051;
  OCRLanguage_Swahili = $00000052;
  OCRLanguage_Swedish = $00000053;
  OCRLanguage_Syriac = $00000054;
  OCRLanguage_Tamil = $00000055;
  OCRLanguage_Telugu = $00000056;
  OCRLanguage_Tajik = $00000057;
  OCRLanguage_Tagalog = $00000058;
  OCRLanguage_Thai = $00000059;
  OCRLanguage_Tigrinya = $0000005A;
  OCRLanguage_Turkish = $0000005B;
  OCRLanguage_Uighur = $0000005C;
  OCRLanguage_Ukrainian = $0000005D;
  OCRLanguage_Urdu = $0000005E;
  OCRLanguage_Uzbek = $0000005F;
  OCRLanguage_UzbekCyrillic = $00000060;
  OCRLanguage_Vietnamese = $00000061;
  OCRLanguage_Yiddish = $00000062;
  OCRLanguage_GreekAncient = $00000063;
  OCRLanguage_LatinScript = $00000064;
  OCRLanguage_OSD = $7FFFFFFF;

// Constants for enum OCRParagraphJustification
type
  OCRParagraphJustification = TOleEnum;
const
  OCRParagraphJustification_Unknown = $00000000;
  OCRParagraphJustification_Left = $00000001;
  OCRParagraphJustification_Center = $00000002;
  OCRParagraphJustification_Right = $00000003;

// Constants for enum TextExtractionOptions
type
  TextExtractionOptions = TOleEnum;
const
  TextExtractionOptions_Default = $00000000;
  TextExtractionOptions_IgnoreUnexpectedWhitespace = $00000001;
  TextExtractionOptions_ExactWordLineMatching = $00000002;
  TextExtractionOptions_IgnoreToUnicodeMapFormat = $00000004;
  TextExtractionOptions_PreserveLayout = $00000008;
  TextExtractionOptions_DisableTextOrientationDetection = $00000010;
  TextExtractionOptions_IgnoreRotatedText = $00000020;

// Constants for enum TextExtractionOutputInfo
type
  TextExtractionOutputInfo = TOleEnum;
const
  TextExtractionOutputInfo_Default = $00000000;
  TextExtractionOutputInfo_IncludeWordBounds = $00000001;
  TextExtractionOutputInfo_IncludeWordString = $00000002;
  TextExtractionOutputInfo_IncludeFontName = $00000004;
  TextExtractionOutputInfo_IncludeFontBoxHeight = $00000008;
  TextExtractionOutputInfo_IncludeTextMode = $00000010;
  TextExtractionOutputInfo_IncludeTextSize = $00000020;
  TextExtractionOutputInfo_IncludeGlyphWidths = $00000040;
  TextExtractionOutputInfo_IncludeGlyphCharacters = $00000080;

// Constants for enum OrientationMode
type
  OrientationMode = TOleEnum;
const
  OrientationMode_PageRotation = $00000001;
  OrientationMode_ViewRotation = $00000002;
  OrientationMode_RenderRotation = $00000003;

// Constants for enum EmulationMedia
type
  EmulationMedia = TOleEnum;
const
  EmulationMedia_NoEmulation = $00000001;
  EmulationMedia_Print = $00000002;
  EmulationMedia_Screen = $00000003;

// Constants for enum GdPictureStatus
type
  GdPictureStatus = TOleEnum;
const
  GdPictureStatus_OK = $00000000;
  GdPictureStatus_GenericError = $00000001;
  GdPictureStatus_InvalidParameter = $00000002;
  GdPictureStatus_OutOfMemory = $00000003;
  GdPictureStatus_ObjectBusy = $00000004;
  GdPictureStatus_InsufficientBuffer = $00000005;
  GdPictureStatus_NotImplemented = $00000006;
  GdPictureStatus_Win32Error = $00000007;
  GdPictureStatus_WrongState = $00000008;
  GdPictureStatus_Aborted = $00000009;
  GdPictureStatus_FileNotFound = $0000000A;
  GdPictureStatus_ValueOverflow = $0000000B;
  GdPictureStatus_AccessDenied = $0000000C;
  GdPictureStatus_UnknownImageFormat = $0000000D;
  GdPictureStatus_FontFamilyNotFound = $0000000E;
  GdPictureStatus_FontStyleNotFound = $0000000F;
  GdPictureStatus_NotTrueTypeFont = $00000010;
  GdPictureStatus_UnsupportedGdiplusVersion = $00000011;
  GdPictureStatus_GdiplusNotInitialized = $00000012;
  GdPictureStatus_PropertyNotFound = $00000013;
  GdPictureStatus_PropertyNotSupported = $00000014;
  GdPictureStatus_ProfileNotFound = $00000015;
  GdPictureStatus_UnsupportedImageFormat = $00000016;
  GdPictureStatus_TemplateNotFound = $00000017;
  GdPictureStatus_PrintingException = $00000018;
  GdPictureStatus_OperationTimedOut = $00000019;
  GdPictureStatus_SegmentationError = $0000001A;
  GdPictureStatus_PasswordRequired = $0000001B;
  GdPictureStatus_EmptyDocument = $0000001C;
  GdPictureStatus_InvalidPassword = $0000001D;
  GdPictureStatus_TwainError = $0000001E;
  GdPictureStatus_WrongGdTwainVersion = $0000001F;
  GdPictureStatus_BadTwainState = $00000020;
  GdPictureStatus_TwainTransferCanceled = $00000021;
  GdPictureStatus_TwainTransferError = $00000022;
  GdPictureStatus_TwainInvalidTransferMode = $00000024;
  GdPictureStatus_CanNotCreateFile = $00000029;
  GdPictureStatus_InvalidBarCode = $00000032;
  GdPictureStatus_NotIndexedPixelFormat = $0000003D;
  GdPictureStatus_UnsupportedPixelFormat = $0000003E;
  GdPictureStatus_InvalidPDFHandle = $0000003F;
  GdPictureStatus_MaxPagesReached = $00000040;
  GdPictureStatus_MaxDocumentSizeReached = $00000041;
  GdPictureStatus_NotEnoughTokens = $00000042;
  GdPictureStatus_UnsupportedFormat = $00000043;
  GdPictureStatus_InternetOpenError = $00000064;
  GdPictureStatus_InternetConnectError = $00000065;
  GdPictureStatus_InternetHttpOpenRequestError = $00000066;
  GdPictureStatus_InternetHttpQueryError = $00000067;
  GdPictureStatus_InternetHttpSendRequestError = $00000068;
  GdPictureStatus_InternetHttpInvalidFileLength = $00000069;
  GdPictureStatus_InternetHttpTransferError = $0000006A;
  GdPictureStatus_InternetHTTPWriteFileError = $0000006B;
  GdPictureStatus_InternetFtpGetFileError = $0000012C;
  GdPictureStatus_InternetFtpWriteFileError = $0000012D;
  GdPictureStatus_PdfDocumentMustBeUnencrypted = $000001F4;
  GdPictureStatus_PdfCanNotBeDecrypted = $000001F5;
  GdPictureStatus_PdfPasswordNeeded = $000001F6;
  GdPictureStatus_PdfBadPassword = $000001F7;
  GdPictureStatus_PdfCanNotOpenFile = $000001F8;
  GdPictureStatus_PdfRenderingPageError = $000001F9;
  GdPictureStatus_PdfGenericError = $000001FA;
  GdPictureStatus_PdfErrorAddingImage = $000001FB;
  GdPictureStatus_PdfUnsupportedInPdfA = $000001FF;
  GdPictureStatus_PdfInvalidContent = $00000200;
  GdPictureStatus_PdfUnsupportedVersion = $00000201;
  GdPictureStatus_PdfUnsupportedInPdfVersion = $00000202;
  GdPictureStatus_PdfConversionFailed = $00000203;
  GdPictureStatus_OCRTesseractDllRequired = $00000320;
  GdPictureStatus_OCRDictionaryNotFound = $00000321;
  GdPictureStatus_OCRUnhandledException = $00000322;
  GdPictureStatus_CertificateWrongPassword = $00000384;
  GdPictureStatus_CertificateWrongFormat = $00000385;
  GdPictureStatus_CertificateWrongPrivateKey = $00000386;
  GdPictureStatus_CertificateNotFound = $00000387;
  GdPictureStatus_CertificateUnsupportedHashAlgorithm = $00000388;
  GdPictureStatus_BarcodeInvalidLength = $000003E9;
  GdPictureStatus_BarcodeInvalidStart = $000003EA;
  GdPictureStatus_BarcodeInvalidStop = $000003EB;
  GdPictureStatus_BarcodeLengthMustBe13or14 = $000003EC;
  GdPictureStatus_BarcodeNotNumeric = $000003ED;
  GdPictureStatus_BarcodeCanNotDetermineStart = $000003EE;
  GdPictureStatus_BarcodeUnknownStartType = $000003EF;
  GdPictureStatus_BarcodeNoStartInCurrentCodeSet = $000003F0;
  GdPictureStatus_BarcodeCouldNotInsertStart = $000003F1;
  GdPictureStatus_BarcodeNoEncodingValueFound = $000003F2;
  GdPictureStatus_BarcodeInvalidData = $000003F3;
  GdPictureStatus_BarcodeInvalidDestinationSize = $000003F4;
  GdPictureStatus_BarcodeInvalidManufacturerCode = $000003F5;
  GdPictureStatus_BarcodeLengthMustBe7or8 = $000003F6;
  GdPictureStatus_BarcodeLengthMustBeMultipleOf2 = $000003F7;
  GdPictureStatus_BarcodeMustStartWith978orBadLength = $000003F8;
  GdPictureStatus_BarcodeMustStartWith49 = $000003F9;
  GdPictureStatus_BarcodeBarcodeLengthMustBe5or6or9or11 = $000003FA;
  GdPictureStatus_BarcodeBarcodeLengthMustBe12 = $000003FB;
  GdPictureStatus_BarcodeBarcodeLengthMustBe8or12 = $000003FC;
  GdPictureStatus_BarcodeBarcodeMustBinaryChar = $000003FD;
  GdPictureStatus_BarcodeIllegalUPCA = $000003FE;
  GdPictureStatus_BarcodeBarcodeLengthMustBe2 = $000003FF;
  GdPictureStatus_BarcodeBarcodeLengthMustBe5 = $00000400;
  GdPictureStatus_BarcodeLengthMustBe12or13 = $00000401;
  GdPictureStatus_BarcodeLengthMustBe11or12 = $00000402;
  GdPictureStatus_Barcode1DReaderPluginNotLoaded = $0000044C;
  GdPictureStatus_Barcode1DReaderUnknownError = $0000044D;
  GdPictureStatus_BarcodeDataMatrixReaderPluginNotLoaded = $000004B0;
  GdPictureStatus_BarcodeDataMatrixReaderUnknownError = $000004B1;
  GdPictureStatus_BarcodeQRCodeReaderPluginNotLoaded = $00000514;
  GdPictureStatus_BarcodePDF417ReaderPluginNotLoaded = $00000578;
  GdPictureStatus_BarcodeQrEncoderInvalidVersion = $000005DC;
  GdPictureStatus_BarcodeQrEncoderNotNumericData = $000005DD;
  GdPictureStatus_BarcodeQrEncoderNotAlphanumericData = $000005DE;
  GdPictureStatus_BarcodeQrEncoderNot8BitData = $000005DF;
  GdPictureStatus_BarcodeQrEncoderNotKanjiData = $000005E0;
  GdPictureStatus_BarcodeDatamatrixEncoderInvalidVersion = $000005E6;
  GdPictureStatus_BarcodeDatamatrixEncoderInvalidMode = $000005E7;
  GdPictureStatus_BarcodePDF417EncoderInvalidVersion = $000005F0;
  GdPictureStatus_BarcodePDF417EncoderNotNumericData = $000005F1;
  GdPictureStatus_BarcodePDF417EncoderNotTextData = $000005F2;
  GdPictureStatus_BarcodePDF417EncoderNotByteData = $000005F3;
  GdPictureStatus_BarcodePDF417InvalidDataCount = $000005F4;
  GdPictureStatus_BarcodeAztecReaderPluginNotLoaded = $000004B0;
  GdPictureStatus_BarcodeMaxiCodeReaderPluginNotLoaded = $000004B0;
  GdPictureStatus_EncryptionSchemeNotSupported = $000007D0;
  GdPictureStatus_JBIG2PluginNotLoaded = $00000BB8;
  GdPictureStatus_DocumentAnalyzerDllRequired = $00000FA0;
  GdPictureStatus_SkiaRenderingDllRequired = $00001388;
  GdPictureStatus_SkiaInvalidAlphaType = $00001389;
  GdPictureStatus_SkiaInvalidColorType = $0000138A;
  GdPictureStatus_WebBrowserStartingError = $00001770;
  GdPictureStatus_InvalidLicense = $0000270F;
  GdPictureStatus_WIAGenericError = $00004E20;

// Constants for enum GdPictureRotateFlipType
type
  GdPictureRotateFlipType = TOleEnum;
const
  GdPictureRotateFlipType_GdPictureRotateNoneFlipNone = $00000000;
  GdPictureRotateFlipType_GdPictureRotate90FlipNone = $00000001;
  GdPictureRotateFlipType_GdPictureRotate180FlipNone = $00000002;
  GdPictureRotateFlipType_GdPictureRotate270FlipNone = $00000003;
  GdPictureRotateFlipType_GdPictureRotateNoneFlipX = $00000004;
  GdPictureRotateFlipType_GdPictureRotate90FlipX = $00000005;
  GdPictureRotateFlipType_GdPictureRotate180FlipX = $00000006;
  GdPictureRotateFlipType_GdPictureRotate270FlipX = $00000007;
  GdPictureRotateFlipType_GdPictureRotateNoneFlipY = $00000006;
  GdPictureRotateFlipType_GdPictureRotate90FlipY = $00000007;
  GdPictureRotateFlipType_GdPictureRotate180FlipY = $00000004;
  GdPictureRotateFlipType_GdPictureRotate270FlipY = $00000005;
  GdPictureRotateFlipType_GdPictureRotateNoneFlipXY = $00000002;
  GdPictureRotateFlipType_GdPictureRotate90FlipXY = $00000003;
  GdPictureRotateFlipType_GdPictureRotate180FlipXY = $00000000;
  GdPictureRotateFlipType_GdPictureRotate270FlipXY = $00000001;

// Constants for enum PdfSignatureHash
type
  PdfSignatureHash = TOleEnum;
const
  PdfSignatureHash_SHA1 = $00000000;
  PdfSignatureHash_SHA256 = $00000001;
  PdfSignatureHash_SHA512 = $00000002;
  PdfSignatureHash_SHA224 = $00000003;
  PdfSignatureHash_SHA384 = $00000004;

// Constants for enum PdfSignatureMode
type
  PdfSignatureMode = TOleEnum;
const
  PdfSignatureMode_PdfSignatureModeAdobePPKMS = $00000000;
  PdfSignatureMode_PdfSignatureModeAdobePPKLite = $00000001;
  PdfSignatureMode_PdfSignatureModeAdobeCADES = $00000002;

// Constants for enum PdfBlendMode
type
  PdfBlendMode = TOleEnum;
const
  PdfBlendMode_PdfBlendModeNormal = $00000000;
  PdfBlendMode_PdfBlendModeMultiply = $00000001;
  PdfBlendMode_PdfBlendModeScreen = $00000002;
  PdfBlendMode_PdfBlendModeOverLay = $00000003;
  PdfBlendMode_PdfBlendModeDarken = $00000004;
  PdfBlendMode_PdfBlendModeLighten = $00000005;
  PdfBlendMode_PdfBlendModeColorDodge = $00000006;
  PdfBlendMode_PdfBlendModeColorBurn = $00000007;
  PdfBlendMode_PdfBlendModeHardLight = $00000008;
  PdfBlendMode_PdfBlendModeSoftLight = $00000009;
  PdfBlendMode_PdfBlendModeDifference = $0000000A;
  PdfBlendMode_PdfBlendModeExclusion = $0000000B;
  PdfBlendMode_PdfBlendModeHue = $0000000C;
  PdfBlendMode_PdfBlendModeSaturation = $0000000D;
  PdfBlendMode_PdfBlendModeColor = $0000000E;
  PdfBlendMode_PdfBlendModeLuminosity = $0000000F;

// Constants for enum PdfFormFieldType
type
  PdfFormFieldType = TOleEnum;
const
  PdfFormFieldType_PdfFormFieldTypeUnknown = $00000000;
  PdfFormFieldType_PdfFormFieldTypePushButton = $00000001;
  PdfFormFieldType_PdfFormFieldTypeCheckBoxButton = $00000002;
  PdfFormFieldType_PdfFormFieldTypeRadioButton = $00000003;
  PdfFormFieldType_PdfFormFieldTypeText = $00000004;
  PdfFormFieldType_PdfFormFieldTypeChoice = $00000005;
  PdfFormFieldType_PdfFormFieldTypeSignature = $00000006;
  PdfFormFieldType_PdfFormFieldTypeList = $00000007;
  PdfFormFieldType_PdfFormFieldTypeCombo = $00000008;

// Constants for enum GdPicture14_UnitMode
type
  GdPicture14_UnitMode = TOleEnum;
const
  GdPicture14_UnitMode_UnitWorld = $00000000;
  GdPicture14_UnitMode_UnitDisplay = $00000001;
  GdPicture14_UnitMode_UnitPixel = $00000002;
  GdPicture14_UnitMode_UnitPoint = $00000003;
  GdPicture14_UnitMode_UnitInch = $00000004;
  GdPicture14_UnitMode_UnitDocument = $00000005;
  GdPicture14_UnitMode_UnitMillimeter = $00000006;

// Constants for enum GdPictureAnnotationType
type
  GdPictureAnnotationType = TOleEnum;
const
  GdPictureAnnotationType_AnnotationTypeUndefined = $FFFFFFFF;
  GdPictureAnnotationType_AnnotationTypeRubberStamp = $00000000;
  GdPictureAnnotationType_AnnotationTypeRectangle = $00000001;
  GdPictureAnnotationType_AnnotationTypeRectangleHighlighter = $00000002;
  GdPictureAnnotationType_AnnotationTypeLine = $00000003;
  GdPictureAnnotationType_AnnotationTypeLineArrow = $00000004;
  GdPictureAnnotationType_AnnotationTypeConnectedLines = $00000005;
  GdPictureAnnotationType_AnnotationTypeEllipse = $00000006;
  GdPictureAnnotationType_AnnotationTypeEmbeddedImage = $00000007;
  GdPictureAnnotationType_AnnotationTypeText = $00000008;
  GdPictureAnnotationType_AnnotationTypeStickyNote = $00000009;
  GdPictureAnnotationType_AnnotationTypeFreeHand = $0000000A;
  GdPictureAnnotationType_AnnotationTypeFreeHandHighlighter = $0000000B;
  GdPictureAnnotationType_AnnotationTypeFreeHandPolygon = $0000000C;
  GdPictureAnnotationType_AnnotationTypeLink = $0000000D;
  GdPictureAnnotationType_AnnotationTypePolygon = $0000000E;
  GdPictureAnnotationType_AnnotationTypeRuler = $0000000F;
  GdPictureAnnotationType_AnnotationTypePolyRuler = $00000010;
  GdPictureAnnotationType_AnnotationTypeRedaction = $00000011;
  GdPictureAnnotationType_AnnotationTypeCustom = $00000400;
  GdPictureAnnotationType_AnnotationTypeComment = $00000800;

// Constants for enum AnnotationCommentReviewStatus
type
  AnnotationCommentReviewStatus = TOleEnum;
const
  AnnotationCommentReviewStatus_None = $00000000;
  AnnotationCommentReviewStatus_Approved = $00000001;
  AnnotationCommentReviewStatus_Canceled = $00000002;
  AnnotationCommentReviewStatus_Finished = $00000003;
  AnnotationCommentReviewStatus_Rejected = $00000004;

// Constants for enum UnitMode
type
  UnitMode = TOleEnum;
const
  UnitMode_Pixel = $00000000;
  UnitMode_Inch = $00000001;
  UnitMode_Centimeter = $00000002;
  UnitMode_Millimeter = $00000003;
  UnitMode_Custom = $00010000;

// Constants for enum GdPictureFillMode
type
  GdPictureFillMode = TOleEnum;
const
  GdPictureFillMode_Alternate = $00000000;
  GdPictureFillMode_Winding = $00000001;

// Constants for enum GdPictureFontStyle
type
  GdPictureFontStyle = TOleEnum;
const
  GdPictureFontStyle_Regular = $00000000;
  GdPictureFontStyle_Bold = $00000001;
  GdPictureFontStyle_Italic = $00000002;
  GdPictureFontStyle_Underline = $00000004;
  GdPictureFontStyle_Strikeout = $00000008;

// Constants for enum GdPictureInterpolationMode
type
  GdPictureInterpolationMode = TOleEnum;
const
  GdPictureInterpolationMode_Default = $00000000;
  GdPictureInterpolationMode_Bilinear = $00000003;
  GdPictureInterpolationMode_Bicubic = $00000004;
  GdPictureInterpolationMode_NearestNeighbor = $00000005;
  GdPictureInterpolationMode_HighQualityBilinear = $00000006;
  GdPictureInterpolationMode_HighQualityBicubic = $00000007;

// Constants for enum GdPicturePixelFormat
type
  GdPicturePixelFormat = TOleEnum;
const
  GdPicturePixelFormat_PixelFormatAuto = $FFFFFFFE;
  GdPicturePixelFormat_PixelFormatUnknown = $FFFFFFFF;
  GdPicturePixelFormat_PixelFormat1bppIndexed = $00000000;
  GdPicturePixelFormat_PixelFormat4bppIndexed = $00000001;
  GdPicturePixelFormat_PixelFormat8bppIndexed = $00000002;
  GdPicturePixelFormat_PixelFormat16bppArgb1555 = $00000003;
  GdPicturePixelFormat_PixelFormat16bppGrayScale = $00000004;
  GdPicturePixelFormat_PixelFormat16bppRgb555 = $00000005;
  GdPicturePixelFormat_PixelFormat16bppRgb565 = $00000006;
  GdPicturePixelFormat_PixelFormat24bppBGR = $00000007;
  GdPicturePixelFormat_PixelFormat32bppBGRA = $00000008;
  GdPicturePixelFormat_PixelFormat32bppBGR = $00000009;
  GdPicturePixelFormat_PixelFormat32bppPBGRA = $0000000A;
  GdPicturePixelFormat_PixelFormat32bppCMYK = $0000000B;
  GdPicturePixelFormat_PixelFormat48bppRgb = $0000000C;
  GdPicturePixelFormat_PixelFormat64bppArgb = $0000000D;
  GdPicturePixelFormat_PixelFormat64bppPArgb = $0000000E;
  GdPicturePixelFormat_PixelFormat40bppCMYKA = $0000000F;
  GdPicturePixelFormat_PixelFormat64bppCMYK16 = $00000010;
  GdPicturePixelFormat_PixelFormat72bppCMYKA16 = $00000011;

// Constants for enum TrueTypeFontStyle
type
  TrueTypeFontStyle = TOleEnum;
const
  TrueTypeFontStyle_Regular = $00000000;
  TrueTypeFontStyle_Bold = $00000001;
  TrueTypeFontStyle_Italic = $00000002;
  TrueTypeFontStyle_Underline = $00000004;
  TrueTypeFontStyle_Outline = $00000008;
  TrueTypeFontStyle_Shadow = $00000010;
  TrueTypeFontStyle_Condensed = $00000020;
  TrueTypeFontStyle_Extended = $00000040;

// Constants for enum GdPictureDashStyle
type
  GdPictureDashStyle = TOleEnum;
const
  GdPictureDashStyle_Solid = $00000000;
  GdPictureDashStyle_Dash = $00000001;
  GdPictureDashStyle_Dot = $00000002;
  GdPictureDashStyle_DashDot = $00000003;
  GdPictureDashStyle_DashDotDot = $00000004;

// Constants for enum GdPictureLineCap
type
  GdPictureLineCap = TOleEnum;
const
  GdPictureLineCap_Flat = $00000000;
  GdPictureLineCap_Round = $00000001;
  GdPictureLineCap_Square = $00000002;

// Constants for enum GdPictureLineJoin
type
  GdPictureLineJoin = TOleEnum;
const
  GdPictureLineJoin_Miter = $00000000;
  GdPictureLineJoin_Round = $00000001;
  GdPictureLineJoin_Bevel = $00000002;

// Constants for enum GdPictureStringAlignment
type
  GdPictureStringAlignment = TOleEnum;
const
  GdPictureStringAlignment_Near = $00000000;
  GdPictureStringAlignment_Center = $00000001;
  GdPictureStringAlignment_Far = $00000002;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  IAnnotationEditor = interface;
  IAnnotationEditorDisp = dispinterface;
  __AnnotationEditor = dispinterface;
  _OnDisposeEventHandler = interface;
  _OnDisposeEventHandlerDisp = dispinterface;
  _PropertyChangedEventHandler = interface;
  _PropertyChangedEventHandlerDisp = dispinterface;
  IAnnotationManager = interface;
  IAnnotationManagerDisp = dispinterface;
  __AnnotationManager = dispinterface;
  _SavingProgressEventHandler = interface;
  _SavingProgressEventHandlerDisp = dispinterface;
  IBookmarksTree = interface;
  IBookmarksTreeDisp = dispinterface;
  __BookmarksTree = dispinterface;
  _NodeSelectedEventHandler = interface;
  _NodeSelectedEventHandlerDisp = dispinterface;
  IGdPictureDocumentConverter = interface;
  IGdPictureDocumentConverterDisp = dispinterface;
  IGdPictureDocumentUtilities = interface;
  IGdPictureDocumentUtilitiesDisp = dispinterface;
  IGdPictureImaging = interface;
  IGdPictureImagingDisp = dispinterface;
  _TwainImagePreviewEventHandler = interface;
  _TwainImagePreviewEventHandlerDisp = dispinterface;
  IGdPictureOCR = interface;
  IGdPictureOCRDisp = dispinterface;
  ISpreadsheetOptions = interface;
  ISpreadsheetOptionsDisp = dispinterface;
  IGdPicturePDF = interface;
  IGdPicturePDFDisp = dispinterface;
  __GdPicturePDF = dispinterface;
  _BeforePdfPrintPageEventHandler = interface;
  _BeforePdfPrintPageEventHandlerDisp = dispinterface;
  _AfterPdfPrintPageEventHandler = interface;
  _AfterPdfPrintPageEventHandlerDisp = dispinterface;
  _ExternalOcrPageRequestEventHandler = interface;
  _ExternalOcrPageRequestEventHandlerDisp = dispinterface;
  _OcrPagesProgressEventHandler = interface;
  _OcrPagesProgressEventHandlerDisp = dispinterface;
  _BeforePageOcrEventHandler = interface;
  _BeforePageOcrEventHandlerDisp = dispinterface;
  _PageBitmapOcrReadyEventHandler = interface;
  _PageBitmapOcrReadyEventHandlerDisp = dispinterface;
  _OcrPagesDoneEventHandler = interface;
  _OcrPagesDoneEventHandlerDisp = dispinterface;
  IPdfOcrOptions = interface;
  IPdfOcrOptionsDisp = dispinterface;
  ISmartRedactionOptions = interface;
  ISmartRedactionOptionsDisp = dispinterface;
  IGdPicturePDFReducer = interface;
  IGdPicturePDFReducerDisp = dispinterface;
  IGdPictureSegmenter = interface;
  IGdPictureSegmenterDisp = dispinterface;
  IGdViewer = interface;
  IGdViewerDisp = dispinterface;
  __GdViewer = dispinterface;
  _ViewerDoubleClickEventHandler = interface;
  _ViewerDoubleClickEventHandlerDisp = dispinterface;
  _ViewerMouseWheelEventHandler = interface;
  _ViewerMouseWheelEventHandlerDisp = dispinterface;
  _ViewerClickEventHandler = interface;
  _ViewerClickEventHandlerDisp = dispinterface;
  _ViewerMouseUpEventHandler = interface;
  _ViewerMouseUpEventHandlerDisp = dispinterface;
  _ViewerMouseDownEventHandler = interface;
  _ViewerMouseDownEventHandlerDisp = dispinterface;
  _ViewerMouseMoveEventHandler = interface;
  _ViewerMouseMoveEventHandlerDisp = dispinterface;
  _ViewerKeyUpEventHandler = interface;
  _ViewerKeyUpEventHandlerDisp = dispinterface;
  _ViewerKeyDownEventHandler = interface;
  _ViewerKeyDownEventHandlerDisp = dispinterface;
  _ViewerKeyPressEventHandler = interface;
  _ViewerKeyPressEventHandlerDisp = dispinterface;
  _AnnotationTextBoxKeyDownEventHandler = interface;
  _AnnotationTextBoxKeyDownEventHandlerDisp = dispinterface;
  _AnnotationTextBoxLostFocusEventHandler = interface;
  _AnnotationTextBoxLostFocusEventHandlerDisp = dispinterface;
  _DropFileEventHandler = interface;
  _DropFileEventHandlerDisp = dispinterface;
  _AnnotationStartEditingTextEventHandler = interface;
  _AnnotationStartEditingTextEventHandlerDisp = dispinterface;
  _AnnotationEndEditingTextEventHandler = interface;
  _AnnotationEndEditingTextEventHandlerDisp = dispinterface;
  _AnnotationSelectedEventHandler = interface;
  _AnnotationSelectedEventHandlerDisp = dispinterface;
  _AnnotationClickedEventHandler = interface;
  _AnnotationClickedEventHandlerDisp = dispinterface;
  _BeforeAnnotationAddedByUserEventHandler = interface;
  _BeforeAnnotationAddedByUserEventHandlerDisp = dispinterface;
  _AnnotationAddedByUserEventHandler = interface;
  _AnnotationAddedByUserEventHandlerDisp = dispinterface;
  _AnnotationRotatedEventHandler = interface;
  _AnnotationRotatedEventHandlerDisp = dispinterface;
  _AnnotationMovedEventHandler = interface;
  _AnnotationMovedEventHandlerDisp = dispinterface;
  _AnnotationResizedEventHandler = interface;
  _AnnotationResizedEventHandlerDisp = dispinterface;
  _PdfPasswordRequestEventHandler = interface;
  _PdfPasswordRequestEventHandlerDisp = dispinterface;
  _PdfCertificateRequestEventHandler = interface;
  _PdfCertificateRequestEventHandlerDisp = dispinterface;
  _PdfFileNavigationEventHandler = interface;
  _PdfFileNavigationEventHandlerDisp = dispinterface;
  _PdfLaunchActionEventHandler = interface;
  _PdfLaunchActionEventHandlerDisp = dispinterface;
  _PdfUriNavigationEventHandler = interface;
  _PdfUriNavigationEventHandlerDisp = dispinterface;
  _BeforePrintPageEventHandler = interface;
  _BeforePrintPageEventHandlerDisp = dispinterface;
  _AfterPrintPageEventHandler = interface;
  _AfterPrintPageEventHandlerDisp = dispinterface;
  _DataReceivedEventHandler = interface;
  _DataReceivedEventHandlerDisp = dispinterface;
  _TransferEndedEventHandler = interface;
  _TransferEndedEventHandlerDisp = dispinterface;
  _AfterZoomChangeEventHandler = interface;
  _AfterZoomChangeEventHandlerDisp = dispinterface;
  _BeforeZoomChangeEventHandler = interface;
  _BeforeZoomChangeEventHandlerDisp = dispinterface;
  _ScrollViewerEventHandler = interface;
  _ScrollViewerEventHandlerDisp = dispinterface;
  _RectEditedByUserEventHandler = interface;
  _RectEditedByUserEventHandlerDisp = dispinterface;
  _RegionEditedByUserEventHandler = interface;
  _RegionEditedByUserEventHandlerDisp = dispinterface;
  _RegionMovedByUserEventHandler = interface;
  _RegionMovedByUserEventHandlerDisp = dispinterface;
  _RegionResizedByUserEventHandler = interface;
  _RegionResizedByUserEventHandlerDisp = dispinterface;
  _RegionSelectedByUserEventHandler = interface;
  _RegionSelectedByUserEventHandlerDisp = dispinterface;
  _RotationEventHandler = interface;
  _RotationEventHandlerDisp = dispinterface;
  _BeforeRotationEventHandler = interface;
  _BeforeRotationEventHandlerDisp = dispinterface;
  _PageChangedEventHandler = interface;
  _PageChangedEventHandlerDisp = dispinterface;
  _BeforeDocumentChangeEventHandler = interface;
  _BeforeDocumentChangeEventHandlerDisp = dispinterface;
  _AfterDocumentChangeEventHandler = interface;
  _AfterDocumentChangeEventHandlerDisp = dispinterface;
  _DocumentClosedEventHandler = interface;
  _DocumentClosedEventHandlerDisp = dispinterface;
  _BeforeDocumentClosedEventHandler = interface;
  _BeforeDocumentClosedEventHandlerDisp = dispinterface;
  _PageDisplayedEventHandler = interface;
  _PageDisplayedEventHandlerDisp = dispinterface;
  _ClickMenuEventHandler = interface;
  _ClickMenuEventHandlerDisp = dispinterface;
  ILicenseManager = interface;
  ILicenseManagerDisp = dispinterface;
  IPDFReducerConfiguration = interface;
  IPDFReducerConfigurationDisp = dispinterface;
  IThumbnailEx = interface;
  IThumbnailExDisp = dispinterface;
  __ThumbnailEx = dispinterface;
  _ControlDoubleClickEventHandler = interface;
  _ControlDoubleClickEventHandlerDisp = dispinterface;
  _ControlMouseWheelEventHandler = interface;
  _ControlMouseWheelEventHandlerDisp = dispinterface;
  _ControlClickEventHandler = interface;
  _ControlClickEventHandlerDisp = dispinterface;
  _ControlMouseUpEventHandler = interface;
  _ControlMouseUpEventHandlerDisp = dispinterface;
  _ControlMouseDownEventHandler = interface;
  _ControlMouseDownEventHandlerDisp = dispinterface;
  _ControlMouseMoveEventHandler = interface;
  _ControlMouseMoveEventHandlerDisp = dispinterface;
  _ControlKeyUpEventHandler = interface;
  _ControlKeyUpEventHandlerDisp = dispinterface;
  _ControlKeyDownEventHandler = interface;
  _ControlKeyDownEventHandlerDisp = dispinterface;
  _ControlKeyPressEventHandler = interface;
  _ControlKeyPressEventHandlerDisp = dispinterface;
  _ScrollEventHandler = interface;
  _ScrollEventHandlerDisp = dispinterface;
  _OnAllItemsLoadedEventHandler = interface;
  _OnAllItemsLoadedEventHandlerDisp = dispinterface;
  _ItemCheckedEventHandler = interface;
  _ItemCheckedEventHandlerDisp = dispinterface;
  _ItemClickedEventHandler = interface;
  _ItemClickedEventHandlerDisp = dispinterface;
  _ItemDoubleClickedEventHandler = interface;
  _ItemDoubleClickedEventHandlerDisp = dispinterface;
  _ItemSelectionChangedEventHandler = interface;
  _ItemSelectionChangedEventHandlerDisp = dispinterface;
  _ItemMovedEventHandler = interface;
  _ItemMovedEventHandlerDisp = dispinterface;
  _FileTypeNotSupportedEventHandler = interface;
  _FileTypeNotSupportedEventHandlerDisp = dispinterface;
  _GdPictureEventsHandler = interface;
  _GdPictureEventsHandlerDisp = dispinterface;
  _AfterSubstitutedFontArgs = interface;
  _AfterSubstitutedFontArgsDisp = dispinterface;
  _BeforeAlternativeFontLookupArgs = interface;
  _BeforeAlternativeFontLookupArgsDisp = dispinterface;
  _Annotation = interface;
  _AnnotationDisp = dispinterface;
  _AnnotationComment = interface;
  _AnnotationCommentDisp = dispinterface;
  _AnnotationConnectedLines = interface;
  _AnnotationConnectedLinesDisp = dispinterface;
  _AnnotationPolygon = interface;
  _AnnotationPolygonDisp = dispinterface;
  _AnnotationCustom = interface;
  _AnnotationCustomDisp = dispinterface;
  _AnnotationEllipse = interface;
  _AnnotationEllipseDisp = dispinterface;
  _AnnotationEmbeddedImage = interface;
  _AnnotationEmbeddedImageDisp = dispinterface;
  _AnnotationFreeHand = interface;
  _AnnotationFreeHandDisp = dispinterface;
  _AnnotationFreeHandHighlighter = interface;
  _AnnotationFreeHandHighlighterDisp = dispinterface;
  _AnnotationFreeHandPolygon = interface;
  _AnnotationFreeHandPolygonDisp = dispinterface;
  _AnnotationLine = interface;
  _AnnotationLineDisp = dispinterface;
  _AnnotationLineArrow = interface;
  _AnnotationLineArrowDisp = dispinterface;
  _AnnotationLink = interface;
  _AnnotationLinkDisp = dispinterface;
  _AnnotationRubberStamp = interface;
  _AnnotationRubberStampDisp = dispinterface;
  _AnnotationPolyRuler = interface;
  _AnnotationPolyRulerDisp = dispinterface;
  _AnnotationRectangle = interface;
  _AnnotationRectangleDisp = dispinterface;
  _AnnotationRectangleHighlighter = interface;
  _AnnotationRectangleHighlighterDisp = dispinterface;
  _AnnotationRedaction = interface;
  _AnnotationRedactionDisp = dispinterface;
  _AnnotationRuler = interface;
  _AnnotationRulerDisp = dispinterface;
  _AnnotationStickyNote = interface;
  _AnnotationStickyNoteDisp = dispinterface;
  _AnnotationText = interface;
  _AnnotationTextDisp = dispinterface;
  _GdPictureRectangle = interface;
  _GdPictureRectangleDisp = dispinterface;
  _GdPictureRectangleF = interface;
  _GdPictureRectangleFDisp = dispinterface;
  _OnDisposeEventHandler_2 = interface;
  _OnDisposeEventHandler_2Disp = dispinterface;
  _OnDisposeEventHandler_3 = interface;
  _OnDisposeEventHandler_3Disp = dispinterface;
  _SavingProgressEventHandler_2 = interface;
  _SavingProgressEventHandler_2Disp = dispinterface;
  _OnDisposeEventHandler_4 = interface;
  _OnDisposeEventHandler_4Disp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  GdPictureDocumentConverter = IGdPictureDocumentConverter;
  GdPictureDocumentUtilities = IGdPictureDocumentUtilities;
  GdPictureImaging = IGdPictureImaging;
  GdPictureOCR = IGdPictureOCR;
  SpreadsheetOptions = ISpreadsheetOptions;
  PdfOcrOptions = IPdfOcrOptions;
  SmartRedactionOptions = ISmartRedactionOptions;
  GdPicturePDFReducer = IGdPicturePDFReducer;
  GdPictureSegmenter = IGdPictureSegmenter;
  LicenseManager = ILicenseManager;
  PDFReducerConfiguration = IPDFReducerConfiguration;
  AnnotationEditor = IAnnotationEditor;
  GdPicturePDF = IGdPicturePDF;
  AnnotationManager = IAnnotationManager;
  BookmarksTree = IBookmarksTree;
  ThumbnailEx = IThumbnailEx;
  GdViewer = IGdViewer;
  OnDisposeEventHandler = _OnDisposeEventHandler;
  PropertyChangedEventHandler = _PropertyChangedEventHandler;
  SavingProgressEventHandler = _SavingProgressEventHandler;
  OnDisposeEventHandler_2 = _OnDisposeEventHandler_2;
  NodeSelectedEventHandler = _NodeSelectedEventHandler;
  TwainImagePreviewEventHandler = _TwainImagePreviewEventHandler;
  BeforePdfPrintPageEventHandler = _BeforePdfPrintPageEventHandler;
  AfterPdfPrintPageEventHandler = _AfterPdfPrintPageEventHandler;
  ExternalOcrPageRequestEventHandler = _ExternalOcrPageRequestEventHandler;
  OcrPagesProgressEventHandler = _OcrPagesProgressEventHandler;
  BeforePageOcrEventHandler = _BeforePageOcrEventHandler;
  PageBitmapOcrReadyEventHandler = _PageBitmapOcrReadyEventHandler;
  OcrPagesDoneEventHandler = _OcrPagesDoneEventHandler;
  ViewerDoubleClickEventHandler = _ViewerDoubleClickEventHandler;
  ViewerMouseWheelEventHandler = _ViewerMouseWheelEventHandler;
  ViewerClickEventHandler = _ViewerClickEventHandler;
  ViewerMouseUpEventHandler = _ViewerMouseUpEventHandler;
  ViewerMouseDownEventHandler = _ViewerMouseDownEventHandler;
  ViewerMouseMoveEventHandler = _ViewerMouseMoveEventHandler;
  ViewerKeyUpEventHandler = _ViewerKeyUpEventHandler;
  ViewerKeyDownEventHandler = _ViewerKeyDownEventHandler;
  ViewerKeyPressEventHandler = _ViewerKeyPressEventHandler;
  OnDisposeEventHandler_3 = _OnDisposeEventHandler_3;
  AnnotationTextBoxKeyDownEventHandler = _AnnotationTextBoxKeyDownEventHandler;
  AnnotationTextBoxLostFocusEventHandler = _AnnotationTextBoxLostFocusEventHandler;
  DropFileEventHandler = _DropFileEventHandler;
  SavingProgressEventHandler_2 = _SavingProgressEventHandler_2;
  AnnotationStartEditingTextEventHandler = _AnnotationStartEditingTextEventHandler;
  AnnotationEndEditingTextEventHandler = _AnnotationEndEditingTextEventHandler;
  AnnotationSelectedEventHandler = _AnnotationSelectedEventHandler;
  AnnotationClickedEventHandler = _AnnotationClickedEventHandler;
  BeforeAnnotationAddedByUserEventHandler = _BeforeAnnotationAddedByUserEventHandler;
  AnnotationAddedByUserEventHandler = _AnnotationAddedByUserEventHandler;
  AnnotationRotatedEventHandler = _AnnotationRotatedEventHandler;
  AnnotationMovedEventHandler = _AnnotationMovedEventHandler;
  AnnotationResizedEventHandler = _AnnotationResizedEventHandler;
  PdfPasswordRequestEventHandler = _PdfPasswordRequestEventHandler;
  PdfCertificateRequestEventHandler = _PdfCertificateRequestEventHandler;
  PdfFileNavigationEventHandler = _PdfFileNavigationEventHandler;
  PdfLaunchActionEventHandler = _PdfLaunchActionEventHandler;
  PdfUriNavigationEventHandler = _PdfUriNavigationEventHandler;
  BeforePrintPageEventHandler = _BeforePrintPageEventHandler;
  AfterPrintPageEventHandler = _AfterPrintPageEventHandler;
  DataReceivedEventHandler = _DataReceivedEventHandler;
  TransferEndedEventHandler = _TransferEndedEventHandler;
  AfterZoomChangeEventHandler = _AfterZoomChangeEventHandler;
  BeforeZoomChangeEventHandler = _BeforeZoomChangeEventHandler;
  ScrollViewerEventHandler = _ScrollViewerEventHandler;
  RectEditedByUserEventHandler = _RectEditedByUserEventHandler;
  RegionEditedByUserEventHandler = _RegionEditedByUserEventHandler;
  RegionMovedByUserEventHandler = _RegionMovedByUserEventHandler;
  RegionResizedByUserEventHandler = _RegionResizedByUserEventHandler;
  RegionSelectedByUserEventHandler = _RegionSelectedByUserEventHandler;
  RotationEventHandler = _RotationEventHandler;
  BeforeRotationEventHandler = _BeforeRotationEventHandler;
  PageChangedEventHandler = _PageChangedEventHandler;
  BeforeDocumentChangeEventHandler = _BeforeDocumentChangeEventHandler;
  AfterDocumentChangeEventHandler = _AfterDocumentChangeEventHandler;
  DocumentClosedEventHandler = _DocumentClosedEventHandler;
  BeforeDocumentClosedEventHandler = _BeforeDocumentClosedEventHandler;
  PageDisplayedEventHandler = _PageDisplayedEventHandler;
  ClickMenuEventHandler = _ClickMenuEventHandler;
  OnDisposeEventHandler_4 = _OnDisposeEventHandler_4;
  ControlDoubleClickEventHandler = _ControlDoubleClickEventHandler;
  ControlMouseWheelEventHandler = _ControlMouseWheelEventHandler;
  ControlClickEventHandler = _ControlClickEventHandler;
  ControlMouseUpEventHandler = _ControlMouseUpEventHandler;
  ControlMouseDownEventHandler = _ControlMouseDownEventHandler;
  ControlMouseMoveEventHandler = _ControlMouseMoveEventHandler;
  ControlKeyUpEventHandler = _ControlKeyUpEventHandler;
  ControlKeyDownEventHandler = _ControlKeyDownEventHandler;
  ControlKeyPressEventHandler = _ControlKeyPressEventHandler;
  ScrollEventHandler = _ScrollEventHandler;
  OnAllItemsLoadedEventHandler = _OnAllItemsLoadedEventHandler;
  ItemCheckedEventHandler = _ItemCheckedEventHandler;
  ItemClickedEventHandler = _ItemClickedEventHandler;
  ItemDoubleClickedEventHandler = _ItemDoubleClickedEventHandler;
  ItemSelectionChangedEventHandler = _ItemSelectionChangedEventHandler;
  ItemMovedEventHandler = _ItemMovedEventHandler;
  FileTypeNotSupportedEventHandler = _FileTypeNotSupportedEventHandler;
  GdPictureEventsHandler = _GdPictureEventsHandler;
  AfterSubstitutedFontArgs = _AfterSubstitutedFontArgs;
  BeforeAlternativeFontLookupArgs = _BeforeAlternativeFontLookupArgs;
  Annotation = _Annotation;
  AnnotationComment = _AnnotationComment;
  AnnotationConnectedLines = _AnnotationConnectedLines;
  AnnotationPolygon = _AnnotationPolygon;
  AnnotationCustom = _AnnotationCustom;
  AnnotationEllipse = _AnnotationEllipse;
  AnnotationEmbeddedImage = _AnnotationEmbeddedImage;
  AnnotationFreeHand = _AnnotationFreeHand;
  AnnotationFreeHandHighlighter = _AnnotationFreeHandHighlighter;
  AnnotationFreeHandPolygon = _AnnotationFreeHandPolygon;
  AnnotationLine = _AnnotationLine;
  AnnotationLineArrow = _AnnotationLineArrow;
  AnnotationLink = _AnnotationLink;
  AnnotationRubberStamp = _AnnotationRubberStamp;
  AnnotationPolyRuler = _AnnotationPolyRuler;
  AnnotationRectangle = _AnnotationRectangle;
  AnnotationRectangleHighlighter = _AnnotationRectangleHighlighter;
  AnnotationRedaction = _AnnotationRedaction;
  AnnotationRuler = _AnnotationRuler;
  AnnotationStickyNote = _AnnotationStickyNote;
  AnnotationText = _AnnotationText;
  GdPictureRectangle = _GdPictureRectangle;
  GdPictureRectangleF = _GdPictureRectangleF;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
{$ALIGN 1}
  GdPictureColor = record
    b: Byte;
    G: Byte;
    R: Byte;
    a: Byte;
  end;

  GdPicturePoint = record
    X: Integer;
    Y: Integer;
  end;

  GdPicturePointF = record
    X: Single;
    Y: Single;
  end;


// *********************************************************************//
// Interface: IAnnotationEditor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CBF041E8-7CFC-4389-9122-809AAA85BE8B}
// *********************************************************************//
  IAnnotationEditor = interface(IDispatch)
    ['{CBF041E8-7CFC-4389-9122-809AAA85BE8B}']
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRetVal: Integer); safecall;
    procedure Dispose; safecall;
    procedure InitFromAnnotationManager(const AnnotationManager: IAnnotationManager); safecall;
    procedure LoadFromGdViewer(GdViewer: OleVariant); safecall;
    procedure Refresh; safecall;
    procedure ReleaseEventsTarget; safecall;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
  end;

// *********************************************************************//
// DispIntf:  IAnnotationEditorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CBF041E8-7CFC-4389-9122-809AAA85BE8B}
// *********************************************************************//
  IAnnotationEditorDisp = dispinterface
    ['{CBF041E8-7CFC-4389-9122-809AAA85BE8B}']
    property BackColor: Integer dispid 1;
    procedure Dispose; dispid 2;
    procedure InitFromAnnotationManager(const AnnotationManager: IAnnotationManager); dispid 3;
    procedure LoadFromGdViewer(GdViewer: OleVariant); dispid 4;
    procedure Refresh; dispid 5;
    procedure ReleaseEventsTarget; dispid 6;
  end;

// *********************************************************************//
// DispIntf:  __AnnotationEditor
// Flags:     (4096) Dispatchable
// GUID:      {69CD38B0-3CA1-48D3-B1AA-21EBB9C78932}
// *********************************************************************//
  __AnnotationEditor = dispinterface
    ['{69CD38B0-3CA1-48D3-B1AA-21EBB9C78932}']
    procedure PropertyChanged(const PropertyName: WideString; const Reserved1: WideString; 
                              const Reserved2: WideString; const Reserved3: WideString); dispid 1;
    procedure OnDispose; dispid 2;
  end;

// *********************************************************************//
// Interface: _OnDisposeEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B2149EA7-B58E-378B-8E52-70645A0BEC94}
// *********************************************************************//
  _OnDisposeEventHandler = interface(IDispatch)
    ['{B2149EA7-B58E-378B-8E52-70645A0BEC94}']
  end;

// *********************************************************************//
// DispIntf:  _OnDisposeEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B2149EA7-B58E-378B-8E52-70645A0BEC94}
// *********************************************************************//
  _OnDisposeEventHandlerDisp = dispinterface
    ['{B2149EA7-B58E-378B-8E52-70645A0BEC94}']
  end;

// *********************************************************************//
// Interface: _PropertyChangedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {32D44884-99CC-3154-9F83-788F6C375F49}
// *********************************************************************//
  _PropertyChangedEventHandler = interface(IDispatch)
    ['{32D44884-99CC-3154-9F83-788F6C375F49}']
  end;

// *********************************************************************//
// DispIntf:  _PropertyChangedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {32D44884-99CC-3154-9F83-788F6C375F49}
// *********************************************************************//
  _PropertyChangedEventHandlerDisp = dispinterface
    ['{32D44884-99CC-3154-9F83-788F6C375F49}']
  end;

// *********************************************************************//
// Interface: IAnnotationManager
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {664D5B33-C2CC-4D66-94F8-E8E11FA39242}
// *********************************************************************//
  IAnnotationManager = interface(IDispatch)
    ['{664D5B33-C2CC-4D66-94F8-E8E11FA39242}']
    function Get_PageCount: Integer; safecall;
    function Get_CurrentPage: Integer; safecall;
    function AddAnnotationFromXML(const XML: WideString): _Annotation; safecall;
    function AddCommentAnnot(const PreviousGuid: WideString; Left: Single; Top: Single; 
                             Width: Single; Height: Single): _AnnotationComment; safecall;
    function AddEllipseAnnot(BorderColor: Integer; Left: Single; Top: Single; Width: Single; 
                             Height: Single): _AnnotationEllipse; safecall;
    function AddEmbeddedImageAnnot(const ImagePath: WideString; Left: Single; Top: Single; 
                                   Width: Single; Height: Single): _AnnotationEmbeddedImage; safecall;
    function AddEmbeddedImageAnnotFromBase64(const Base64Image: WideString; Left: Single; 
                                             Top: Single; Width: Single; Height: Single): _AnnotationEmbeddedImage; safecall;
    function AddEmbeddedImageAnnot_2(ImageID: Integer; Left: Single; Top: Single; Width: Single; 
                                     Height: Single): _AnnotationEmbeddedImage; safecall;
    function AddLineAnnot(BorderColor: Integer; SrcLeft: Single; SrcTop: Single; DstLeft: Single; 
                          DstTop: Single): _AnnotationLine; safecall;
    function AddLineArrowAnnot(BorderColor: Integer; SrcLeft: Single; SrcTop: Single; 
                               DstLeft: Single; DstTop: Single): _AnnotationLineArrow; safecall;
    function AddLinkAnnot(Left: Single; Top: Single; Width: Single; Height: Single; 
                          const Text: WideString; const Link: WideString): _AnnotationLink; safecall;
    function AddRectangleAnnot(BorderColor: Integer; BackColor: Integer; Left: Single; Top: Single; 
                               Width: Single; Height: Single): _AnnotationRectangle; safecall;
    function AddRectangleHighlighterAnnot(BackColor: Integer; Left: Single; Top: Single; 
                                          Width: Single; Height: Single): _AnnotationRectangleHighlighter; safecall;
    function AddRubberStampAnnot(BorderColor: Integer; Left: Single; Top: Single; Width: Single; 
                                 Height: Single; const Text: WideString): _AnnotationRubberStamp; safecall;
    function AddRulerAnnot(BorderColor: Integer; SrcLeft: Single; SrcTop: Single; DstLeft: Single; 
                           DstTop: Single; MeasurementUnit: UnitMode): _AnnotationRuler; safecall;
    function AddStickyNoteAnnot(Left: Single; Top: Single; Width: Single; Height: Single; 
                                const Text: WideString): _AnnotationStickyNote; safecall;
    function AddTextAnnot(Left: Single; Top: Single; Width: Single; Height: Single; 
                          const Text: WideString): _AnnotationText; safecall;
    function ARGBI(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer; safecall;
    function BurnAnnotationsToPage(RemoveInitialAnnots: WordBool): GdPictureStatus; safecall;
    function BurnAnnotationsToPage_2(RemoveInitialAnnots: WordBool; Intent: GdPictureOutputIntent): GdPictureStatus; safecall;
    function BurnAnnotationsToPage_3(RemoveInitialAnnots: WordBool; VectorMode: WordBool): GdPictureStatus; safecall;
    function Close: GdPictureStatus; safecall;
    function DeleteAnnotation(AnnotationIdx: Integer): GdPictureStatus; safecall;
    procedure Dispose; safecall;
    function GetAnnotationCount: Integer; safecall;
    function GetAnnotationFlipState(AnnotationIdx: Integer; var FlipX: WordBool; var FlipY: WordBool): GdPictureStatus; safecall;
    function GetAnnotationFromIdx(AnnotationIdx: Integer): _Annotation; safecall;
    function GetAnnotationIdx(const Annot: _Annotation): Integer; safecall;
    function GetAnnotationPropertyValue(AnnotationIdx: Integer; const Name: WideString): OleVariant; safecall;
    function GetAnnotationType(AnnotationIdx: Integer): GdPictureAnnotationType; safecall;
    function GetAnnotationXML(AnnotationIdx: Integer): WideString; safecall;
    function GetFirstAnnotationCommentIdx(AnnotationIdx: Integer): Integer; safecall;
    function GetStat: GdPictureStatus; safecall;
    function InitFromFile(const Path: WideString): GdPictureStatus; safecall;
    function InitFromGdPictureImage(ImageID: Integer): GdPictureStatus; safecall;
    function InitFromGdPicturePDF(const PDF: IGdPicturePDF): GdPictureStatus; safecall;
    function InitFromGdViewer(Viewer: OleVariant): GdPictureStatus; safecall;
    function LoadAnnotationsFromXMP(const FilePath: WideString): GdPictureStatus; safecall;
    function LoadAnnotationsFromXMPBase64(const Content: WideString): GdPictureStatus; safecall;
    function RotateAnnotations(Angle: Integer): GdPictureStatus; safecall;
    function SaveAnnotationsToPage: GdPictureStatus; safecall;
    function SaveAnnotationsToXMP(const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAnnotationsToXMPBase64: WideString; safecall;
    function SaveAnnotationsToXMPBase64Ex: WideString; safecall;
    function SaveAnnotationsToXMPEx(const FilePath: WideString): GdPictureStatus; safecall;
    function SaveDocumentToJPEG(const FilePath: WideString; Quality: Integer): GdPictureStatus; safecall;
    function SaveDocumentToPDF(const FilePath: WideString): GdPictureStatus; safecall;
    function SaveDocumentToTIFF(const FilePath: WideString; Compression: TiffCompression): GdPictureStatus; safecall;
    function SelectPage(PageNo: Integer): GdPictureStatus; safecall;
    function SetAnnotationFlipState(AnnotationIdx: Integer; FlipX: WordBool; FlipY: WordBool): GdPictureStatus; safecall;
    function SetAnnotationPropertyValue(AnnotationIdx: Integer; const Name: WideString; 
                                        Value: OleVariant): GdPictureStatus; safecall;
    procedure ReleaseEventsTarget; safecall;
    property PageCount: Integer read Get_PageCount;
    property CurrentPage: Integer read Get_CurrentPage;
  end;

// *********************************************************************//
// DispIntf:  IAnnotationManagerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {664D5B33-C2CC-4D66-94F8-E8E11FA39242}
// *********************************************************************//
  IAnnotationManagerDisp = dispinterface
    ['{664D5B33-C2CC-4D66-94F8-E8E11FA39242}']
    property PageCount: Integer readonly dispid 1;
    property CurrentPage: Integer readonly dispid 2;
    function AddAnnotationFromXML(const XML: WideString): _Annotation; dispid 3;
    function AddCommentAnnot(const PreviousGuid: WideString; Left: Single; Top: Single; 
                             Width: Single; Height: Single): _AnnotationComment; dispid 4;
    function AddEllipseAnnot(BorderColor: Integer; Left: Single; Top: Single; Width: Single; 
                             Height: Single): _AnnotationEllipse; dispid 5;
    function AddEmbeddedImageAnnot(const ImagePath: WideString; Left: Single; Top: Single; 
                                   Width: Single; Height: Single): _AnnotationEmbeddedImage; dispid 6;
    function AddEmbeddedImageAnnotFromBase64(const Base64Image: WideString; Left: Single; 
                                             Top: Single; Width: Single; Height: Single): _AnnotationEmbeddedImage; dispid 7;
    function AddEmbeddedImageAnnot_2(ImageID: Integer; Left: Single; Top: Single; Width: Single; 
                                     Height: Single): _AnnotationEmbeddedImage; dispid 8;
    function AddLineAnnot(BorderColor: Integer; SrcLeft: Single; SrcTop: Single; DstLeft: Single; 
                          DstTop: Single): _AnnotationLine; dispid 9;
    function AddLineArrowAnnot(BorderColor: Integer; SrcLeft: Single; SrcTop: Single; 
                               DstLeft: Single; DstTop: Single): _AnnotationLineArrow; dispid 10;
    function AddLinkAnnot(Left: Single; Top: Single; Width: Single; Height: Single; 
                          const Text: WideString; const Link: WideString): _AnnotationLink; dispid 11;
    function AddRectangleAnnot(BorderColor: Integer; BackColor: Integer; Left: Single; Top: Single; 
                               Width: Single; Height: Single): _AnnotationRectangle; dispid 12;
    function AddRectangleHighlighterAnnot(BackColor: Integer; Left: Single; Top: Single; 
                                          Width: Single; Height: Single): _AnnotationRectangleHighlighter; dispid 13;
    function AddRubberStampAnnot(BorderColor: Integer; Left: Single; Top: Single; Width: Single; 
                                 Height: Single; const Text: WideString): _AnnotationRubberStamp; dispid 14;
    function AddRulerAnnot(BorderColor: Integer; SrcLeft: Single; SrcTop: Single; DstLeft: Single; 
                           DstTop: Single; MeasurementUnit: UnitMode): _AnnotationRuler; dispid 15;
    function AddStickyNoteAnnot(Left: Single; Top: Single; Width: Single; Height: Single; 
                                const Text: WideString): _AnnotationStickyNote; dispid 16;
    function AddTextAnnot(Left: Single; Top: Single; Width: Single; Height: Single; 
                          const Text: WideString): _AnnotationText; dispid 17;
    function ARGBI(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer; dispid 18;
    function BurnAnnotationsToPage(RemoveInitialAnnots: WordBool): GdPictureStatus; dispid 19;
    function BurnAnnotationsToPage_2(RemoveInitialAnnots: WordBool; Intent: GdPictureOutputIntent): GdPictureStatus; dispid 20;
    function BurnAnnotationsToPage_3(RemoveInitialAnnots: WordBool; VectorMode: WordBool): GdPictureStatus; dispid 21;
    function Close: GdPictureStatus; dispid 22;
    function DeleteAnnotation(AnnotationIdx: Integer): GdPictureStatus; dispid 23;
    procedure Dispose; dispid 24;
    function GetAnnotationCount: Integer; dispid 25;
    function GetAnnotationFlipState(AnnotationIdx: Integer; var FlipX: WordBool; var FlipY: WordBool): GdPictureStatus; dispid 26;
    function GetAnnotationFromIdx(AnnotationIdx: Integer): _Annotation; dispid 27;
    function GetAnnotationIdx(const Annot: _Annotation): Integer; dispid 28;
    function GetAnnotationPropertyValue(AnnotationIdx: Integer; const Name: WideString): OleVariant; dispid 29;
    function GetAnnotationType(AnnotationIdx: Integer): GdPictureAnnotationType; dispid 30;
    function GetAnnotationXML(AnnotationIdx: Integer): WideString; dispid 31;
    function GetFirstAnnotationCommentIdx(AnnotationIdx: Integer): Integer; dispid 32;
    function GetStat: GdPictureStatus; dispid 33;
    function InitFromFile(const Path: WideString): GdPictureStatus; dispid 34;
    function InitFromGdPictureImage(ImageID: Integer): GdPictureStatus; dispid 35;
    function InitFromGdPicturePDF(const PDF: IGdPicturePDF): GdPictureStatus; dispid 36;
    function InitFromGdViewer(Viewer: OleVariant): GdPictureStatus; dispid 37;
    function LoadAnnotationsFromXMP(const FilePath: WideString): GdPictureStatus; dispid 38;
    function LoadAnnotationsFromXMPBase64(const Content: WideString): GdPictureStatus; dispid 39;
    function RotateAnnotations(Angle: Integer): GdPictureStatus; dispid 40;
    function SaveAnnotationsToPage: GdPictureStatus; dispid 41;
    function SaveAnnotationsToXMP(const FilePath: WideString): GdPictureStatus; dispid 42;
    function SaveAnnotationsToXMPBase64: WideString; dispid 43;
    function SaveAnnotationsToXMPBase64Ex: WideString; dispid 44;
    function SaveAnnotationsToXMPEx(const FilePath: WideString): GdPictureStatus; dispid 45;
    function SaveDocumentToJPEG(const FilePath: WideString; Quality: Integer): GdPictureStatus; dispid 46;
    function SaveDocumentToPDF(const FilePath: WideString): GdPictureStatus; dispid 47;
    function SaveDocumentToTIFF(const FilePath: WideString; Compression: TiffCompression): GdPictureStatus; dispid 48;
    function SelectPage(PageNo: Integer): GdPictureStatus; dispid 49;
    function SetAnnotationFlipState(AnnotationIdx: Integer; FlipX: WordBool; FlipY: WordBool): GdPictureStatus; dispid 50;
    function SetAnnotationPropertyValue(AnnotationIdx: Integer; const Name: WideString; 
                                        Value: OleVariant): GdPictureStatus; dispid 51;
    procedure ReleaseEventsTarget; dispid 52;
  end;

// *********************************************************************//
// DispIntf:  __AnnotationManager
// Flags:     (4096) Dispatchable
// GUID:      {B12F8F5E-D424-40F7-91DA-9BE02520AAA9}
// *********************************************************************//
  __AnnotationManager = dispinterface
    ['{B12F8F5E-D424-40F7-91DA-9BE02520AAA9}']
    procedure SavingProgress(PageNo: Integer; PageCount: Integer); dispid 1;
  end;

// *********************************************************************//
// Interface: _SavingProgressEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0120955E-BC65-3769-B8CF-9D372AEA99F2}
// *********************************************************************//
  _SavingProgressEventHandler = interface(IDispatch)
    ['{0120955E-BC65-3769-B8CF-9D372AEA99F2}']
  end;

// *********************************************************************//
// DispIntf:  _SavingProgressEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0120955E-BC65-3769-B8CF-9D372AEA99F2}
// *********************************************************************//
  _SavingProgressEventHandlerDisp = dispinterface
    ['{0120955E-BC65-3769-B8CF-9D372AEA99F2}']
  end;

// *********************************************************************//
// Interface: IBookmarksTree
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {539F514E-E675-4BE1-86DC-1E5A8E904636}
// *********************************************************************//
  IBookmarksTree = interface(IDispatch)
    ['{539F514E-E675-4BE1-86DC-1E5A8E904636}']
    function Get_GdViewer: IGdViewer; safecall;
    procedure _Set_GdViewer(const pRetVal: IGdViewer); safecall;
    function Get_ItemHeight: Integer; safecall;
    procedure Set_ItemHeight(pRetVal: Integer); safecall;
    function Get_FontSize: Single; safecall;
    procedure Set_FontSize(pRetVal: Single); safecall;
    function Get_DisableZoomDestination: WordBool; safecall;
    procedure Set_DisableZoomDestination(pRetVal: WordBool); safecall;
    function Get_FontName: WideString; safecall;
    procedure Set_FontName(const pRetVal: WideString); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRetVal: Integer); safecall;
    procedure CollapseAll; safecall;
    procedure Dispose; safecall;
    procedure ExpandAll; safecall;
    procedure LoadFromGdViewer(GdViewer: OleVariant); safecall;
    procedure Refresh; safecall;
    procedure ReloadBookmarks; safecall;
    procedure SetDefaultText(StringID: Integer; const Text: WideString); safecall;
    function SetNodesBitmap(ImageID: Integer): GdPictureStatus; safecall;
    procedure ReleaseEventsTarget; safecall;
    function Get_AutoGenerate: WordBool; safecall;
    procedure Set_AutoGenerate(pRetVal: WordBool); safecall;
    function Get_RightToLeftLayout: WordBool; safecall;
    procedure Set_RightToLeftLayout(pRetVal: WordBool); safecall;
    property GdViewer: IGdViewer read Get_GdViewer write _Set_GdViewer;
    property ItemHeight: Integer read Get_ItemHeight write Set_ItemHeight;
    property FontSize: Single read Get_FontSize write Set_FontSize;
    property DisableZoomDestination: WordBool read Get_DisableZoomDestination write Set_DisableZoomDestination;
    property FontName: WideString read Get_FontName write Set_FontName;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property AutoGenerate: WordBool read Get_AutoGenerate write Set_AutoGenerate;
    property RightToLeftLayout: WordBool read Get_RightToLeftLayout write Set_RightToLeftLayout;
  end;

// *********************************************************************//
// DispIntf:  IBookmarksTreeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {539F514E-E675-4BE1-86DC-1E5A8E904636}
// *********************************************************************//
  IBookmarksTreeDisp = dispinterface
    ['{539F514E-E675-4BE1-86DC-1E5A8E904636}']
    property GdViewer: IGdViewer dispid 1;
    property ItemHeight: Integer dispid 2;
    property FontSize: Single dispid 3;
    property DisableZoomDestination: WordBool dispid 4;
    property FontName: WideString dispid 5;
    property BackColor: Integer dispid 6;
    procedure CollapseAll; dispid 7;
    procedure Dispose; dispid 8;
    procedure ExpandAll; dispid 9;
    procedure LoadFromGdViewer(GdViewer: OleVariant); dispid 10;
    procedure Refresh; dispid 11;
    procedure ReloadBookmarks; dispid 12;
    procedure SetDefaultText(StringID: Integer; const Text: WideString); dispid 13;
    function SetNodesBitmap(ImageID: Integer): GdPictureStatus; dispid 14;
    procedure ReleaseEventsTarget; dispid 15;
    property AutoGenerate: WordBool dispid 16;
    property RightToLeftLayout: WordBool dispid 17;
  end;

// *********************************************************************//
// DispIntf:  __BookmarksTree
// Flags:     (4096) Dispatchable
// GUID:      {BAF46C9E-C563-4436-9BAC-C029B7A18E0C}
// *********************************************************************//
  __BookmarksTree = dispinterface
    ['{BAF46C9E-C563-4436-9BAC-C029B7A18E0C}']
    procedure NodeSelected(const NodeText: WideString; PDFBookmarkID: Integer; 
                           var CancelAction: WordBool); dispid 1;
    procedure OnDispose; dispid 2;
  end;

// *********************************************************************//
// Interface: _NodeSelectedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0D0F7342-1A8A-3692-BBC0-210CF12D216A}
// *********************************************************************//
  _NodeSelectedEventHandler = interface(IDispatch)
    ['{0D0F7342-1A8A-3692-BBC0-210CF12D216A}']
  end;

// *********************************************************************//
// DispIntf:  _NodeSelectedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0D0F7342-1A8A-3692-BBC0-210CF12D216A}
// *********************************************************************//
  _NodeSelectedEventHandlerDisp = dispinterface
    ['{0D0F7342-1A8A-3692-BBC0-210CF12D216A}']
  end;

// *********************************************************************//
// Interface: IGdPictureDocumentConverter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {03EE6E3C-9F78-4EAE-BB91-5DB4D5D95CA7}
// *********************************************************************//
  IGdPictureDocumentConverter = interface(IDispatch)
    ['{03EE6E3C-9F78-4EAE-BB91-5DB4D5D95CA7}']
    function Get_DropGdPictureAnnotations: WordBool; safecall;
    procedure Set_DropGdPictureAnnotations(pRetVal: WordBool); safecall;
    function Get_LoadOnlyFirstPage: WordBool; safecall;
    procedure Set_LoadOnlyFirstPage(pRetVal: WordBool); safecall;
    function Get_RasterizationDPI: Single; safecall;
    procedure Set_RasterizationDPI(pRetVal: Single); safecall;
    function Get_PdfBitonalImageCompression: PdfCompression; safecall;
    procedure Set_PdfBitonalImageCompression(pRetVal: PdfCompression); safecall;
    function Get_PdfColorImageCompression: PdfCompression; safecall;
    procedure Set_PdfColorImageCompression(pRetVal: PdfCompression); safecall;
    function Get_PdfImageQuality: Integer; safecall;
    procedure Set_PdfImageQuality(pRetVal: Integer); safecall;
    function Get_PdfEnableLinearization: WordBool; safecall;
    procedure Set_PdfEnableLinearization(pRetVal: WordBool); safecall;
    function Get_DocxImageQuality: Integer; safecall;
    procedure Set_DocxImageQuality(pRetVal: Integer); safecall;
    function Get_PageRange: WideString; safecall;
    procedure Set_PageRange(const pRetVal: WideString); safecall;
    function CloseDocument: GdPictureStatus; safecall;
    procedure Dispose; safecall;
    function Get_JBIG2PMSThreshold: Single; safecall;
    procedure Set_JBIG2PMSThreshold(pRetVal: Single); safecall;
    function LoadFromFile(const FilePath: WideString; DocumentFormat: DocumentFormat): GdPictureStatus; safecall;
    function SaveAsDOCX(const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsPDF(const FilePath: WideString; Conformance: PdfConformance): GdPictureStatus; safecall;
    function SaveAsTIFF(const FilePath: WideString; TiffCompression: TiffCompression): GdPictureStatus; safecall;
    function Get_PdfEnableColorDetection: WordBool; safecall;
    procedure Set_PdfEnableColorDetection(pRetVal: WordBool); safecall;
    function Get_TxtPageWidth: Single; safecall;
    procedure Set_TxtPageWidth(pRetVal: Single); safecall;
    function Get_TxtPageHeight: Single; safecall;
    procedure Set_TxtPageHeight(pRetVal: Single); safecall;
    function Get_TxtPageMarginLeft: Single; safecall;
    procedure Set_TxtPageMarginLeft(pRetVal: Single); safecall;
    function Get_TxtPageMarginTop: Single; safecall;
    procedure Set_TxtPageMarginTop(pRetVal: Single); safecall;
    function Get_TxtPageMarginRight: Single; safecall;
    procedure Set_TxtPageMarginRight(pRetVal: Single); safecall;
    function Get_TxtPageMarginBottom: Single; safecall;
    procedure Set_TxtPageMarginBottom(pRetVal: Single); safecall;
    function Get_TxtHorizontalTextAlignment: TextAlignment; safecall;
    procedure Set_TxtHorizontalTextAlignment(pRetVal: TextAlignment); safecall;
    function Get_TxtFontSize: Single; safecall;
    procedure Set_TxtFontSize(pRetVal: Single); safecall;
    function Get_TxtFontFamily: WideString; safecall;
    procedure Set_TxtFontFamily(const pRetVal: WideString); safecall;
    function Get_TxtFontBold: WordBool; safecall;
    procedure Set_TxtFontBold(pRetVal: WordBool); safecall;
    function Get_TxtFontItalic: WordBool; safecall;
    procedure Set_TxtFontItalic(pRetVal: WordBool); safecall;
    function CombineToPDF(var InputFiles: PSafeArray; const DestFile: WideString; 
                          Conformance: PdfConformance): GdPictureStatus; safecall;
    function CombineToPDF_2(var InputFiles: PSafeArray; const OutputStream: IUnknown; 
                            Conformance: PdfConformance): GdPictureStatus; safecall;
    function SaveAsDOCX_2(const Stream: IUnknown): GdPictureStatus; safecall;
    function SaveAsPDF_2(const Stream: IUnknown; Conformance: PdfConformance): GdPictureStatus; safecall;
    function SaveAsTIFF_2(const Stream: IUnknown; TiffCompression: TiffCompression): GdPictureStatus; safecall;
    function LoadFromIStream(const Stream: IUnknown; DocumentFormat: DocumentFormat): GdPictureStatus; safecall;
    function Get_Author: WideString; safecall;
    procedure Set_Author(const pRetVal: WideString); safecall;
    function Get_Title: WideString; safecall;
    procedure Set_Title(const pRetVal: WideString); safecall;
    function Get_Subject: WideString; safecall;
    procedure Set_Subject(const pRetVal: WideString); safecall;
    function Get_Producer: WideString; safecall;
    procedure Set_Producer(const pRetVal: WideString); safecall;
    function Get_Metadata: WideString; safecall;
    procedure Set_Metadata(const pRetVal: WideString); safecall;
    function Get_Keywords: WideString; safecall;
    procedure Set_Keywords(const pRetVal: WideString); safecall;
    function Get_EnableICC: WordBool; safecall;
    procedure Set_EnableICC(pRetVal: WordBool); safecall;
    function Get_PdfUseDeflateOnJPEG: WordBool; safecall;
    procedure Set_PdfUseDeflateOnJPEG(pRetVal: WordBool); safecall;
    function Get_HtmlPageWidth: Single; safecall;
    procedure Set_HtmlPageWidth(pRetVal: Single); safecall;
    function Get_HtmlPageHeight: Single; safecall;
    procedure Set_HtmlPageHeight(pRetVal: Single); safecall;
    function Get_HtmlPageMarginLeft: Single; safecall;
    procedure Set_HtmlPageMarginLeft(pRetVal: Single); safecall;
    function Get_HtmlPageMarginTop: Single; safecall;
    procedure Set_HtmlPageMarginTop(pRetVal: Single); safecall;
    function Get_HtmlPageMarginRight: Single; safecall;
    procedure Set_HtmlPageMarginRight(pRetVal: Single); safecall;
    function Get_HtmlPageMarginBottom: Single; safecall;
    procedure Set_HtmlPageMarginBottom(pRetVal: Single); safecall;
    function LoadFromHttp(const HttpUri: WideString): GdPictureStatus; safecall;
    function Get_HtmlPreferCSSPageSize: WordBool; safecall;
    procedure Set_HtmlPreferCSSPageSize(pRetVal: WordBool); safecall;
    function GetPageCount: Integer; safecall;
    function SaveAsSVG(const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsSVG_2(const Stream: IUnknown): GdPictureStatus; safecall;
    function Get_TrackOfficeDocumentRevisions: WordBool; safecall;
    procedure Set_TrackOfficeDocumentRevisions(pRetVal: WordBool); safecall;
    function Get_SplitExcelSheetsIntoPages: WordBool; safecall;
    procedure Set_SplitExcelSheetsIntoPages(pRetVal: WordBool); safecall;
    function Get_RenderSheetHeadersAndFooters: WordBool; safecall;
    procedure Set_RenderSheetHeadersAndFooters(pRetVal: WordBool); safecall;
    property DropGdPictureAnnotations: WordBool read Get_DropGdPictureAnnotations write Set_DropGdPictureAnnotations;
    property LoadOnlyFirstPage: WordBool read Get_LoadOnlyFirstPage write Set_LoadOnlyFirstPage;
    property RasterizationDPI: Single read Get_RasterizationDPI write Set_RasterizationDPI;
    property PdfBitonalImageCompression: PdfCompression read Get_PdfBitonalImageCompression write Set_PdfBitonalImageCompression;
    property PdfColorImageCompression: PdfCompression read Get_PdfColorImageCompression write Set_PdfColorImageCompression;
    property PdfImageQuality: Integer read Get_PdfImageQuality write Set_PdfImageQuality;
    property PdfEnableLinearization: WordBool read Get_PdfEnableLinearization write Set_PdfEnableLinearization;
    property DocxImageQuality: Integer read Get_DocxImageQuality write Set_DocxImageQuality;
    property PageRange: WideString read Get_PageRange write Set_PageRange;
    property JBIG2PMSThreshold: Single read Get_JBIG2PMSThreshold write Set_JBIG2PMSThreshold;
    property PdfEnableColorDetection: WordBool read Get_PdfEnableColorDetection write Set_PdfEnableColorDetection;
    property TxtPageWidth: Single read Get_TxtPageWidth write Set_TxtPageWidth;
    property TxtPageHeight: Single read Get_TxtPageHeight write Set_TxtPageHeight;
    property TxtPageMarginLeft: Single read Get_TxtPageMarginLeft write Set_TxtPageMarginLeft;
    property TxtPageMarginTop: Single read Get_TxtPageMarginTop write Set_TxtPageMarginTop;
    property TxtPageMarginRight: Single read Get_TxtPageMarginRight write Set_TxtPageMarginRight;
    property TxtPageMarginBottom: Single read Get_TxtPageMarginBottom write Set_TxtPageMarginBottom;
    property TxtHorizontalTextAlignment: TextAlignment read Get_TxtHorizontalTextAlignment write Set_TxtHorizontalTextAlignment;
    property TxtFontSize: Single read Get_TxtFontSize write Set_TxtFontSize;
    property TxtFontFamily: WideString read Get_TxtFontFamily write Set_TxtFontFamily;
    property TxtFontBold: WordBool read Get_TxtFontBold write Set_TxtFontBold;
    property TxtFontItalic: WordBool read Get_TxtFontItalic write Set_TxtFontItalic;
    property Author: WideString read Get_Author write Set_Author;
    property Title: WideString read Get_Title write Set_Title;
    property Subject: WideString read Get_Subject write Set_Subject;
    property Producer: WideString read Get_Producer write Set_Producer;
    property Metadata: WideString read Get_Metadata write Set_Metadata;
    property Keywords: WideString read Get_Keywords write Set_Keywords;
    property EnableICC: WordBool read Get_EnableICC write Set_EnableICC;
    property PdfUseDeflateOnJPEG: WordBool read Get_PdfUseDeflateOnJPEG write Set_PdfUseDeflateOnJPEG;
    property HtmlPageWidth: Single read Get_HtmlPageWidth write Set_HtmlPageWidth;
    property HtmlPageHeight: Single read Get_HtmlPageHeight write Set_HtmlPageHeight;
    property HtmlPageMarginLeft: Single read Get_HtmlPageMarginLeft write Set_HtmlPageMarginLeft;
    property HtmlPageMarginTop: Single read Get_HtmlPageMarginTop write Set_HtmlPageMarginTop;
    property HtmlPageMarginRight: Single read Get_HtmlPageMarginRight write Set_HtmlPageMarginRight;
    property HtmlPageMarginBottom: Single read Get_HtmlPageMarginBottom write Set_HtmlPageMarginBottom;
    property HtmlPreferCSSPageSize: WordBool read Get_HtmlPreferCSSPageSize write Set_HtmlPreferCSSPageSize;
    property TrackOfficeDocumentRevisions: WordBool read Get_TrackOfficeDocumentRevisions write Set_TrackOfficeDocumentRevisions;
    property SplitExcelSheetsIntoPages: WordBool read Get_SplitExcelSheetsIntoPages write Set_SplitExcelSheetsIntoPages;
    property RenderSheetHeadersAndFooters: WordBool read Get_RenderSheetHeadersAndFooters write Set_RenderSheetHeadersAndFooters;
  end;

// *********************************************************************//
// DispIntf:  IGdPictureDocumentConverterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {03EE6E3C-9F78-4EAE-BB91-5DB4D5D95CA7}
// *********************************************************************//
  IGdPictureDocumentConverterDisp = dispinterface
    ['{03EE6E3C-9F78-4EAE-BB91-5DB4D5D95CA7}']
    property DropGdPictureAnnotations: WordBool dispid 1;
    property LoadOnlyFirstPage: WordBool dispid 2;
    property RasterizationDPI: Single dispid 3;
    property PdfBitonalImageCompression: PdfCompression dispid 4;
    property PdfColorImageCompression: PdfCompression dispid 5;
    property PdfImageQuality: Integer dispid 6;
    property PdfEnableLinearization: WordBool dispid 52;
    property DocxImageQuality: Integer dispid 7;
    property PageRange: WideString dispid 8;
    function CloseDocument: GdPictureStatus; dispid 9;
    procedure Dispose; dispid 10;
    property JBIG2PMSThreshold: Single dispid 53;
    function LoadFromFile(const FilePath: WideString; DocumentFormat: DocumentFormat): GdPictureStatus; dispid 11;
    function SaveAsDOCX(const FilePath: WideString): GdPictureStatus; dispid 12;
    function SaveAsPDF(const FilePath: WideString; Conformance: PdfConformance): GdPictureStatus; dispid 13;
    function SaveAsTIFF(const FilePath: WideString; TiffCompression: TiffCompression): GdPictureStatus; dispid 14;
    property PdfEnableColorDetection: WordBool dispid 15;
    property TxtPageWidth: Single dispid 16;
    property TxtPageHeight: Single dispid 17;
    property TxtPageMarginLeft: Single dispid 18;
    property TxtPageMarginTop: Single dispid 19;
    property TxtPageMarginRight: Single dispid 20;
    property TxtPageMarginBottom: Single dispid 21;
    property TxtHorizontalTextAlignment: TextAlignment dispid 22;
    property TxtFontSize: Single dispid 23;
    property TxtFontFamily: WideString dispid 24;
    property TxtFontBold: WordBool dispid 25;
    property TxtFontItalic: WordBool dispid 26;
    function CombineToPDF(var InputFiles: {??PSafeArray}OleVariant; const DestFile: WideString; 
                          Conformance: PdfConformance): GdPictureStatus; dispid 27;
    function CombineToPDF_2(var InputFiles: {??PSafeArray}OleVariant; const OutputStream: IUnknown; 
                            Conformance: PdfConformance): GdPictureStatus; dispid 28;
    function SaveAsDOCX_2(const Stream: IUnknown): GdPictureStatus; dispid 29;
    function SaveAsPDF_2(const Stream: IUnknown; Conformance: PdfConformance): GdPictureStatus; dispid 30;
    function SaveAsTIFF_2(const Stream: IUnknown; TiffCompression: TiffCompression): GdPictureStatus; dispid 31;
    function LoadFromIStream(const Stream: IUnknown; DocumentFormat: DocumentFormat): GdPictureStatus; dispid 32;
    property Author: WideString dispid 33;
    property Title: WideString dispid 34;
    property Subject: WideString dispid 35;
    property Producer: WideString dispid 36;
    property Metadata: WideString dispid 37;
    property Keywords: WideString dispid 38;
    property EnableICC: WordBool dispid 39;
    property PdfUseDeflateOnJPEG: WordBool dispid 40;
    property HtmlPageWidth: Single dispid 41;
    property HtmlPageHeight: Single dispid 42;
    property HtmlPageMarginLeft: Single dispid 43;
    property HtmlPageMarginTop: Single dispid 44;
    property HtmlPageMarginRight: Single dispid 45;
    property HtmlPageMarginBottom: Single dispid 46;
    function LoadFromHttp(const HttpUri: WideString): GdPictureStatus; dispid 47;
    property HtmlPreferCSSPageSize: WordBool dispid 48;
    function GetPageCount: Integer; dispid 49;
    function SaveAsSVG(const FilePath: WideString): GdPictureStatus; dispid 50;
    function SaveAsSVG_2(const Stream: IUnknown): GdPictureStatus; dispid 51;
    property TrackOfficeDocumentRevisions: WordBool dispid 54;
    property SplitExcelSheetsIntoPages: WordBool dispid 55;
    property RenderSheetHeadersAndFooters: WordBool dispid 56;
  end;

// *********************************************************************//
// Interface: IGdPictureDocumentUtilities
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A79755A3-8507-48EE-A616-611BB01CF94B}
// *********************************************************************//
  IGdPictureDocumentUtilities = interface(IDispatch)
    ['{A79755A3-8507-48EE-A616-611BB01CF94B}']
    procedure InitializeToolkit; safecall;
    procedure AddFontFolder(const Path: WideString); safecall;
    procedure EmptyCache; safecall;
    procedure SetCacheFolder(const CacheFolder: WideString); safecall;
    procedure SetAdaptiveFileCachingMechanism(Enabled: WordBool); safecall;
    procedure ForceGarbageCollection; safecall;
    function ReleaseAllGdPictureImages: Integer; safecall;
    function GetDocumentFormat(const FilePath: WideString): DocumentFormat; safecall;
    function GetDocumentFormatFromIStream(const Stream: IUnknown): DocumentFormat; safecall;
    function GetDocumentFormatFromIStream_2(const Stream: IUnknown; const FileName: WideString): DocumentFormat; safecall;
    function GetDocumentFormatFromFileName(const FileName: WideString): DocumentFormat; safecall;
    function GetDocumentPreview(const FilePath: WideString; var DocumentFormat: DocumentFormat; 
                                var PageCount: Integer): GdPictureStatus; safecall;
    function GetDocumentPreviewFromIStream(const FileStream: IUnknown; const FileName: WideString; 
                                           var DocumentFormat: DocumentFormat; 
                                           var PageCount: Integer): GdPictureStatus; safecall;
    function GetDocumentPreviewFromIStream_2(const FileStream: IUnknown; 
                                             const FileName: WideString; ThumbnailWidth: Integer; 
                                             ThumbnailHeight: Integer; BackColor: Integer; 
                                             var DocumentFormat: DocumentFormat; 
                                             var ThumbnailID: Integer; var PageCount: Integer): GdPictureStatus; safecall;
    function GetDocumentPreview_2(const FilePath: WideString; ThumbnailWidth: Integer; 
                                  ThumbnailHeight: Integer; BackColor: Integer; 
                                  var DocumentFormat: DocumentFormat; var ThumbnailID: Integer; 
                                  var PageCount: Integer): GdPictureStatus; safecall;
    function DisposeImage(ImageID: Integer): GdPictureStatus; safecall;
    function IsImageFormat(DocumentFormat: DocumentFormat): WordBool; safecall;
    function IsWebBrowserAvailable: WordBool; safecall;
    function GetWebBrowserPath: WideString; safecall;
    procedure SetWebBrowserPath(const Path: WideString); safecall;
    procedure SetWebBrowserPoolSize(Size: Integer); safecall;
    procedure ClearWebBrowserCache; safecall;
    function GetWebBrowserPoolSize: Integer; safecall;
  end;

// *********************************************************************//
// DispIntf:  IGdPictureDocumentUtilitiesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A79755A3-8507-48EE-A616-611BB01CF94B}
// *********************************************************************//
  IGdPictureDocumentUtilitiesDisp = dispinterface
    ['{A79755A3-8507-48EE-A616-611BB01CF94B}']
    procedure InitializeToolkit; dispid 1;
    procedure AddFontFolder(const Path: WideString); dispid 2;
    procedure EmptyCache; dispid 3;
    procedure SetCacheFolder(const CacheFolder: WideString); dispid 4;
    procedure SetAdaptiveFileCachingMechanism(Enabled: WordBool); dispid 5;
    procedure ForceGarbageCollection; dispid 6;
    function ReleaseAllGdPictureImages: Integer; dispid 7;
    function GetDocumentFormat(const FilePath: WideString): DocumentFormat; dispid 8;
    function GetDocumentFormatFromIStream(const Stream: IUnknown): DocumentFormat; dispid 9;
    function GetDocumentFormatFromIStream_2(const Stream: IUnknown; const FileName: WideString): DocumentFormat; dispid 10;
    function GetDocumentFormatFromFileName(const FileName: WideString): DocumentFormat; dispid 11;
    function GetDocumentPreview(const FilePath: WideString; var DocumentFormat: DocumentFormat; 
                                var PageCount: Integer): GdPictureStatus; dispid 12;
    function GetDocumentPreviewFromIStream(const FileStream: IUnknown; const FileName: WideString; 
                                           var DocumentFormat: DocumentFormat; 
                                           var PageCount: Integer): GdPictureStatus; dispid 13;
    function GetDocumentPreviewFromIStream_2(const FileStream: IUnknown; 
                                             const FileName: WideString; ThumbnailWidth: Integer; 
                                             ThumbnailHeight: Integer; BackColor: Integer; 
                                             var DocumentFormat: DocumentFormat; 
                                             var ThumbnailID: Integer; var PageCount: Integer): GdPictureStatus; dispid 14;
    function GetDocumentPreview_2(const FilePath: WideString; ThumbnailWidth: Integer; 
                                  ThumbnailHeight: Integer; BackColor: Integer; 
                                  var DocumentFormat: DocumentFormat; var ThumbnailID: Integer; 
                                  var PageCount: Integer): GdPictureStatus; dispid 15;
    function DisposeImage(ImageID: Integer): GdPictureStatus; dispid 16;
    function IsImageFormat(DocumentFormat: DocumentFormat): WordBool; dispid 17;
    function IsWebBrowserAvailable: WordBool; dispid 18;
    function GetWebBrowserPath: WideString; dispid 19;
    procedure SetWebBrowserPath(const Path: WideString); dispid 20;
    procedure SetWebBrowserPoolSize(Size: Integer); dispid 21;
    procedure ClearWebBrowserCache; dispid 22;
    function GetWebBrowserPoolSize: Integer; dispid 23;
  end;

// *********************************************************************//
// Interface: IGdPictureImaging
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {572B1557-5AAB-4A36-99D4-3BEC5AD538E8}
// *********************************************************************//
  IGdPictureImaging = interface(IDispatch)
    ['{572B1557-5AAB-4A36-99D4-3BEC5AD538E8}']
    function AddBorderBottom(ImageID: Integer; BorderHeight: Integer; BorderColor: Integer): GdPictureStatus; safecall;
    function AddBorderLeft(ImageID: Integer; BorderWidth: Integer; BorderColor: Integer): GdPictureStatus; safecall;
    function AddBorderRight(ImageID: Integer; BorderWidth: Integer; BorderColor: Integer): GdPictureStatus; safecall;
    function AddBorders(ImageID: Integer; BorderWidth: Integer; BorderColor: Integer): GdPictureStatus; safecall;
    function AddBorderTop(ImageID: Integer; BorderHeight: Integer; BorderColor: Integer): GdPictureStatus; safecall;
    function AdjustRGB(ImageID: Integer; RedAdjust: Integer; GreenAdjust: Integer; 
                       BlueAdjust: Integer): GdPictureStatus; safecall;
    function ADRAddGdPictureImageToTemplate(TemplateID: Integer; ImageID: Integer): GdPictureStatus; safecall;
    function ADRCreateTemplateEmpty: Integer; safecall;
    function ADRCreateTemplateFromFile(const FilePath: WideString): Integer; safecall;
    function ADRCreateTemplateFromGdPictureImage(ImageID: Integer): Integer; safecall;
    function ADRDeleteTemplate(TemplateID: Integer): WordBool; safecall;
    function ADRGetCloserTemplateForFile(const FilePath: WideString): Integer; safecall;
    function ADRGetCloserTemplateForGdPictureImage(ImageID: Integer): Integer; safecall;
    function ADRGetLastConfidence: Double; safecall;
    function ADRGetLastConfidenceFromTemplate(TemplateID: Integer): Double; safecall;
    function ADRGetTemplateCount: Integer; safecall;
    function ADRGetTemplateID(TemplateNo: Integer): Integer; safecall;
    function ADRGetTemplateImageCount(TemplateID: Integer): Integer; safecall;
    function ADRGetTemplateTag(TemplateID: Integer): WideString; safecall;
    function ADRLoadTemplateConfig(const FileConfig: WideString): WordBool; safecall;
    function ADRSaveTemplateConfig(const FileConfig: WideString): WordBool; safecall;
    function ADRSetTemplateTag(TemplateID: Integer; const TemplateTag: WideString): WordBool; safecall;
    procedure ADRStartNewTemplateConfig; safecall;
    function AppendToTiff(ImageID: Integer; const FilePath: WideString; Compression: TiffCompression): GdPictureStatus; safecall;
    function AppendToTiff_2(ImageID: Integer; const FilePath: WideString; 
                            Compression: TiffCompression; JpegQuality: Integer): GdPictureStatus; safecall;
    function ARGB(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer; safecall;
    function ARGBI(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer; safecall;
    function AttachThumbnail(ImageID: Integer; ThumbnailImageID: Integer): GdPictureStatus; safecall;
    function AutoDeskew(ImageID: Integer): GdPictureStatus; safecall;
    function AutoDeskew_2(ImageID: Integer; MaxAngleOfResearch: Single): GdPictureStatus; safecall;
    function AutoDeskew_3(ImageID: Integer; MaxAngleOfResearch: Single; BackColor: Integer; 
                          AngleStep: Single; Optimistic: WordBool): GdPictureStatus; safecall;
    function AutoTextInvert(ImageID: Integer; MinObjectWidth: Integer; MinObjectHeight: Integer; 
                            MinBlackPercent: Integer; MaxBlackPercent: Integer; 
                            FixBackground: WordBool; ConnectedToLines: WordBool; 
                            MaxLinesThickness: Integer): GdPictureStatus; safecall;
    function Barcode1DReaderBarcodeHasChecksum(BarcodeNo: Integer): WordBool; safecall;
    procedure Barcode1DReaderClear; safecall;
    function Barcode1DReaderCode128IsEAN(BarcodeNo: Integer): WordBool; safecall;
    function Barcode1DReaderDoScan(ImageID: Integer): GdPictureStatus; safecall;
    function Barcode1DReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; safecall;
    function Barcode1DReaderDoScan_3(ImageID: Integer; ScanMode: Byte; 
                                     BarcodeType: Barcode1DReaderType; ReturnCorrupted: WordBool; 
                                     ExpectedCount: Integer): GdPictureStatus; safecall;
    function Barcode1DReaderDoScan_4(ImageID: Integer; ScanMode: Byte; 
                                     BarcodeType: Barcode1DReaderType; ReturnCorrupted: WordBool; 
                                     ExpectedCount: Integer; StopOnExpectedCount: WordBool): GdPictureStatus; safecall;
    function Barcode1DReaderDoScan_5(ImageID: Integer; ScanMode: Byte; 
                                     BarcodeType: Barcode1DReaderType; ReturnCorrupted: WordBool; 
                                     ExpectedCount: Integer; StopOnExpectedCount: WordBool; 
                                     timeoutMilliseconds: Integer): GdPictureStatus; safecall;
    function Barcode1DReaderGetBarcodeCount: Integer; safecall;
    function Barcode1DReaderGetBarcodeSkewAngle(BarcodeNo: Integer): Double; safecall;
    function Barcode1DReaderGetBarcodeType(BarcodeNo: Integer): Barcode1DReaderType; safecall;
    function Barcode1DReaderGetBarcodeValue(BarcodeNo: Integer): WideString; safecall;
    function Barcode1DReaderGetBarcodeValueRAWBase64(BarcodeNo: Integer): WideString; safecall;
    function Barcode1DReaderGetBarcodeValue_2(BarcodeNo: Integer; GetFrebrabanDigitalLine: WordBool): WideString; safecall;
    function Barcode1DReaderGetBarcodeX1(BarcodeNo: Integer): Integer; safecall;
    function Barcode1DReaderGetBarcodeX2(BarcodeNo: Integer): Integer; safecall;
    function Barcode1DReaderGetBarcodeX3(BarcodeNo: Integer): Integer; safecall;
    function Barcode1DReaderGetBarcodeX4(BarcodeNo: Integer): Integer; safecall;
    function Barcode1DReaderGetBarcodeY1(BarcodeNo: Integer): Integer; safecall;
    function Barcode1DReaderGetBarcodeY2(BarcodeNo: Integer): Integer; safecall;
    function Barcode1DReaderGetBarcodeY3(BarcodeNo: Integer): Integer; safecall;
    function Barcode1DReaderGetBarcodeY4(BarcodeNo: Integer): Integer; safecall;
    function Barcode1DWrite(ImageID: Integer; BarcodeType: Barcode1DWriterType; 
                            const Data: WideString; DstLeft: Integer; DstTop: Integer; 
                            DstWidth: Integer; DstHeight: Integer; FillColor: Integer; 
                            Alignment: BarcodeAlign; Angle: Single): GdPictureStatus; safecall;
    function Barcode1DWriteGetMinWidth(BarcodeType: Barcode1DWriterType; const Data: WideString): Integer; safecall;
    function BarcodeAztecGetSize(const Data: WideString; var Version: BarcodeAztecCodeVersion; 
                                 EccPercent: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                 out Width: Integer; out Height: Integer): GdPictureStatus; safecall;
    procedure BarcodeAztecReaderClear; safecall;
    function BarcodeAztecReaderDoScan(ImageID: Integer): GdPictureStatus; safecall;
    function BarcodeAztecReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; safecall;
    function BarcodeAztecReaderDoScan_3(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer): GdPictureStatus; safecall;
    function BarcodeAztecReaderDoScan_4(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer; 
                                        StopOnExpectedCount: WordBool): GdPictureStatus; safecall;
    function BarcodeAztecReaderGetBarcodeCount: Integer; safecall;
    function BarcodeAztecReaderGetBarcodeValue(BarcodeNo: Integer): WideString; safecall;
    function BarcodeAztecReaderGetBarcodeValueRAWBase64(BarcodeNo: Integer): WideString; safecall;
    function BarcodeAztecReaderGetBarcodeX1(BarcodeNo: Integer): Integer; safecall;
    function BarcodeAztecReaderGetBarcodeX2(BarcodeNo: Integer): Integer; safecall;
    function BarcodeAztecReaderGetBarcodeX3(BarcodeNo: Integer): Integer; safecall;
    function BarcodeAztecReaderGetBarcodeX4(BarcodeNo: Integer): Integer; safecall;
    function BarcodeAztecReaderGetBarcodeY1(BarcodeNo: Integer): Integer; safecall;
    function BarcodeAztecReaderGetBarcodeY2(BarcodeNo: Integer): Integer; safecall;
    function BarcodeAztecReaderGetBarcodeY3(BarcodeNo: Integer): Integer; safecall;
    function BarcodeAztecReaderGetBarcodeY4(BarcodeNo: Integer): Integer; safecall;
    function BarcodeAztecWrite(ImageID: Integer; const Data: WideString; 
                               var Version: BarcodeAztecCodeVersion; EccPercent: Integer; 
                               QuietZone: Integer; ModuleSize: Integer; DstLeft: Integer; 
                               DstTop: Integer; Angle: Single; FillColor: Integer; 
                               BackColor: Integer): GdPictureStatus; safecall;
    function BarcodeAztecReaderGetBarcodeConfidence(BarcodeNo: Integer): Single; safecall;
    function BarcodeDataMatrixGetSize(const Data: WideString; 
                                      EncodingMode: BarcodeDataMatrixEncodingMode; 
                                      var Version: BarcodeDataMatrixVersion; QuietZone: Integer; 
                                      ModuleSize: Integer; out Width: Integer; out Height: Integer): GdPictureStatus; safecall;
    procedure BarcodeDataMatrixReaderClear; safecall;
    function BarcodeDataMatrixReaderDoScan(ImageID: Integer): GdPictureStatus; safecall;
    function BarcodeDataMatrixReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; safecall;
    function BarcodeDataMatrixReaderDoScan_3(ImageID: Integer; ScanMode: Byte; 
                                             ExpectedCount: Integer): GdPictureStatus; safecall;
    function BarcodeDataMatrixReaderDoScan_4(ImageID: Integer; ScanMode: Byte; 
                                             ExpectedCount: Integer; StopOnExpectedCount: WordBool): GdPictureStatus; safecall;
    function BarcodeDataMatrixReaderGetBarcodeColumns(BarcodeNo: Integer): Integer; safecall;
    function BarcodeDataMatrixReaderGetBarcodeCount: Integer; safecall;
    function BarcodeDataMatrixReaderGetBarcodeRows(BarcodeNo: Integer): Integer; safecall;
    function BarcodeDataMatrixReaderGetBarcodeSkewAngle(BarcodeNo: Integer): Double; safecall;
    function BarcodeDataMatrixReaderGetBarcodeValue(BarcodeNo: Integer): WideString; safecall;
    function BarcodeDataMatrixReaderGetBarcodeValueRAWBase64(BarcodeNo: Integer): WideString; safecall;
    function BarcodeDataMatrixReaderGetBarcodeX1(BarcodeNo: Integer): Integer; safecall;
    function BarcodeDataMatrixReaderGetBarcodeX2(BarcodeNo: Integer): Integer; safecall;
    function BarcodeDataMatrixReaderGetBarcodeX3(BarcodeNo: Integer): Integer; safecall;
    function BarcodeDataMatrixReaderGetBarcodeX4(BarcodeNo: Integer): Integer; safecall;
    function BarcodeDataMatrixReaderGetBarcodeY1(BarcodeNo: Integer): Integer; safecall;
    function BarcodeDataMatrixReaderGetBarcodeY2(BarcodeNo: Integer): Integer; safecall;
    function BarcodeDataMatrixReaderGetBarcodeY3(BarcodeNo: Integer): Integer; safecall;
    function BarcodeDataMatrixReaderGetBarcodeY4(BarcodeNo: Integer): Integer; safecall;
    function BarcodeDataMatrixWrite(ImageID: Integer; const Data: WideString; 
                                    EncodingMode: BarcodeDataMatrixEncodingMode; 
                                    var Version: BarcodeDataMatrixVersion; QuietZone: Integer; 
                                    ModuleSize: Integer; DstLeft: Integer; DstTop: Integer; 
                                    Angle: Single; FillColor: Integer; BackColor: Integer): GdPictureStatus; safecall;
    function BarcodeDataMatrixReaderGetBarcodeConfidence(BarcodeNo: Integer): Single; safecall;
    function BarcodeMicroQRGetSize(const Data: WideString; EncodingMode: BarcodeQREncodingMode; 
                                   ErrorCorrectionLevel: BarcodeMicroQRErrorCorrectionLevel; 
                                   out Version: Integer; QuietZone: Integer; ModuleSize: Integer): Integer; safecall;
    procedure BarcodeMicroQRReaderClear; safecall;
    function BarcodeMicroQRReaderDoScan(ImageID: Integer): GdPictureStatus; safecall;
    function BarcodeMicroQRReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; safecall;
    function BarcodeMicroQRReaderDoScan_3(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer): GdPictureStatus; safecall;
    function BarcodeMicroQRReaderDoScan_4(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer; 
                                          StopOnExpectedCount: WordBool): GdPictureStatus; safecall;
    function BarcodeMicroQRReaderGetBarcodeConfidence(BarcodeNo: Integer): Single; safecall;
    function BarcodeMicroQRReaderGetBarcodeCount: Integer; safecall;
    function BarcodeMicroQRReaderGetBarcodeSkewAngle(BarcodeNo: Integer): Double; safecall;
    function BarcodeMicroQRReaderGetBarcodeValue(BarcodeNo: Integer): WideString; safecall;
    function BarcodeMicroQRReaderGetBarcodeX1(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMicroQRReaderGetBarcodeX2(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMicroQRReaderGetBarcodeX3(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMicroQRReaderGetBarcodeX4(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMicroQRReaderGetBarcodeY1(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMicroQRReaderGetBarcodeY2(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMicroQRReaderGetBarcodeY3(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMicroQRReaderGetBarcodeY4(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMicroQRReaderGetVersion(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMicroQRWrite(ImageID: Integer; const Data: WideString; 
                                 EncodingMode: BarcodeQREncodingMode; 
                                 ErrorCorrectionLevel: BarcodeMicroQRErrorCorrectionLevel; 
                                 Version: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                 DstLeft: Integer; DstTop: Integer; Angle: Single; 
                                 FillColor: Integer; BackColor: Integer): GdPictureStatus; safecall;
    function BarcodePDF417GetSize(const Data: WideString; EncodingMode: BarcodePDF417EncodingMode; 
                                  var ErrorCorrectionLevel: BarcodePDF417ErrorCorrectionLevel; 
                                  var Rows: Integer; var Cols: Integer; QuietZone: Integer; 
                                  ModuleWidth: Integer; RowHeight: Integer; out Width: Integer; 
                                  out Height: Integer): GdPictureStatus; safecall;
    procedure BarcodePDF417ReaderClear; safecall;
    function BarcodePDF417ReaderDoScan(ImageID: Integer): GdPictureStatus; safecall;
    function BarcodePDF417ReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; safecall;
    function BarcodePDF417ReaderDoScan_3(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer): GdPictureStatus; safecall;
    function BarcodePDF417ReaderDoScan_4(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer; 
                                         StopOnExpectedCount: WordBool): GdPictureStatus; safecall;
    function BarcodePDF417ReaderGetBarcodeColumns(BarcodeNo: Integer): Integer; safecall;
    function BarcodePDF417ReaderGetBarcodeConfidence(BarcodeNo: Integer): Single; safecall;
    function BarcodePDF417ReaderGetBarcodeCount: Integer; safecall;
    function BarcodePDF417ReaderGetBarcodeRows(BarcodeNo: Integer): Integer; safecall;
    function BarcodePDF417ReaderGetBarcodeSkewAngle(BarcodeNo: Integer): Double; safecall;
    function BarcodePDF417ReaderGetBarcodeValue(BarcodeNo: Integer): WideString; safecall;
    function BarcodePDF417ReaderGetBarcodeValueRAWBase64(BarcodeNo: Integer): WideString; safecall;
    function BarcodePDF417ReaderGetBarcodeX1(BarcodeNo: Integer): Integer; safecall;
    function BarcodePDF417ReaderGetBarcodeX2(BarcodeNo: Integer): Integer; safecall;
    function BarcodePDF417ReaderGetBarcodeX3(BarcodeNo: Integer): Integer; safecall;
    function BarcodePDF417ReaderGetBarcodeX4(BarcodeNo: Integer): Integer; safecall;
    function BarcodePDF417ReaderGetBarcodeY1(BarcodeNo: Integer): Integer; safecall;
    function BarcodePDF417ReaderGetBarcodeY2(BarcodeNo: Integer): Integer; safecall;
    function BarcodePDF417ReaderGetBarcodeY3(BarcodeNo: Integer): Integer; safecall;
    function BarcodePDF417ReaderGetBarcodeY4(BarcodeNo: Integer): Integer; safecall;
    function BarcodePDF417Write(ImageID: Integer; const Data: WideString; 
                                EncodingMode: BarcodePDF417EncodingMode; 
                                ErrorCorrectionLevel: BarcodePDF417ErrorCorrectionLevel; 
                                Rows: Integer; Cols: Integer; QuietZone: Integer; 
                                ModuleWidth: Integer; RowHeight: Integer; DstLeft: Integer; 
                                DstTop: Integer; Angle: Single; FillColor: Integer; 
                                BackColor: Integer): GdPictureStatus; safecall;
    function BarcodeQRGetSize(const Data: WideString; EncodingMode: BarcodeQREncodingMode; 
                              ErrorCorrectionLevel: BarcodeQRErrorCorrectionLevel; 
                              out Version: Integer; QuietZone: Integer; ModuleSize: Integer): Integer; safecall;
    procedure BarcodeQRReaderClear; safecall;
    function BarcodeQRReaderDoScan(ImageID: Integer): GdPictureStatus; safecall;
    function BarcodeQRReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; safecall;
    function BarcodeQRReaderDoScan_3(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer): GdPictureStatus; safecall;
    function BarcodeQRReaderDoScan_4(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer; 
                                     StopOnExpectedCount: WordBool): GdPictureStatus; safecall;
    function BarcodeQRReaderGetBarcodeConfidence(BarcodeNo: Integer): Single; safecall;
    function BarcodeQRReaderGetBarcodeCount: Integer; safecall;
    function BarcodeQRReaderGetBarcodeSkewAngle(BarcodeNo: Integer): Double; safecall;
    function BarcodeQRReaderGetBarcodeValue(BarcodeNo: Integer): WideString; safecall;
    function BarcodeQRReaderGetBarcodeValueRAWBase64(BarcodeNo: Integer): WideString; safecall;
    function BarcodeQRReaderGetBarcodeX1(BarcodeNo: Integer): Integer; safecall;
    function BarcodeQRReaderGetBarcodeX2(BarcodeNo: Integer): Integer; safecall;
    function BarcodeQRReaderGetBarcodeX3(BarcodeNo: Integer): Integer; safecall;
    function BarcodeQRReaderGetBarcodeX4(BarcodeNo: Integer): Integer; safecall;
    function BarcodeQRReaderGetBarcodeY1(BarcodeNo: Integer): Integer; safecall;
    function BarcodeQRReaderGetBarcodeY2(BarcodeNo: Integer): Integer; safecall;
    function BarcodeQRReaderGetBarcodeY3(BarcodeNo: Integer): Integer; safecall;
    function BarcodeQRReaderGetBarcodeY4(BarcodeNo: Integer): Integer; safecall;
    function BarcodeQRReaderGetVersion(BarcodeNo: Integer): Integer; safecall;
    function BarcodeQRWrite(ImageID: Integer; const Data: WideString; 
                            EncodingMode: BarcodeQREncodingMode; 
                            ErrorCorrectionLevel: BarcodeQRErrorCorrectionLevel; Version: Integer; 
                            QuietZone: Integer; ModuleSize: Integer; DstLeft: Integer; 
                            DstTop: Integer; Angle: Single; FillColor: Integer; BackColor: Integer): GdPictureStatus; safecall;
    function BarcodeMaxiCodeGetSize(QuietZone: Integer; ModuleSize: Integer; out Width: Integer; 
                                    out Height: Integer): GdPictureStatus; safecall;
    function BarcodeMaxiCodeWrite(ImageID: Integer; const Data: WideString; 
                                  Mode: BarcodeMaxiCodeEncodingMode; QuietZone: Integer; 
                                  ModuleSize: Integer; DstLeft: Integer; DstTop: Integer; 
                                  Angle: Single; FillColor: Integer; BackColor: Integer): GdPictureStatus; safecall;
    procedure BarcodeMaxiCodeReaderClear; safecall;
    function BarcodeMaxiCodeReaderDoScan(ImageID: Integer): GdPictureStatus; safecall;
    function BarcodeMaxiCodeReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; safecall;
    function BarcodeMaxiCodeReaderDoScan_3(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer): GdPictureStatus; safecall;
    function BarcodeMaxiCodeReaderDoScan_4(ImageID: Integer; ScanMode: Byte; 
                                           ExpectedCount: Integer; StopOnExpectedCount: WordBool): GdPictureStatus; safecall;
    function BarcodeMaxiCodeReaderGetBarcodeCount: Integer; safecall;
    function BarcodeMaxiCodeReaderGetBarcodeValue(BarcodeNo: Integer): WideString; safecall;
    function BarcodeMaxiCodeReaderGetBarcodeValueRAWBase64(BarcodeNo: Integer): WideString; safecall;
    function BarcodeMaxiCodeReaderGetBarcodeConfidence(BarcodeNo: Integer): Single; safecall;
    function BarcodeMaxiCodeReaderGetBarcodeX1(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMaxiCodeReaderGetBarcodeX2(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMaxiCodeReaderGetBarcodeX3(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMaxiCodeReaderGetBarcodeX4(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMaxiCodeReaderGetBarcodeY1(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMaxiCodeReaderGetBarcodeY2(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMaxiCodeReaderGetBarcodeY3(BarcodeNo: Integer): Integer; safecall;
    function BarcodeMaxiCodeReaderGetBarcodeY4(BarcodeNo: Integer): Integer; safecall;
    function ClearImage(ImageID: Integer; Color: Integer): GdPictureStatus; safecall;
    procedure ColorCMYKtoRGB(Cyan: Integer; Magenta: Integer; Yellow: Integer; Black: Integer; 
                             var Red: Integer; var Green: Integer; var Blue: Integer); safecall;
    procedure ColorCMYtoRGB(Cyan: Integer; Magenta: Integer; Yellow: Integer; var Red: Integer; 
                            var Green: Integer; var Blue: Integer); safecall;
    function ColorDetection(ImageID: Integer; AutoConvert: WordBool; ScanningContext: WordBool; 
                            AutoRepairCharacters: WordBool): GdPictureOutputIntent; safecall;
    procedure ColorHSLtoRGB(Hue: Single; Saturation: Single; Lightness: Single; var Red: Byte; 
                            var Green: Byte; var Blue: Byte); safecall;
    procedure ColorRGBtoCMY(Red: Integer; Green: Integer; Blue: Integer; var Cyan: Integer; 
                            var Magenta: Integer; var Yellow: Integer); safecall;
    procedure ColorRGBtoCMYK(Red: Integer; Green: Integer; Blue: Integer; var Cyan: Integer; 
                             var Magenta: Integer; var Yellow: Integer; var Black: Integer); safecall;
    procedure ColorRGBtoHSL(Red: Byte; Green: Byte; Blue: Byte; var Hue: Single; 
                            var Saturation: Single; var Lightness: Single); safecall;
    function ConvertBitonalToGrayScale(ImageID: Integer; SoftenValue: Integer): GdPictureStatus; safecall;
    function ConvertTo16BppRGB555(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo16BppRGB565(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo1Bpp(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo1Bpp_2(ImageID: Integer; Threshold: Byte): GdPictureStatus; safecall;
    function ConvertTo1BppAT(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo1BppAT_2(ImageID: Integer; Threshold: Integer): GdPictureStatus; safecall;
    function ConvertTo1BppBradley(ImageID: Integer; Threshold: Byte): GdPictureStatus; safecall;
    function ConvertTo1BppFast(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo1BppSauvola(ImageID: Integer; Factor: Single): GdPictureStatus; safecall;
    function ConvertTo1BppSauvola_2(ImageID: Integer; Factor: Single; ContrastMinDif: Integer; 
                                    SmoothKernel: Integer): GdPictureStatus; safecall;
    function ConvertTo1BppWAN(ImageID: Integer; Threshold: Byte): GdPictureStatus; safecall;
    function ConvertTo24BppRGB(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo32BppARGB(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo32BppPARGB(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo32BppRGB(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo48BppRGB(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo4Bpp16(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo4BppPal(ImageID: Integer; var ColorEntries: PSafeArray): GdPictureStatus; safecall;
    function ConvertTo4BppQ(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo64BppARGB(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo64BppPARGB(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo8Bpp216(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo8BppGrayScale(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo8BppGrayScaleAdv(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo8BppQ(ImageID: Integer): GdPictureStatus; safecall;
    function ConvertTo8BppQ_2(ImageID: Integer; MaxColors: Integer): GdPictureStatus; safecall;
    function CopyRegionToClipboard(ImageID: Integer; SrcLeft: Integer; SrcTop: Integer; 
                                   Width: Integer; Height: Integer): GdPictureStatus; safecall;
    function CopyToClipboard(ImageID: Integer): GdPictureStatus; safecall;
    function CountColor(ImageID: Integer; PickColor: Integer): Double; safecall;
    function CountUniqueColors(ImageID: Integer): Integer; safecall;
    function CreateAnchorTemplate(ImageID: Integer; PosLeft: Integer; PosTop: Integer; 
                                  Width: Integer; Height: Integer): Integer; safecall;
    function CreateAnchorTemplateL(ImageID: Integer; PosLeft: Integer; PosTop: Integer; 
                                   Width: Integer; Height: Integer): Int64; safecall;
    function CreateClonedGdPictureImage(ImageID: Integer): Integer; safecall;
    function CreateClonedGdPictureImage24BppRGB(ImageID: Integer): Integer; safecall;
    function CreateClonedGdPictureImage32BppARGB(ImageID: Integer): Integer; safecall;
    function CreateClonedGdPictureImage32BppPARGB(ImageID: Integer): Integer; safecall;
    function CreateClonedGdPictureImageArea(ImageID: Integer; SrcLeft: Integer; SrcTop: Integer; 
                                            Width: Integer; Height: Integer): Integer; safecall;
    function CreateGdPictureImageFromByteArray(var Data: PSafeArray): Integer; safecall;
    function CreateGdPictureImageFromByteArray_2(var Data: PSafeArray; ImageFormat: DocumentFormat): Integer; safecall;
    function CreateGdPictureImageFromClipboard: Integer; safecall;
    function CreateGdPictureImageFromCMYKSep(CyanImageID: Integer; MagentaImageID: Integer; 
                                             YellowImageID: Integer; BlackImageID: Integer): Integer; safecall;
    function CreateGdPictureImageFromDIB(Dib: Integer): Integer; safecall;
    function CreateGdPictureImageFromFile(const FilePath: WideString): Integer; safecall;
    function CreateGdPictureImageFromFile_2(const FilePath: WideString; LoadInMemory: WordBool): Integer; safecall;
    function CreateGdPictureImageFromFile_3(const FilePath: WideString; LoadInMemory: WordBool; 
                                            DirectAccess: WordBool): Integer; safecall;
    function CreateGdPictureImageFromFTP(const Host: WideString; const Path: WideString; 
                                         const Login: WideString; const Password: WideString; 
                                         FTPPort: Integer): Integer; safecall;
    function CreateGdPictureImageFromHBitmap(hBitmap: Integer): Integer; safecall;
    function CreateGdPictureImageFromHICON(hicon: Integer): Integer; safecall;
    function CreateGdPictureImageFromHTTP(const Host: WideString; const Path: WideString; 
                                          HTTPPort: Integer): Integer; safecall;
    function CreateGdPictureImageFromHTTP_2(const Uri: WideString; const Login: WideString; 
                                            const Password: WideString): Integer; safecall;
    function CreateGdPictureImageFromHwnd(HANDLE: Integer): Integer; safecall;
    function CreateGdPictureImageFromIStream(const Stream: IUnknown): Integer; safecall;
    function CreateGdPictureImageFromIStream_2(const Stream: IUnknown; DirectAccess: WordBool): Integer; safecall;
    function CreateGdPictureImageFromIStream_3(const Stream: IUnknown; DirectAccess: WordBool; 
                                               ImageFormat: DocumentFormat): Integer; safecall;
    function CreateGdPictureImageFromMetaFile(const FilePath: WideString): Integer; safecall;
    function CreateGdPictureImageFromMetaFile_2(const FilePath: WideString; ScaleBy: Single): Integer; safecall;
    function CreateGdPictureImageFromString(const ImageData: WideString): Integer; safecall;
    function CreateNewGdPictureImage(Width: Integer; Height: Integer; BitDepth: Smallint; 
                                     BackColor: Integer): Integer; safecall;
    function CreateNewGdPictureImage_2(Width: Integer; Height: Integer; PixelFormat: PixelFormat; 
                                       BackColor: Integer): Integer; safecall;
    function CreateThumbnail(ImageID: Integer; Width: Integer; Height: Integer): Integer; safecall;
    function CreateThumbnailHQ(ImageID: Integer; Width: Integer; Height: Integer): Integer; safecall;
    function CreateThumbnailHQ_2(ImageID: Integer; Width: Integer; Height: Integer; 
                                 BackColor: Integer): Integer; safecall;
    function CreateThumbnailHQ_3(const FilePath: WideString; Width: Integer; Height: Integer; 
                                 BackColor: Integer): Integer; safecall;
    function Crop(ImageID: Integer; Left: Integer; Top: Integer; Width: Integer; Height: Integer): GdPictureStatus; safecall;
    function CropBlackBorders(ImageID: Integer): GdPictureStatus; safecall;
    function CropBlackBordersEx(ImageID: Integer): GdPictureStatus; safecall;
    function CropBlackBordersEx_2(ImageID: Integer; Confidence: Single): GdPictureStatus; safecall;
    function CropBlackBordersEx_3(ImageID: Integer; Confidence: Single; SkipLinesCount: Integer): GdPictureStatus; safecall;
    function CropBlackBorders_2(ImageID: Integer; Confidence: Single): GdPictureStatus; safecall;
    function CropBlackBorders_3(ImageID: Integer; Confidence: Single; SkipLinesCount: Integer): GdPictureStatus; safecall;
    function CropBorders(ImageID: Integer; Context: ImagingContext): GdPictureStatus; safecall;
    function CropBorders_2(ImageID: Integer; Confidence: Single; Context: ImagingContext): GdPictureStatus; safecall;
    function CropBorders_3(ImageID: Integer; Confidence: Single; PixelReference: ReferencePoint; 
                           Context: ImagingContext): GdPictureStatus; safecall;
    function CropBorders_4(ImageID: Integer; Confidence: Single; PixelReference: ReferencePoint; 
                           var Left: Integer; var Top: Integer; var Width: Integer; 
                           var Height: Integer): GdPictureStatus; safecall;
    function CropBorders_5(ImageID: Integer; Confidence: Single; PixelReference: ReferencePoint; 
                           var Left: Integer; var Top: Integer; var Width: Integer; 
                           var Height: Integer; Context: ImagingContext): GdPictureStatus; safecall;
    function CropBottom(ImageID: Integer; Lines: Integer): GdPictureStatus; safecall;
    function CropLeft(ImageID: Integer; Lines: Integer): GdPictureStatus; safecall;
    function CropRight(ImageID: Integer; Lines: Integer): GdPictureStatus; safecall;
    function CropTop(ImageID: Integer; Lines: Integer): GdPictureStatus; safecall;
    function CropWhiteBorders(ImageID: Integer): GdPictureStatus; safecall;
    function CropWhiteBorders_2(ImageID: Integer; Confidence: Single): GdPictureStatus; safecall;
    function CropWhiteBorders_3(ImageID: Integer; Confidence: Single; SkipLinesCount: Integer): GdPictureStatus; safecall;
    function Decode64String(const StringToDecode: WideString): WideString; safecall;
    procedure DeleteAnchorTemplate(AnchorTemplateID: Integer); safecall;
    procedure DeleteAnchorTemplateL(AnchorTemplateID: Int64); safecall;
    function DeleteBlackBorders(ImageID: Integer; Margin: Integer; SkewedBorders: WordBool): GdPictureStatus; safecall;
    procedure DeleteClipboardData; safecall;
    function DetachThumbnail(ImageID: Integer): GdPictureStatus; safecall;
    function DicomGetDefaultWindowLevel(ImageID: Integer): Single; safecall;
    function DicomGetDefaultWindowWidth(ImageID: Integer): Single; safecall;
    function DicomGetLastWindowLevel(ImageID: Integer): Single; safecall;
    function DicomGetLastWindowWidth(ImageID: Integer): Single; safecall;
    function DicomGetMaxWindowLevel(ImageID: Integer): Single; safecall;
    function DicomGetMaxWindowWidth(ImageID: Integer): Single; safecall;
    function DicomGetMinWindowLevel(ImageID: Integer): Single; safecall;
    function DicomGetPageCount(ImageID: Integer): Integer; safecall;
    function DicomGetTagDescription(ImageID: Integer; TagIdx: Integer): WideString; safecall;
    function DicomGetTagElement(ImageID: Integer; TagIdx: Integer): Integer; safecall;
    function DicomGetTagGroup(ImageID: Integer; TagIdx: Integer): Integer; safecall;
    function DicomGetTagsCount(ImageID: Integer): Integer; safecall;
    function DicomGetTagValue(ImageID: Integer; TagIdx: Integer): WideString; safecall;
    function DicomIsMultiPage(ImageID: Integer): WordBool; safecall;
    function DicomSelectPage(ImageID: Integer; Page: Integer): GdPictureStatus; safecall;
    function DicomSetWindowLevel(ImageID: Integer; WindowWidth: Single; WindowLevel: Single): GdPictureStatus; safecall;
    procedure Dispose; safecall;
    function DrawArc(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                     Height: Single; StartAngle: Single; SweepAngle: Single; PenWidth: Single; 
                     PenColor: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawBezier(ImageID: Integer; Left1: Single; Top1: Single; Left2: Single; Top2: Single; 
                        Left3: Single; Top3: Single; Left4: Single; Top4: Single; PenWidth: Single; 
                        PenColor: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawCircle(ImageID: Integer; DstLeft: Single; DstTop: Single; Diameter: Single; 
                        PenColor: Integer; PenWidth: Single; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawEllipse(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                         Height: Single; PenColor: Integer; PenWidth: Single; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawFilledCircle(ImageID: Integer; DstLeft: Single; DstTop: Single; Diameter: Single; 
                              FillColor: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawFilledCircleTextureFromFile(ImageID: Integer; const TextureFilePath: WideString; 
                                             DstLeft: Integer; DstTop: Integer; Diameter: Integer; 
                                             AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawFilledCircleTextureFromGdPictureImage(ImageID: Integer; ImageTexture: Integer; 
                                                       DstLeft: Integer; DstTop: Integer; 
                                                       Diameter: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawFilledEllipse(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                               Height: Single; FillColor: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawFilledPie(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                           Height: Single; StartAngle: Single; SweepAngle: Single; 
                           FillColor: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawFilledRectangle(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                                 Height: Single; FillColor: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawFilledRoundedRectangle(ImageID: Integer; DstLeft: Single; DstTop: Single; 
                                        Width: Single; Height: Single; Radius: Single; 
                                        FillColor: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawGdPictureImage(SrcImage: Integer; DstImage: Integer; DstLeft: Integer; 
                                DstTop: Integer; DstWidth: Integer; DstHeight: Integer; 
                                InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function DrawGdPictureImageOnHDC(ImageID: Integer; hdc: Integer; DstLeft: Integer; 
                                     DstTop: Integer; DstWidth: Integer; DstHeight: Integer; 
                                     InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function DrawGdPictureImageOnHwnd(ImageID: Integer; HANDLE: Integer; DstLeft: Integer; 
                                      DstTop: Integer; DstWidth: Integer; DstHeight: Integer; 
                                      InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function DrawGdPictureImageOP(SrcImage: Integer; DstImage: Integer; DstLeft: Integer; 
                                  DstTop: Integer; DstWidth: Integer; DstHeight: Integer; 
                                  Op: Operators; InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function DrawGdPictureImageOPRect(SrcImage: Integer; DstImage: Integer; DstLeft: Integer; 
                                      DstTop: Integer; DstWidth: Integer; DstHeight: Integer; 
                                      SrcLeft: Integer; SrcTop: Integer; SrcWidth: Integer; 
                                      SrcHeight: Integer; Op: Operators; 
                                      InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function DrawGdPictureImageRect(SrcImage: Integer; DstImage: Integer; DstLeft: Single; 
                                    DstTop: Single; DstWidth: Single; DstHeight: Single; 
                                    SrcLeft: Single; SrcTop: Single; SrcWidth: Single; 
                                    SrcHeight: Single; InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function DrawGdPictureImageRectOnHDC(ImageID: Integer; hdc: Integer; DstLeft: Single; 
                                         DstTop: Single; DstWidth: Single; DstHeight: Single; 
                                         SrcLeft: Single; SrcTop: Single; SrcWidth: Single; 
                                         SrcHeight: Single; InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function DrawGdPictureImageRectOnHwnd(ImageID: Integer; HANDLE: Integer; DstLeft: Single; 
                                          DstTop: Single; DstWidth: Single; DstHeight: Single; 
                                          SrcLeft: Single; SrcTop: Single; SrcWidth: Single; 
                                          SrcHeight: Single; InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function DrawGdPictureImageSkewing(SrcImage: Integer; DstImage: Integer; DstLeft1: Integer; 
                                       DstTop1: Integer; DstLeft2: Integer; DstTop2: Integer; 
                                       DstLeft3: Integer; DstTop3: Integer; 
                                       InterpolationMode: InterpolationMode; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawGdPictureImageTransparency(SrcImage: Integer; DstImage: Integer; 
                                            Transparency: Integer; DstLeft: Integer; 
                                            DstTop: Integer; DstWidth: Integer; DstHeight: Integer; 
                                            InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function DrawGdPictureImageTransparencyColor(SrcImage: Integer; DstImage: Integer; 
                                                 TransparentColor: Integer; DstLeft: Integer; 
                                                 DstTop: Integer; DstWidth: Integer; 
                                                 DstHeight: Integer; 
                                                 InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function DrawGdPictureImageTransparencyColor_2(SrcImage: Integer; DstImage: Integer; 
                                                   TransparentColor: Integer; Threshold: Single; 
                                                   DstLeft: Integer; DstTop: Integer; 
                                                   DstWidth: Integer; DstHeight: Integer; 
                                                   InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function DrawGradientLine(ImageID: Integer; SrcLeft: Single; SrcTop: Single; DstLeft: Single; 
                              DstTop: Single; PenWidth: Integer; StartColor: Integer; 
                              EndColor: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawLine(ImageID: Integer; SrcLeft: Single; SrcTop: Single; DstLeft: Single; 
                      DstTop: Single; PenWidth: Single; PenColor: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawLineTextureFromFile(ImageID: Integer; const TextureFilePath: WideString; 
                                     SrcLeft: Integer; SrcTop: Integer; DstLeft: Integer; 
                                     DstTop: Integer; PenWidth: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawLineTextureFromGdPictureImage(ImageID: Integer; ImageTexture: Integer; 
                                               SrcLeft: Integer; SrcTop: Integer; DstLeft: Integer; 
                                               DstTop: Integer; PenWidth: Integer; 
                                               AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawPie(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                     Height: Single; StartAngle: Single; SweepAngle: Single; PenWidth: Integer; 
                     PenColor: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawRectangle(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                           Height: Single; PenWidth: Integer; PenColor: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawRotatedEllipse(ImageID: Integer; Angle: Single; DstLeft: Single; DstTop: Single; 
                                Width: Single; Height: Single; PenWidth: Single; PenColor: Integer; 
                                AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawRotatedFilledRectangle(ImageID: Integer; Angle: Single; DstLeft: Single; 
                                        DstTop: Single; Width: Single; Height: Single; 
                                        FillColor: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawRotatedRectangle(ImageID: Integer; Angle: Single; DstLeft: Single; DstTop: Single; 
                                  Width: Single; Height: Single; PenWidth: Integer; 
                                  PenColor: Integer; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawRotatedText(ImageID: Integer; Angle: Single; const Text: WideString; 
                             DstLeft: Integer; DstTop: Integer; FontSize: Single; 
                             FontStyle: FontStyle; TextColor: Integer; const FontName: WideString; 
                             AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawText(ImageID: Integer; const Text: WideString; DstLeft: Integer; DstTop: Integer; 
                      FontSize: Single; FontStyle: FontStyle; TextColor: Integer; 
                      const FontName: WideString; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawTextBackColor(ImageID: Integer; const Text: WideString; DstLeft: Integer; 
                               DstTop: Integer; FontSize: Single; FontStyle: FontStyle; 
                               TextColor: Integer; BackColor: Integer; const FontName: WideString; 
                               AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawTextBox(ImageID: Integer; const Text: WideString; Left: Integer; Top: Integer; 
                         Width: Integer; Height: Integer; FontSize: Single; 
                         Alignment: TextAlignment; FontStyle: FontStyle; TextColor: Integer; 
                         const FontName: WideString; DrawBox: WordBool; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawTextGradient(ImageID: Integer; const Text: WideString; DstLeft: Integer; 
                              DstTop: Integer; StartColor: Integer; EndColor: Integer; 
                              FontSize: Single; FontStyle: FontStyle; const FontName: WideString; 
                              AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawTextTextureFromFile(ImageID: Integer; const TextureFilePath: WideString; 
                                     const Text: WideString; DstLeft: Integer; DstTop: Integer; 
                                     FontSize: Single; FontStyle: FontStyle; 
                                     const FontName: WideString; AntiAlias: WordBool): GdPictureStatus; safecall;
    function DrawTextTextureFromGdPictureImage(ImageID: Integer; ImageTexture: Integer; 
                                               const Text: WideString; DstLeft: Integer; 
                                               DstTop: Integer; FontSize: Single; 
                                               FontStyle: FontStyle; const FontName: WideString; 
                                               AntiAlias: WordBool): GdPictureStatus; safecall;
    procedure EnableICM(Enable: WordBool); safecall;
    function Encode64String(const StringToEncode: WideString): WideString; safecall;
    function FindAnchor(ImageID: Integer; AnchorTemplateID: Integer; Mode: Byte; 
                        SearchLeft: Integer; SearchTop: Integer; SearchWidth: Integer; 
                        SearchHeight: Integer; var PosLeft: Integer; var PosTop: Integer; 
                        var PosWidth: Integer; var PosHeight: Integer; var Accuracy: Double): GdPictureStatus; safecall;
    function FindAnchorL(ImageID: Integer; AnchorTemplateID: Int64; Mode: Byte; 
                         SearchLeft: Integer; SearchTop: Integer; SearchWidth: Integer; 
                         SearchHeight: Integer; var PosLeft: Integer; var PosTop: Integer; 
                         var PosWidth: Integer; var PosHeight: Integer; var Accuracy: Double): GdPictureStatus; safecall;
    function FloodFill(ImageID: Integer; XStart: Integer; YStart: Integer; FillColor: Integer): GdPictureStatus; safecall;
    function FontGetCount: Integer; safecall;
    function FontGetName(FontNo: Integer): WideString; safecall;
    function FontIsSymbolic(FontNo: Integer): WordBool; safecall;
    function FontCanRenderText(FontNo: Integer; const Text: WideString): WordBool; safecall;
    function FontGetUnit: GdPicture14_UnitMode; safecall;
    function FontIsStyleAvailable(const FontName: WideString; FontStyle: FontStyle): WordBool; safecall;
    procedure FontSetUnit(UnitMode: GdPicture14_UnitMode); safecall;
    function ForceDownTop(ImageID: Integer): GdPictureStatus; safecall;
    function ForceTopDown(ImageID: Integer): GdPictureStatus; safecall;
    function FormDropOut(ImageID: Integer; TemplateID: Integer; UseGapCorrection: WordBool): GdPictureStatus; safecall;
    function FxAddNoise(ImageID: Integer): GdPictureStatus; safecall;
    function FxAqua(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalClose8(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalDespeckle(ImageID: Integer; FixText: WordBool): GdPictureStatus; safecall;
    function FxBitonalDespeckleAdvanced(ImageID: Integer; DespeckleMode: DespeckleType; 
                                        Strength: Integer): GdPictureStatus; safecall;
    function FxBitonalDespeckleMore(ImageID: Integer; FixText: WordBool): GdPictureStatus; safecall;
    function FxBitonalDilate(ImageID: Integer; KernelSize: Integer): GdPictureStatus; safecall;
    function FxBitonalDilate4(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalDilate8(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalDilateH(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalDilateV(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalErode(ImageID: Integer; KernelSize: Integer): GdPictureStatus; safecall;
    function FxBitonalErode4(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalErode8(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalErodeH(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalErodeV(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalFillHolesH(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalFillHolesHV(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalFillHolesV(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalOpen8(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalOutline(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalRemoveIsolatedDots2x2(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalRemoveIsolatedDots4(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalRemoveIsolatedDots8(ImageID: Integer): GdPictureStatus; safecall;
    function FxBitonalSkeletonize(ImageID: Integer; Repetition: Integer): GdPictureStatus; safecall;
    function FxBitonalVigorousDespeckle(ImageID: Integer; CheckForDotOfI: WordBool): GdPictureStatus; safecall;
    function FxBlackNWhite(ImageID: Integer; Mode: BitonalReduction): GdPictureStatus; safecall;
    function FxBlackNWhiteT(ImageID: Integer; Threshold: Byte): GdPictureStatus; safecall;
    function FxBlackNWhite_2(ImageID: Integer; Mode: BitonalReduction; PalWeight: Integer): GdPictureStatus; safecall;
    function FxBlur(ImageID: Integer): GdPictureStatus; safecall;
    function FxColorDropout(ImageID: Integer; Filter: ColorDropoutFilter): GdPictureStatus; safecall;
    function FxColorize(ImageID: Integer; Hue: Single; Saturation: Single; Luminosity: Single): GdPictureStatus; safecall;
    function FxConnectedContour(ImageID: Integer): GdPictureStatus; safecall;
    function FxContour(ImageID: Integer): GdPictureStatus; safecall;
    function FxDespeckle(ImageID: Integer): GdPictureStatus; safecall;
    function FxDespeckleMore(ImageID: Integer): GdPictureStatus; safecall;
    function FxDiffuse(ImageID: Integer): GdPictureStatus; safecall;
    function FxDiffuseMore(ImageID: Integer): GdPictureStatus; safecall;
    function FxDilate(ImageID: Integer): GdPictureStatus; safecall;
    function FxEdgeEnhance(ImageID: Integer): GdPictureStatus; safecall;
    function FxEmboss(ImageID: Integer): GdPictureStatus; safecall;
    function FxEmbossMore(ImageID: Integer): GdPictureStatus; safecall;
    function FxEngrave(ImageID: Integer): GdPictureStatus; safecall;
    function FxEngraveMore(ImageID: Integer): GdPictureStatus; safecall;
    function FxEqualizeIntensity(ImageID: Integer): GdPictureStatus; safecall;
    function FxErode(ImageID: Integer): GdPictureStatus; safecall;
    function FxFire(ImageID: Integer): GdPictureStatus; safecall;
    function FxGaussian(ImageID: Integer; KernelSize: Integer): GdPictureStatus; safecall;
    function FxGrayscale(ImageID: Integer): GdPictureStatus; safecall;
    function FxHalo(ImageID: Integer; Left: Integer; Top: Integer; Radius: Integer): GdPictureStatus; safecall;
    function FxhWaves(ImageID: Integer; WidthWave: Integer; HeightWave: Integer): GdPictureStatus; safecall;
    function FxMax(ImageID: Integer; KernelSize: Integer): GdPictureStatus; safecall;
    function FxMedian(ImageID: Integer; KernelSize: Integer): GdPictureStatus; safecall;
    function FxMin(ImageID: Integer; KernelSize: Integer): GdPictureStatus; safecall;
    function FxMirrorRounded(ImageID: Integer): GdPictureStatus; safecall;
    function FxNegative(ImageID: Integer): GdPictureStatus; safecall;
    function FxPixelize(ImageID: Integer): GdPictureStatus; safecall;
    function FxPrewittEdgeDetect(ImageID: Integer): GdPictureStatus; safecall;
    function FxRedEyesCorrection(ImageID: Integer): GdPictureStatus; safecall;
    function FxRelief(ImageID: Integer): GdPictureStatus; safecall;
    function fxRemoveBackgroundChromaKey(ImageID: Integer; Component: ColorKey; Variation: Integer; 
                                         MinKeyValue: Integer): GdPictureStatus; safecall;
    function FxScanLine(ImageID: Integer): GdPictureStatus; safecall;
    function FxSepia(ImageID: Integer): GdPictureStatus; safecall;
    function FxSharpen(ImageID: Integer): GdPictureStatus; safecall;
    function FxSharpenMore(ImageID: Integer): GdPictureStatus; safecall;
    function FxSmooth(ImageID: Integer): GdPictureStatus; safecall;
    function FxSobelEdgeDetect(ImageID: Integer): GdPictureStatus; safecall;
    function FxSoften(ImageID: Integer; SoftenValue: Integer): GdPictureStatus; safecall;
    function FxStretchContrast(ImageID: Integer): GdPictureStatus; safecall;
    function FxSubtractBackground(ImageID: Integer; RollingBallSize: Integer; 
                                  LightBackground: WordBool): GdPictureStatus; safecall;
    function FxSwirl(ImageID: Integer; Factor: Single): GdPictureStatus; safecall;
    function FxTwirl(ImageID: Integer; Factor: Single): GdPictureStatus; safecall;
    function FxUnsharpMask(ImageID: Integer; Radius: Integer; Amount: Double; Threshold: Integer): GdPictureStatus; safecall;
    function FxvWaves(ImageID: Integer; WidthWave: Integer; HeightWave: Integer): GdPictureStatus; safecall;
    function GetAlphaChannel(ImageID: Integer; var Alpha: PSafeArray; SrcLeft: Integer; 
                             SrcTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; safecall;
    function GetAttachedThumbnail(ImageID: Integer): Integer; safecall;
    function GetAverageColor(ImageID: Integer): Integer; safecall;
    function GetBitDepth(ImageID: Integer): Integer; safecall;
    function GetBits(ImageID: Integer): Integer; safecall;
    function GetColorChannelFlagsC(ImageID: Integer): Integer; safecall;
    function GetColorChannelFlagsK(ImageID: Integer): Integer; safecall;
    function GetColorChannelFlagsM(ImageID: Integer): Integer; safecall;
    function GetColorChannelFlagsY(ImageID: Integer): Integer; safecall;
    function GetDesktopHwndI: Integer; safecall;
    function GetDibFromGdPictureImageI(ImageID: Integer): Integer; safecall;
    function GetDistance(ImageID: Integer; Left1: Integer; Top1: Integer; Left2: Integer; 
                         Top2: Integer): Double; safecall;
    function GetHBitmapFromGdPictureImageI(ImageID: Integer): Integer; safecall;
    function GetHdcFromGdPictureImage(ImageID: Integer): Integer; safecall;
    function GetHeight(ImageID: Integer): Integer; safecall;
    function GetHeightInches(ImageID: Integer): Double; safecall;
    function GetHorizontalResolution(ImageID: Integer): Single; safecall;
    function GetImageColorSpace(ImageID: Integer): ImageColorSpace; safecall;
    function GetImageFormat(ImageID: Integer): DocumentFormat; safecall;
    function GetLastPath: WideString; safecall;
    function GetLastTransferError: WideString; safecall;
    function GetPageCount(ImageID: Integer): Integer; safecall;
    function GetPixelArrayByte(ImageID: Integer; var Data: PSafeArray; SrcLeft: Integer; 
                               SrcTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; safecall;
    function GetPixelArrayByte8bpp(ImageID: Integer; var Data: PSafeArray; SrcLeft: Integer; 
                                   SrcTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; safecall;
    function GetPixelArrayInteger(ImageID: Integer; var Data: PSafeArray; SrcLeft: Integer; 
                                  SrcTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; safecall;
    function GetPixelFormat(ImageID: Integer): PixelFormat; safecall;
    function GetResizedGdPictureImage(ImageID: Integer; NewImageWidth: Integer; 
                                      NewImageHeight: Integer; InterpolationMode: InterpolationMode): Integer; safecall;
    function GetScanLines(ImageID: Integer): PSafeArray; safecall;
    function GetSelectedPage(ImageID: Integer): Integer; safecall;
    function GetSkewAngle(ImageID: Integer; MaxAngleOfResearch: Single): Single; safecall;
    function GetSkewAngle_2(ImageID: Integer; MaxAngleOfResearch: Single; AngleStep: Single; 
                            Optimistic: WordBool): Single; safecall;
    function GetStat: GdPictureStatus; safecall;
    function GetStride(ImageID: Integer): Integer; safecall;
    function GetTextHeight(ImageID: Integer; const Text: WideString; const FontName: WideString; 
                           FontSize: Single; FontStyle: FontStyle): Single; safecall;
    function GetTextWidth(ImageID: Integer; const Text: WideString; const FontName: WideString; 
                          FontSize: Single; FontStyle: FontStyle): Single; safecall;
    function GetTiffCompression(ImageID: Integer): TiffCompression; safecall;
    function GetVersion: Double; safecall;
    function GetVerticalResolution(ImageID: Integer): Single; safecall;
    function GetWidth(ImageID: Integer): Integer; safecall;
    function GetWidthInches(ImageID: Integer): Double; safecall;
    function GifAppendFrameFromFile(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function GifAppendFrameFromGdPictureImage(ImageID: Integer; ImageToAddID: Integer): GdPictureStatus; safecall;
    function GifCreateMultiFrameFromFile(const FilePath: WideString): Integer; safecall;
    function GifCreateMultiFrameFromGdPictureImage(ImageID: Integer): Integer; safecall;
    function GifDeleteFrame(ImageID: Integer; Frame: Integer): GdPictureStatus; safecall;
    function GifGetCurrentFrame(ImageID: Integer): Integer; safecall;
    function GifGetFrameCount(ImageID: Integer): Integer; safecall;
    function GifGetFrameTime(ImageID: Integer; Frame: Integer): Integer; safecall;
    function GifGetLoopCount(ImageID: Integer): Integer; safecall;
    function GifInsertFrameFromFile(ImageID: Integer; Position: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function GifInsertFrameFromGdPictureImage(ImageID: Integer; Position: Integer; 
                                              ImageToAddID: Integer): GdPictureStatus; safecall;
    function GifIsEditableMultiFrame(ImageID: Integer): WordBool; safecall;
    function GifIsMultiFrame(ImageID: Integer): WordBool; safecall;
    procedure GifOpenMultiFrameForWrite(WriteAccess: WordBool); safecall;
    function GifSaveMultiFrameToFile(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function GifSelectFrame(ImageID: Integer; Frame: Integer): GdPictureStatus; safecall;
    function GifSetFrameDisposal(ImageID: Integer; Frame: Integer; FrameDisposal: Integer): GdPictureStatus; safecall;
    function GifSetFrameTime(ImageID: Integer; Frame: Integer; FrameTime: Integer): GdPictureStatus; safecall;
    function GifSetLoopCount(ImageID: Integer; LoopCount: Integer): GdPictureStatus; safecall;
    function GifSetTransparency(ImageID: Integer; TransparentColor: Integer): GdPictureStatus; safecall;
    function GifSwapFrames(ImageID: Integer; Frame1: Integer; Frame2: Integer): GdPictureStatus; safecall;
    function HasAttachedThumbnail(ImageID: Integer): WordBool; safecall;
    function HasGrayPalette256(ImageID: Integer): WordBool; safecall;
    function HasTransparency(ImageID: Integer): WordBool; safecall;
    function HistogramGet8Bpp(ImageID: Integer; var Data: PSafeArray): GdPictureStatus; safecall;
    function HistogramGetAlpha(ImageID: Integer; var Data: PSafeArray): GdPictureStatus; safecall;
    function HistogramGetARGB(ImageID: Integer; var HistoA: PSafeArray; var HistoR: PSafeArray; 
                              var HistoG: PSafeArray; var HistoB: PSafeArray): GdPictureStatus; safecall;
    function HistogramGetBlue(ImageID: Integer; var Data: PSafeArray): GdPictureStatus; safecall;
    function HistogramGetGreen(ImageID: Integer; var Data: PSafeArray): GdPictureStatus; safecall;
    function HistogramGetRed(ImageID: Integer; var Data: PSafeArray): GdPictureStatus; safecall;
    function ICCAddFromFile(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function ICCAddProfileToFile(const ImagePath: WideString; const ProfilePath: WideString): GdPictureStatus; safecall;
    function ICCExportToFile(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function ICCImageHasProfile(ImageID: Integer): WordBool; safecall;
    function ICCRemove(ImageID: Integer): GdPictureStatus; safecall;
    function ICCRemoveProfileOfFile(const FilePath: WideString): GdPictureStatus; safecall;
    function ICCSetRGBProfile(ImageID: Integer; const ProfilePath: WideString): GdPictureStatus; safecall;
    function IPTCCount(ImageID: Integer): Integer; safecall;
    function IPTCDelete(ImageID: Integer; TagNo: Integer): GdPictureStatus; safecall;
    function IPTCDeleteAll(ImageID: Integer): GdPictureStatus; safecall;
    function IPTCGetID(ImageID: Integer; TagNo: Integer): IPTCTags; safecall;
    function IPTCGetLength(ImageID: Integer; TagNo: Integer): Integer; safecall;
    function IPTCGetType(ImageID: Integer; TagNo: Integer): TagType; safecall;
    function IPTCGetValueBytes(ImageID: Integer; TagNo: Integer; var Data: PSafeArray): Integer; safecall;
    function IPTCGetValueString(ImageID: Integer; TagNo: Integer): WideString; safecall;
    function IPTCSetValueString(ImageID: Integer; IPTCTagID: IPTCTags; const TagData: WideString): GdPictureStatus; safecall;
    function IsBitonal(ImageID: Integer): WordBool; safecall;
    function IsBitonal_2(ImageID: Integer; Threshold: Integer): WordBool; safecall;
    function IsBlank(ImageID: Integer): WordBool; safecall;
    function IsBlank_2(ImageID: Integer; Confidence: Single): WordBool; safecall;
    function IsBlank_3(ImageID: Integer; Confidence: Single; AccountForMargins: WordBool): WordBool; safecall;
    function IsBlank_4(ImageID: Integer; Confidence: Single; AccountForMargins: WordBool; 
                       var ConfidenceOut: Single): WordBool; safecall;
    function IsBlank_5(ImageID: Integer; Confidence: Single; AccountForMargins: WordBool; 
                       AccountForPunchHoles: WordBool; var ConfidenceOut: Single): WordBool; safecall;
    function IsCMYKFile(const FilePath: WideString): WordBool; safecall;
    function IsGrayscale(ImageID: Integer): WordBool; safecall;
    function IsNegative(ImageID: Integer): WordBool; safecall;
    function IsPixelFormatHasAlpha(ImageID: Integer): WordBool; safecall;
    function IsPixelFormatIndexed(ImageID: Integer): WordBool; safecall;
    function JBIG2AddToMultiPageFile(ImageID: Integer; ImageToAddID: Integer): GdPictureStatus; safecall;
    function JBIG2CloseMultiPageFile(ImageID: Integer): GdPictureStatus; safecall;
    function JBIG2GetPageCount(ImageID: Integer): Integer; safecall;
    function JBIG2IsMultiPage(ImageID: Integer): WordBool; safecall;
    function JBIG2SaveAsMultiPageFile(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function JBIG2SelectPage(ImageID: Integer; Page: Integer): GdPictureStatus; safecall;
    function JPEGLosslessCrop(const SrcFile: WideString; const DstFile: WideString; Left: Integer; 
                              Top: Integer; Width: Integer; Height: Integer): GdPictureStatus; safecall;
    function KeepBlueComponent(ImageID: Integer): GdPictureStatus; safecall;
    function KeepGreenComponent(ImageID: Integer): GdPictureStatus; safecall;
    function KeepRedComponent(ImageID: Integer): GdPictureStatus; safecall;
    function MeasureTextBox(ImageID: Integer; const Text: WideString; var Left: Single; 
                            var Top: Single; var Width: Single; var Height: Single; 
                            FontSize: Single; Alignment: TextAlignment; FontStyle: FontStyle; 
                            const FontName: WideString; AntiAlias: WordBool; 
                            var CharactersFitted: Integer; var LinesFilled: Integer): GdPictureStatus; safecall;
    procedure MICRClear; safecall;
    function MICRDoMICR(ImageID: Integer; SymbolsFont: MICRFont; Context: MICRContext; 
                        const WhiteList: WideString; ExpectedSymbols: Integer): WideString; safecall;
    function MICRGetSymbolBottom(SymbolNo: Integer): Integer; safecall;
    function MICRGetSymbolConfidence(SymbolNo: Integer; Candidate: Integer): Single; safecall;
    function MICRGetSymbolLeft(SymbolNo: Integer): Integer; safecall;
    function MICRGetSymbolLine(SymbolNo: Integer): Integer; safecall;
    function MICRGetSymbolRight(SymbolNo: Integer): Integer; safecall;
    function MICRGetSymbolsCount: Integer; safecall;
    function MICRGetSymbolTop(SymbolNo: Integer): Integer; safecall;
    function MICRGetSymbolValue(SymbolNo: Integer; Candidate: Integer): WideString; safecall;
    function OMRDetectMarks(ImageID: Integer; var Areas: PSafeArray; AreasCount: Integer; 
                            Sensitivity: Double; var Confidence: PSafeArray; HasCharacter: WordBool): PSafeArray; safecall;
    function OMRDetectOvalMarks(ImageID: Integer; var Areas: PSafeArray; AreasCount: Integer; 
                                Sensitivity: Double; var Confidence: PSafeArray; 
                                HasCharacter: WordBool): PSafeArray; safecall;
    function PaletteGetColorsCount(ImageID: Integer): Integer; safecall;
    function PaletteGetType(ImageID: Integer): PaletteType; safecall;
    function PaletteHasTransparentColor(ImageID: Integer): WordBool; safecall;
    function PaletteSetTransparentColor(ImageID: Integer; TransparentColor: Integer): GdPictureStatus; safecall;
    function PaletteSwapEntries(ImageID: Integer; Entrie1: Integer; Entrie2: Integer): GdPictureStatus; safecall;
    procedure PatchCodeReaderClear; safecall;
    function PatchCodeReaderDoScan(ImageID: Integer): GdPictureStatus; safecall;
    function PatchCodeReaderGetCodeCount: Integer; safecall;
    function PatchCodeReaderGetCodeType(PatchCodeNo: Integer): PatchCodeType; safecall;
    function PatchCodeReaderGetCodeX1(PatchCodeNo: Integer): Integer; safecall;
    function PatchCodeReaderGetCodeX2(PatchCodeNo: Integer): Integer; safecall;
    function PatchCodeReaderGetCodeX3(PatchCodeNo: Integer): Integer; safecall;
    function PatchCodeReaderGetCodeX4(PatchCodeNo: Integer): Integer; safecall;
    function PatchCodeReaderGetCodeY1(PatchCodeNo: Integer): Integer; safecall;
    function PatchCodeReaderGetCodeY2(PatchCodeNo: Integer): Integer; safecall;
    function PatchCodeReaderGetCodeY3(PatchCodeNo: Integer): Integer; safecall;
    function PatchCodeReaderGetCodeY4(PatchCodeNo: Integer): Integer; safecall;
    function PdfCreateFromMultipageTIFF(ImageID: Integer; const PdfFileDest: WideString; 
                                        PDFA: WordBool; const Title: WideString; 
                                        const Author: WideString; const Subject: WideString; 
                                        const Keywords: WideString; const Creator: WideString): GdPictureStatus; safecall;
    function PdfCreateFromMultipageTIFF_2(ImageID: Integer; const PdfFileDest: WideString; 
                                          PDFA: WordBool; const Title: WideString; 
                                          const Author: WideString; const Subject: WideString; 
                                          const Keywords: WideString; const Creator: WideString; 
                                          BitonalCompressionScheme: PdfCompression; 
                                          ColorCompressionScheme: PdfCompression): GdPictureStatus; safecall;
    function PdfCreateFromMultipageTIFF_3(ImageID: Integer; const PdfFileDest: WideString; 
                                          const Title: WideString; const Author: WideString; 
                                          const Subject: WideString; const Keywords: WideString; 
                                          const Creator: WideString; Encryption: PdfEncryption; 
                                          Rights: PdfRight; const UserPassword: WideString; 
                                          const OwnerPassword: WideString): GdPictureStatus; safecall;
    function PdfCreateFromMultipageTIFF_4(ImageID: Integer; const PdfFileDest: WideString; 
                                          const Title: WideString; const Author: WideString; 
                                          const Subject: WideString; const Keywords: WideString; 
                                          const Creator: WideString; Encryption: PdfEncryption; 
                                          Rights: PdfRight; const UserPassword: WideString; 
                                          const OwnerPassword: WideString; 
                                          BitonalCompressionScheme: PdfCompression; 
                                          ColorCompressionScheme: PdfCompression): GdPictureStatus; safecall;
    function PdfCreateRights(CanPrint: WordBool; CanModify: WordBool; CanCopy: WordBool; 
                             CanAddNotes: WordBool; CanFillFields: WordBool; 
                             CanCopyAccess: WordBool; CanAssemble: WordBool; CanPrintFull: WordBool): PdfRight; safecall;
    function PixelGetColorI(ImageID: Integer; SrcLeft: Integer; SrcTop: Integer): Integer; safecall;
    function PixelSetColorI(ImageID: Integer; DstLeft: Integer; DstTop: Integer; PixelColor: Integer): GdPictureStatus; safecall;
    function Print(ImageID: Integer): GdPictureStatus; safecall;
    function PrintBySize(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                         Height: Single): GdPictureStatus; safecall;
    function PrintDialog(ImageID: Integer): WordBool; safecall;
    function PrintDialogBySize(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                               Height: Single): WordBool; safecall;
    function PrintDialogFit(ImageID: Integer): WordBool; safecall;
    function PrintFit(ImageID: Integer): GdPictureStatus; safecall;
    function PrintGetActivePrinter: WideString; safecall;
    function PrintGetAlignment: PrintAlignment; safecall;
    function PrintGetCollate: WordBool; safecall;
    function PrintGetColorMode: PrinterColorMode; safecall;
    function PrintGetCopies: Smallint; safecall;
    function PrintGetDocumentName: WideString; safecall;
    function PrintGetDuplexMode: Duplex; safecall;
    function PrintGetLastError: WideString; safecall;
    function PrintGetMargins(var LeftMargin: Single; var TopMargin: Single): GdPictureStatus; safecall;
    function PrintGetOrientation: PrinterOrientation; safecall;
    function PrintGetPaperBin: Integer; safecall;
    function PrintGetPaperHeight: Single; safecall;
    function PrintGetPaperSize: Integer; safecall;
    function PrintGetPaperWidth: Single; safecall;
    function PrintGetPrinterName(PrinterNo: Integer): WideString; safecall;
    function PrintGetPrintersCount: Integer; safecall;
    function PrintGetQuality: PrintQuality; safecall;
    function PrintGetStat: GdPictureStatus; safecall;
    function PrintInterop(ImageID: Integer): GdPictureStatus; safecall;
    function PrintSetActivePrinter(const PrinterName: WideString): WordBool; safecall;
    function PrintSetAlignment(Alignment: PrintAlignment): GdPictureStatus; safecall;
    function PrintSetAutoRotation(AutoRotation: WordBool): GdPictureStatus; safecall;
    function PrintSetCollate(Collate: WordBool): GdPictureStatus; safecall;
    function PrintSetColorMode(ColorMode: PrinterColorMode): GdPictureStatus; safecall;
    function PrintSetCopies(Copies: Smallint): GdPictureStatus; safecall;
    function PrintSetDocumentName(const DocumentName: WideString): GdPictureStatus; safecall;
    function PrintSetDuplexMode(DuplexMode: Duplex): GdPictureStatus; safecall;
    function PrintSetFromToPage(FromPage: Integer; ToPage: Integer): GdPictureStatus; safecall;
    function PrintSetOrientation(Orientation: PrinterOrientation): GdPictureStatus; safecall;
    function PrintSetPageSelection(const CustomRange: WideString): GdPictureStatus; safecall;
    function PrintSetPaperBin(PaperBin: Integer): WordBool; safecall;
    function PrintSetQuality(Quality: PrintQuality): GdPictureStatus; safecall;
    function PrintSetShowPrintingProgress(Show: WordBool): GdPictureStatus; safecall;
    function PrintSetStdPaperSize(PaperSize: Integer): GdPictureStatus; safecall;
    function PrintSetUserPaperSize(PaperWidth: Single; PaperHeight: Single): GdPictureStatus; safecall;
    function PrintShowPrinterSettingsDialog(HANDLE: Integer): GdPictureStatus; safecall;
    procedure ReleaseDib(Dib: Integer); safecall;
    function ReleaseGdPictureImage(ImageID: Integer): GdPictureStatus; safecall;
    procedure ReleaseHBitmapI(hBitmap: Integer); safecall;
    function ReleaseHdcFromGdPictureImage(ImageID: Integer): GdPictureStatus; safecall;
    function RemoveBlob(ImageID: Integer; MinBlobWidth: Integer; MinBlobHeight: Integer; 
                        MaxBlobWidth: Integer; MaxBlobHeight: Integer; Mode: Byte): GdPictureStatus; safecall;
    function RemoveBlob_2(ImageID: Integer; MinBlobWidth: Integer; MinBlobHeight: Integer; 
                          MaxBlobWidth: Integer; MaxBlobHeight: Integer; MinFillPercent: Integer; 
                          MaxFillPercent: Integer): GdPictureStatus; safecall;
    function RemoveBlueComponent(ImageID: Integer): GdPictureStatus; safecall;
    function RemoveGreenComponent(ImageID: Integer): GdPictureStatus; safecall;
    function RemoveHolePunch(ImageID: Integer): GdPictureStatus; safecall;
    function RemoveHolePunch_2(ImageID: Integer; Margins: HolePunchMargins): GdPictureStatus; safecall;
    function RemoveLines(ImageID: Integer; Orientation: LineRemoveOrientation): GdPictureStatus; safecall;
    function RemoveLines_2(ImageID: Integer; Orientation: LineRemoveOrientation; 
                           MaxLineGap: Integer; MaxLineThickness: Integer; MinLineLength: Integer; 
                           MaxInterception: Integer; ReConnectBrokenCharacters: WordBool): GdPictureStatus; safecall;
    function RemoveRedComponent(ImageID: Integer): GdPictureStatus; safecall;
    function RemoveStapleMark(ImageID: Integer): GdPictureStatus; safecall;
    procedure ResetROI; safecall;
    function Resize(ImageID: Integer; NewImageWidth: Integer; NewImageHeight: Integer; 
                    InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function ResizeHeightRatio(ImageID: Integer; NewImageHeight: Integer; 
                               InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function ResizeWidthRatio(ImageID: Integer; NewImageWidth: Integer; 
                              InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function Rotate(ImageID: Integer; Rotation: RotateFlipType): GdPictureStatus; safecall;
    function RotateAngle(ImageID: Integer; Angle: Single): GdPictureStatus; safecall;
    function RotateAngleBackColor(ImageID: Integer; Angle: Single; BackColor: Integer): GdPictureStatus; safecall;
    function RotateAnglePreserveDimensions(ImageID: Integer; Angle: Single): GdPictureStatus; safecall;
    function RotateAnglePreserveDimensionsBackColor(ImageID: Integer; Angle: Single; 
                                                    BackColor: Integer): GdPictureStatus; safecall;
    function RotateAnglePreserveDimensionsCenter(ImageID: Integer; Angle: Single): GdPictureStatus; safecall;
    function SaveAsBMP(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsBMP_2(ImageID: Integer; const FilePath: WideString; UseRLE: WordBool): GdPictureStatus; safecall;
    function SaveAsByteArray(ImageID: Integer; var Data: PSafeArray; var Length: Integer; 
                             ImageFormat: DocumentFormat; EncoderParameter: Integer): GdPictureStatus; safecall;
    function SaveAsEXR(ImageID: Integer; const FilePath: WideString; Compression: ExrCompression): GdPictureStatus; safecall;
    function SaveAsGIF(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsICO(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsICO_2(ImageID: Integer; const FilePath: WideString; IconSize: IconSize): GdPictureStatus; safecall;
    function SaveAsIStream(ImageID: Integer; const Stream: IUnknown; ImageFormat: DocumentFormat; 
                           EncoderParameter: Integer): GdPictureStatus; safecall;
    function SaveAsJ2K(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsJ2K_2(ImageID: Integer; const FilePath: WideString; Rate: Integer): GdPictureStatus; safecall;
    function SaveAsJBIG2(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsJP2(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsJP2_2(ImageID: Integer; const FilePath: WideString; Rate: Integer): GdPictureStatus; safecall;
    function SaveAsJPEG(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsJPEG_2(ImageID: Integer; const FilePath: WideString; Quality: Integer): GdPictureStatus; safecall;
    function SaveAsJPEG_3(ImageID: Integer; const FilePath: WideString; Quality: Integer; 
                          Progressive: WordBool): GdPictureStatus; safecall;
    function SaveAsJPEG_4(ImageID: Integer; const FilePath: WideString; Quality: Integer; 
                          Progressive: WordBool; JPEGSubsamplingMode: JPEGSubsamplingMode): GdPictureStatus; safecall;
    function SaveAsPBM(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsPDF(ImageID: Integer; const FilePath: WideString; PDFA: WordBool; 
                       const Title: WideString; const Author: WideString; 
                       const Subject: WideString; const Keywords: WideString; 
                       const Creator: WideString): GdPictureStatus; safecall;
    function SaveAsPDF_2(ImageID: Integer; const FilePath: WideString; const Title: WideString; 
                         const Author: WideString; const Subject: WideString; 
                         const Keywords: WideString; const Creator: WideString; 
                         Encryption: PdfEncryption; Rights: PdfRight; 
                         const UserPassword: WideString; const OwnerPassword: WideString): GdPictureStatus; safecall;
    function SaveAsPDF_3(ImageID: Integer; const PDFStream: IUnknown; const Title: WideString; 
                         const Author: WideString; const Subject: WideString; 
                         const Keywords: WideString; const Creator: WideString; 
                         Encryption: PdfEncryption; Rights: PdfRight; 
                         const UserPassword: WideString; const OwnerPassword: WideString): GdPictureStatus; safecall;
    function SaveAsPNG(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsPNG_2(ImageID: Integer; const FilePath: WideString; CompressionLevel: Integer; 
                         Interlaced: WordBool): GdPictureStatus; safecall;
    function SaveAsString(ImageID: Integer; ImageFormat: DocumentFormat; EncoderParameter: Integer): WideString; safecall;
    function SaveAsTGA(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsTIFF(ImageID: Integer; const FilePath: WideString; Compression: TiffCompression): GdPictureStatus; safecall;
    function SaveAsTIFF_2(ImageID: Integer; const FilePath: WideString; 
                          Compression: TiffCompression; JpegQuality: Integer): GdPictureStatus; safecall;
    function SaveAsTIFF_3(ImageID: Integer; const FilePath: WideString; CMYKMode: WordBool; 
                          Compression: TiffCompression): GdPictureStatus; safecall;
    function SaveAsTIFF_4(ImageID: Integer; const FilePath: WideString; CMYKMode: WordBool; 
                          Compression: TiffCompression; JpegQuality: Integer): GdPictureStatus; safecall;
    function SaveAsWBMP(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsWEBP(ImageID: Integer; const FilePath: WideString; Quality: Single; 
                        Method: Integer): GdPictureStatus; safecall;
    function SaveAsWMF(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAsXPM(ImageID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function SaveToFTP(ImageID: Integer; ImageFormat: DocumentFormat; EncoderParameter: Integer; 
                       const Host: WideString; const Path: WideString; const Login: WideString; 
                       const Password: WideString; FTPPort: Integer): GdPictureStatus; safecall;
    function SaveToHTTP(ImageID: Integer; ImageFormat: DocumentFormat; EncoderParameter: Integer; 
                        const Address: WideString): GdPictureStatus; safecall;
    function SaveToHTTP_2(ImageID: Integer; ImageFormat: DocumentFormat; EncoderParameter: Integer; 
                          const Address: WideString; const Login: WideString; 
                          const Password: WideString): GdPictureStatus; safecall;
    function Scale(ImageID: Integer; ScalePercent: Single; InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function ScaleBlueComponent(ImageID: Integer; Factor: Single): GdPictureStatus; safecall;
    function ScaleEx(ImageID: Integer; ScalePercent: Single; InterpolationMode: InterpolationMode): GdPictureStatus; safecall;
    function ScaleGreenComponent(ImageID: Integer; Factor: Single): GdPictureStatus; safecall;
    function ScaleRedComponent(ImageID: Integer; Factor: Single): GdPictureStatus; safecall;
    function SelectPage_2(ImageID: Integer; PageNo: Integer; DirectAccess: WordBool): GdPictureStatus; safecall;
    function SelectPage(ImageID: Integer; PageNo: Integer): GdPictureStatus; safecall;
    function SetAlphaChannel(ImageID: Integer; var Alpha: PSafeArray; SrcLeft: Integer; 
                             SrcTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; safecall;
    function SetBCSG(ImageID: Integer; Brightness: Integer; Contrast: Integer; Saturation: Integer; 
                     Gamma: Integer): GdPictureStatus; safecall;
    function SetBrightness(ImageID: Integer; Brightness: Integer): GdPictureStatus; safecall;
    procedure SetCacheMode(CacheMode: PageCacheMode); safecall;
    function SetContrast(ImageID: Integer; Contrast: Integer): GdPictureStatus; safecall;
    procedure SetFtpPassiveMode(PassiveMode: WordBool); safecall;
    function SetGammaCorrection(ImageID: Integer; Gamma: Integer): GdPictureStatus; safecall;
    function SetHorizontalResolution(ImageID: Integer; HorizontalResolution: Single): GdPictureStatus; safecall;
    procedure SetHttpTransferBufferSize(Buffersize: Integer); safecall;
    function SetPixelArrayByte(ImageID: Integer; var Data: PSafeArray; DstLeft: Integer; 
                               DstTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; safecall;
    function SetPixelArrayByte8bpp(ImageID: Integer; var Data: PSafeArray; DstLeft: Integer; 
                                   DstTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; safecall;
    function SetPixelArrayByteBGR(ImageID: Integer; var Data: PSafeArray; DstLeft: Integer; 
                                  DstTop: Integer; Width: Integer; Height: Integer; 
                                  InputIsRGB: WordBool): GdPictureStatus; safecall;
    function SetPixelArrayInteger(ImageID: Integer; var Data: PSafeArray; DstLeft: Integer; 
                                  DstTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; safecall;
    procedure SetRawImageLoadingOptions(Options: RAWImageLoadingOptions); safecall;
    procedure SetROI(Left: Integer; Top: Integer; Width: Integer; Height: Integer); safecall;
    function SetSaturation(ImageID: Integer; Saturation: Integer): GdPictureStatus; safecall;
    function SetTransparency(ImageID: Integer; TransparencyValue: Integer): GdPictureStatus; safecall;
    function SetTransparencyColor(ImageID: Integer; TransparentColor: Integer): GdPictureStatus; safecall;
    function SetTransparencyColor_2(ImageID: Integer; TransparentColor: Integer; Threshold: Single): GdPictureStatus; safecall;
    function SetVerticalResolution(ImageID: Integer; VerticalResolution: Single): GdPictureStatus; safecall;
    function SwapColor(ImageID: Integer; ColorSrc: Integer; ColorDst: Integer; Threshold: Single): GdPictureStatus; safecall;
    function SwapColorsRGBtoBGR(ImageID: Integer): GdPictureStatus; safecall;
    function SwapColorsRGBtoBRG(ImageID: Integer): GdPictureStatus; safecall;
    function SwapColorsRGBtoGBR(ImageID: Integer): GdPictureStatus; safecall;
    function SwapColorsRGBtoGRB(ImageID: Integer): GdPictureStatus; safecall;
    function SwapColorsRGBtoRBG(ImageID: Integer): GdPictureStatus; safecall;
    function TagCount(ImageID: Integer): Integer; safecall;
    function TagDelete(ImageID: Integer; TagNo: Integer): GdPictureStatus; safecall;
    function TagDeleteAll(ImageID: Integer): GdPictureStatus; safecall;
    function TagGetExifRotation(ImageID: Integer): GdPictureRotateFlipType; safecall;
    function TagGetID(ImageID: Integer; TagNo: Integer): Tags; safecall;
    function TagGetLength(ImageID: Integer; TagNo: Integer): Integer; safecall;
    function TagGetName(ImageID: Integer; TagNo: Integer): WideString; safecall;
    function TagGetType(ImageID: Integer; TagNo: Integer): TagType; safecall;
    function TagGetValueBytes(ImageID: Integer; TagNo: Integer; var Data: PSafeArray): Integer; safecall;
    function TagGetValueString(ImageID: Integer; TagNo: Integer): WideString; safecall;
    function TagGetValueToHandle(ImageID: Integer; TagNo: Integer; HDest: Integer): GdPictureStatus; safecall;
    function TagGetXMLPacket(ImageID: Integer): WideString; safecall;
    function TagSetValueBytes(ImageID: Integer; TagID: Tags; TagType: TagType; var Data: PSafeArray): GdPictureStatus; safecall;
    function TagSetValueHandle(ImageID: Integer; TagID: Tags; TagType: TagType; HData: Integer; 
                               Len: Integer): GdPictureStatus; safecall;
    function TagSetValueString(ImageID: Integer; TagID: Tags; TagType: TagType; 
                               const TagData: WideString): GdPictureStatus; safecall;
    function TagSetXMLPacket(ImageID: Integer; const XMLPacket: WideString): GdPictureStatus; safecall;
    procedure TagsSetPreserve(Preserve: WordBool); safecall;
    function TiffAddToMultiPageFile(TiffImageID: Integer; ImageID: Integer): GdPictureStatus; safecall;
    function TiffAddToMultiPageFile_2(TiffImageID: Integer; ImageID: Integer; 
                                      Compression: TiffCompression): GdPictureStatus; safecall;
    function TiffAddToMultiPageFile_3(TiffImageID: Integer; ImageID: Integer; 
                                      Compression: TiffCompression; JpegQuality: Integer): GdPictureStatus; safecall;
    function TiffAppendPageFromFile(EditableTiffID: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function TiffAppendPageFromGdPictureImage(ImageID: Integer; ImageToAddID: Integer): GdPictureStatus; safecall;
    function TiffCloseMultiPageFile(TiffImageID: Integer): GdPictureStatus; safecall;
    function TiffCreateMultiPageFromFile(const FilePath: WideString): Integer; safecall;
    function TiffCreateMultiPageFromFile_2(const FilePath: WideString; LoadInMemory: WordBool): Integer; safecall;
    function TiffCreateMultiPageFromGdPictureImage(ImageID: Integer): Integer; safecall;
    function TiffDeletePage(EditableTiffID: Integer; Page: Integer): GdPictureStatus; safecall;
    function TiffExtractPage(ImageID: Integer; Page: Integer; const FilePath: WideString): GdPictureStatus; safecall;
    function TiffExtractPage_2(ImageID: Integer; Page: Integer; const FilePath: WideString; 
                               Compression: TiffCompression): GdPictureStatus; safecall;
    function TiffGetCurrentPage(ImageID: Integer): Integer; safecall;
    function TiffGetPageCount(ImageID: Integer): Integer; safecall;
    function TiffInsertPageFromFile(EditableTiffID: Integer; Position: Integer; 
                                    const FilePath: WideString): GdPictureStatus; safecall;
    function TiffInsertPageFromGdPictureImage(EditableTiffID: Integer; Position: Integer; 
                                              ImageToAddID: Integer): GdPictureStatus; safecall;
    function TiffIsEditableMultiPage(ImageID: Integer): WordBool; safecall;
    function TiffIsMultiPage(ImageID: Integer): WordBool; safecall;
    function TiffMerge2Files(const FilePath1: WideString; const FilePath2: WideString; 
                             const FileDest: WideString; Compression: TiffCompression): GdPictureStatus; safecall;
    function TiffMergeFileList(const FilesList: WideString; const FileDest: WideString; 
                               Compression: TiffCompression): GdPictureStatus; safecall;
    function TiffMergeFiles(var FilePath: PSafeArray; const FileDest: WideString; 
                            Compression: TiffCompression): GdPictureStatus; safecall;
    function TiffMovePage(ImageID: Integer; PageNo: Integer; Destination: Integer): GdPictureStatus; safecall;
    procedure TiffOpenMultiPageForWrite(WriteAccess: WordBool); safecall;
    function TiffSaveAsMultiPageFile(ImageID: Integer; const FilePath: WideString; 
                                     Compression: TiffCompression): GdPictureStatus; safecall;
    function TiffSaveAsMultiPageFile_2(ImageID: Integer; const FilePath: WideString; 
                                       Compression: TiffCompression; JpegQuality: Integer): GdPictureStatus; safecall;
    function TiffSaveMultiPageToFile(ImageID: Integer; const FilePath: WideString; 
                                     Compression: TiffCompression): GdPictureStatus; safecall;
    function TiffSaveMultiPageToFile_2(ImageID: Integer; const FilePath: WideString; 
                                       Compression: TiffCompression; JpegQuality: Integer): GdPictureStatus; safecall;
    function TiffSelectPage(ImageID: Integer; Page: Integer): GdPictureStatus; safecall;
    function TiffSwapPages(ImageID: Integer; Page1: Integer; Page2: Integer): GdPictureStatus; safecall;
    function TransformJPEG(const InputFile: WideString; const OutputFile: WideString; 
                           Transformation: JPEGTransformation): GdPictureStatus; safecall;
    function TwainAcquireToFile(const FilePath: WideString; HANDLE: Integer): GdPictureStatus; safecall;
    function TwainAcquireToGdPictureImage(HANDLE: Integer): Integer; safecall;
    function TwainAcquireToMemoryFile(const FilePath: WideString; HANDLE: Integer): GdPictureStatus; safecall;
    function TwainAcquireToDibI(HANDLE: Integer): Integer; safecall;
    function TwainBarCodeGetConfidence(BarcodeNo: Integer): Integer; safecall;
    function TwainBarCodeGetCount: Integer; safecall;
    function TwainBarCodeGetRotation(BarcodeNo: Integer): TwainBarCodeRotation; safecall;
    function TwainBarCodeGetType(BarcodeNo: Integer): TwainBarCodeType; safecall;
    function TwainBarCodeGetValue(BarcodeNo: Integer): WideString; safecall;
    function TwainBarCodeGetXPos(BarcodeNo: Integer): Integer; safecall;
    function TwainBarCodeGetYPos(BarcodeNo: Integer): Integer; safecall;
    function TwainCloseSource: WordBool; safecall;
    function TwainCloseSourceManager(HANDLE: Integer): WordBool; safecall;
    function TwainDisableSource: WordBool; safecall;
    function TwainEnableDuplex(Duplex: WordBool): WordBool; safecall;
    function TwainEnableImprinter(Enabled: WordBool): WordBool; safecall;
    procedure TwainEnableMemoryTransferMode(Enabled: WordBool); safecall;
    function TwainEndAllXfers: WordBool; safecall;
    function TwainEndXfer: WordBool; safecall;
    function TwainGetAvailableBarCodeTypeCount: Integer; safecall;
    function TwainGetAvailableBarCodeTypeNo(Number: Integer): TwainBarCodeType; safecall;
    function TwainGetAvailableBitDepthCount: Integer; safecall;
    function TwainGetAvailableBitDepthNo(Number: Integer): Integer; safecall;
    function TwainGetAvailableBrightnessCount: Integer; safecall;
    function TwainGetAvailableBrightnessNo(Number: Integer): Double; safecall;
    function TwainGetAvailableCapValueNoNumeric(Cap: TwainCapabilities; Number: Integer): Double; safecall;
    function TwainGetAvailableCapValueNoString(Cap: TwainCapabilities; Number: Integer): WideString; safecall;
    function TwainGetAvailableCapValuesCount(Cap: TwainCapabilities): Integer; safecall;
    function TwainGetAvailableCompressionCount: Integer; safecall;
    function TwainGetAvailableCompressionNo(Number: Integer): TwainCompression; safecall;
    function TwainGetAvailableContrastCount: Integer; safecall;
    function TwainGetAvailableContrastNo(Number: Integer): Double; safecall;
    function TwainGetAvailableImageFileFormatCount: Integer; safecall;
    function TwainGetAvailableImageFileFormatNo(Number: Integer): TwainImageFileFormats; safecall;
    function TwainGetAvailableImprinterModeCount: Integer; safecall;
    function TwainGetAvailableImprinterModeNo(Number: Integer): TwainPrinterMode; safecall;
    function TwainGetAvailablePaperSizeCount: Integer; safecall;
    function TwainGetAvailablePaperSizeNo(Number: Integer): TwainPaperSize; safecall;
    function TwainGetAvailablePixelTypeCount: Integer; safecall;
    function TwainGetAvailablePixelTypeNo(Number: Integer): TwainPixelType; safecall;
    function TwainGetAvailableXResolutionCount: Integer; safecall;
    function TwainGetAvailableXResolutionNo(No: Integer): Integer; safecall;
    function TwainGetAvailableYResolutionCount: Integer; safecall;
    function TwainGetAvailableYResolutionNo(No: Integer): Integer; safecall;
    function TwainGetBitDepth: Integer; safecall;
    function TwainGetBitDepthReduction: TwainBitDepthReduction; safecall;
    function TwainGetBrightness: Integer; safecall;
    function TwainGetCapCurrentNumeric(Cap: TwainCapabilities; var CurrentValue: Double): WordBool; safecall;
    function TwainGetCapCurrentString(Cap: TwainCapabilities; var CurrentValue: WideString): WordBool; safecall;
    function TwainGetCapDefaultNumeric(Cap: TwainCapabilities; var CurrentValue: Double): WordBool; safecall;
    function TwainGetCapDefaultString(Cap: TwainCapabilities; var CurrentValue: WideString): WordBool; safecall;
    function TwainGetCapItemType(Cap: TwainCapabilities): TwainItemTypes; safecall;
    function TwainGetCapQuerySupport(Cap: TwainCapabilities; var SupportGet: WordBool; 
                                     var SupportSet: WordBool; var SupportGetDefault: WordBool; 
                                     var SupportGetCurrent: WordBool; var SupportReset: WordBool): WordBool; safecall;
    function TwainGetCapRangeNumeric(Cap: TwainCapabilities; var nMinValue: Double; 
                                     var nMaxValue: Double; var nStepValue: Double): WordBool; safecall;
    function TwainGetCompression: TwainCompression; safecall;
    function TwainGetContrast: Integer; safecall;
    function TwainGetCurrentSourceName(HANDLE: Integer): WideString; safecall;
    function TwainGetDefaultSourceName(HANDLE: Integer): WideString; safecall;
    function TwainGetDuplexMode: Integer; safecall;
    function TwainGetEndorserNumber: Integer; safecall;
    function TwainGetGamma: Double; safecall;
    function TwainGetHideUI: WordBool; safecall;
    function TwainGetImageFileFormat: TwainImageFileFormats; safecall;
    function TwainGetImageLayout(var Left: Double; var Top: Double; var Right: Double; 
                                 var Bottom: Double): WordBool; safecall;
    function TwainGetImprinterIndex: Integer; safecall;
    function TwainGetImprinterMode: TwainPrinterMode; safecall;
    function TwainGetImprinterString: WideString; safecall;
    function TwainGetImprinterSuffix: WideString; safecall;
    function TwainGetLastConditionCode: TwainConditionCode; safecall;
    function TwainGetLastEndorsedString: WideString; safecall;
    function TwainGetLastPageSide: TwainPageSide; safecall;
    function TwainGetLastPrintedString: WideString; safecall;
    function TwainGetLastResultCode: TwainResultCode; safecall;
    function TwainGetModalUI: WordBool; safecall;
    function TwainGetNoiseFilter: TwainNoiseFilterMode; safecall;
    function TwainGetOrientation: TwainOrientation; safecall;
    function TwainGetPaperSize: TwainPaperSize; safecall;
    function TwainGetPendingXfersCount: Integer; safecall;
    function TwainGetPhysicalHeight: Double; safecall;
    function TwainGetPhysicalWidth: Double; safecall;
    function TwainGetPixelFlavor: TwainPixelFlavor; safecall;
    function TwainGetPixelType: TwainPixelType; safecall;
    function TwainGetPlanarChunky: Integer; safecall;
    function TwainGetResolution: Integer; safecall;
    function TwainGetRotation: Double; safecall;
    function TwainGetSourceCount(HANDLE: Integer): Integer; safecall;
    function TwainGetSourceFamily(HANDLE: Integer; SourceNo: Integer): WideString; safecall;
    function TwainGetSourceManufacturer(HANDLE: Integer; SourceNo: Integer): WideString; safecall;
    function TwainGetSourceName(HANDLE: Integer; SourceNo: Integer): WideString; safecall;
    function TwainGetSourceVersionInfo(HANDLE: Integer; SourceNo: Integer; var MajorNum: Integer; 
                                       var MinorNum: Integer; var Language: TwainLanguage; 
                                       var Country: TwainCountry; var Info: WideString): GdPictureStatus; safecall;
    function TwainGetState: TwainStatus; safecall;
    function TwainGetThreshold: Integer; safecall;
    function TwainGetXScaling: Double; safecall;
    function TwainGetYScaling: Double; safecall;
    function TwainHasCameraPreviewUI: WordBool; safecall;
    function TwainHasFeeder: WordBool; safecall;
    function TwainHasFlatBed: WordBool; safecall;
    function TwainIsAutoBrightnessAvailable: WordBool; safecall;
    function TwainIsAutoBrightnessEnabled: WordBool; safecall;
    function TwainIsAutoFeedAvailable: WordBool; safecall;
    function TwainIsAutoFeedEnabled: WordBool; safecall;
    function TwainIsAutomaticBorderDetectionAvailable: WordBool; safecall;
    function TwainIsAutomaticBorderDetectionEnabled: WordBool; safecall;
    function TwainIsAutomaticColorAvailable: WordBool; safecall;
    function TwainIsAutomaticColorEnabled: WordBool; safecall;
    function TwainIsAutomaticDeskewAvailable: WordBool; safecall;
    function TwainIsAutomaticDeskewEnabled: WordBool; safecall;
    function TwainIsAutomaticDiscardBlankPagesAvailable: WordBool; safecall;
    function TwainIsAutomaticDiscardBlankPagesEnabled: WordBool; safecall;
    function TwainIsAutomaticRotationAvailable: WordBool; safecall;
    function TwainIsAutomaticRotationEnabled: WordBool; safecall;
    function TwainIsAutoScanAvailable: WordBool; safecall;
    function TwainIsAutoScanEnabled: WordBool; safecall;
    function TwainIsAutoSizeAvailable: WordBool; safecall;
    function TwainIsAutoSizeEnabled: WordBool; safecall;
    function TwainIsAvailable: WordBool; safecall;
    function TwainIsBarcodeDetectionAvailable: WordBool; safecall;
    function TwainIsBarcodeDetectionEnabled: WordBool; safecall;
    function TwainIsDeviceOnline: WordBool; safecall;
    function TwainIsDuplexEnabled: WordBool; safecall;
    function TwainIsEndorserAvailable: WordBool; safecall;
    function TwainIsFeederLoaded: WordBool; safecall;
    function TwainIsFeederSelected: WordBool; safecall;
    function TwainIsFileTransferModeAvailable: WordBool; safecall;
    function TwainIsGammaAvailable: WordBool; safecall;
    function TwainIsImprinterAvailable: WordBool; safecall;
    function TwainIsImprinterEnabled: WordBool; safecall;
    function TwainIsMemoryTransferModeAvailable: WordBool; safecall;
    function TwainIsNoiseFilterAvailable: WordBool; safecall;
    function TwainIsOrientationAvailable: WordBool; safecall;
    function TwainIsPixelTypeAvailable(PixelType: TwainPixelType): WordBool; safecall;
    function TwainIsRotationAvailable: WordBool; safecall;
    function TwainIsSetupDialogSourceAvailable: WordBool; safecall;
    function TwainIsXScalingAvailable: WordBool; safecall;
    function TwainIsYScalingAvailable: WordBool; safecall;
    function TwainLastXferFail: WordBool; safecall;
    function TwainLoadConfiguration(const FilePath: WideString): WordBool; safecall;
    function TwainLoadConfiguration_2(var Data: PSafeArray): WordBool; safecall;
    function TwainLogStart(const LogPath: WideString): WordBool; safecall;
    procedure TwainLogStop; safecall;
    function TwainOpenDefaultSource(HANDLE: Integer): WordBool; safecall;
    function TwainOpenSource(HANDLE: Integer; const SourceName: WideString): WordBool; safecall;
    function TwainResetCap(Cap: TwainCapabilities): WordBool; safecall;
    function TwainResetImageLayout: WordBool; safecall;
    function TwainSaveConfiguration(const FilePath: WideString): WordBool; safecall;
    function TwainSaveConfiguration_2(var Data: PSafeArray): WordBool; safecall;
    function TwainSelectFeeder(SelectFeeder: WordBool): WordBool; safecall;
    function TwainSelectSource(HANDLE: Integer): WordBool; safecall;
    procedure TwainSetApplicationInfo(MajorNumVersion: Integer; MinorNumVersion: Integer; 
                                      LanguageID: TwainLanguage; CountryID: TwainCountry; 
                                      const VersionInfo: WideString; const CompanyName: WideString; 
                                      const ProductFamily: WideString; const ProductName: WideString); safecall;
    function TwainSetAutoBrightness(AutoBrightness: WordBool): WordBool; safecall;
    function TwainSetAutoFeed(AutoFeed: WordBool): WordBool; safecall;
    function TwainSetAutomaticBorderDetection(AutoBorderDetect: WordBool): WordBool; safecall;
    function TwainSetAutomaticColor(AutomaticColor: WordBool): WordBool; safecall;
    function TwainSetAutomaticDeskew(AutoDeskew: WordBool): WordBool; safecall;
    function TwainSetAutomaticDiscardBlankPages(AutoDiscard: WordBool): WordBool; safecall;
    function TwainSetAutomaticRotation(AutoRotate: WordBool): WordBool; safecall;
    function TwainSetAutoScan(AutoScan: WordBool): WordBool; safecall;
    function TwainSetAutoSize(AutoSize: WordBool): WordBool; safecall;
    procedure TwainSetAutoSourceClose(AutoSourceClose: WordBool); safecall;
    procedure TwainSetKeepSourceEnabled(KeepSourceEnabled: WordBool); safecall;
    function TwainSetBarcodeDetection(bBarcodeDetection: WordBool): WordBool; safecall;
    function TwainSetBitDepth(BitDepth: Integer): WordBool; safecall;
    function TwainSetBitDepthReduction(BitDepthReduction: TwainBitDepthReduction): WordBool; safecall;
    function TwainSetBrightness(Brightness: Integer): WordBool; safecall;
    function TwainSetCapCurrentNumeric(Cap: TwainCapabilities; ItemType: TwainItemTypes; 
                                       NewValue: Double): WordBool; safecall;
    function TwainSetCapCurrentString(Cap: TwainCapabilities; ItemType: TwainItemTypes; 
                                      const NewValue: WideString): WordBool; safecall;
    function TwainSetCompression(Compression: TwainCompression): WordBool; safecall;
    function TwainSetContrast(Contrast: Integer): WordBool; safecall;
    procedure TwainSetDebugMode(DebugMode: WordBool); safecall;
    procedure TwainSetDSMPath(const DSMPath: WideString); safecall;
    function TwainSetEndorserNumber(Number: Integer): WordBool; safecall;
    procedure TwainSetErrorMessage(ShowErrors: WordBool); safecall;
    function TwainSetGamma(Gamma: Double): WordBool; safecall;
    procedure TwainSetHideUI(Hide: WordBool); safecall;
    function TwainSetImageFileFormat(ImageFileFormat: TwainImageFileFormats): WordBool; safecall;
    function TwainSetImageLayout(Left: Double; Top: Double; Right: Double; Bottom: Double): WordBool; safecall;
    function TwainSetImprinterIndex(Index: Integer): WordBool; safecall;
    function TwainSetImprinterMode(PrinterMode: TwainPrinterMode): WordBool; safecall;
    function TwainSetImprinterString(const PrinterString: WideString): WordBool; safecall;
    function TwainSetImprinterSuffix(const Suffix: WideString): WordBool; safecall;
    function TwainSetIndicators(ShowIndicator: WordBool): WordBool; safecall;
    procedure TwainSetInternalBehaviour(OptionID: Integer; Enable: WordBool); safecall;
    procedure TwainSetModalUI(ModalUI: WordBool); safecall;
    procedure TwainSetMultiTransfer(MultiTransfer: WordBool); safecall;
    function TwainSetNoiseFilter(NoiseFilter: TwainNoiseFilterMode): WordBool; safecall;
    function TwainSetOrientation(Orientation: TwainOrientation): WordBool; safecall;
    function TwainSetPaperSize(Size: TwainPaperSize): WordBool; safecall;
    function TwainSetPixelFlavor(PixelFlavor: TwainPixelFlavor): WordBool; safecall;
    function TwainSetPixelType(PixelType: TwainPixelType): WordBool; safecall;
    function TwainSetPlanarChunky(PlanarChunky: Integer): WordBool; safecall;
    function TwainSetResolution(Resolution: Integer): WordBool; safecall;
    function TwainSetRotation(Rotation: Integer): WordBool; safecall;
    function TwainSetThreshold(Threshold: Integer): WordBool; safecall;
    function TwainSetXferCount(Xfers: Integer): WordBool; safecall;
    function TwainSetXScaling(XScaling: Double): WordBool; safecall;
    function TwainSetYScaling(YScaling: Double): WordBool; safecall;
    function TwainShowSetupDialogSource(HANDLE: Integer): WordBool; safecall;
    function TwainStopFeeder: WordBool; safecall;
    function TwainUnloadSourceManager(HANDLE: Integer): WordBool; safecall;
    function TwainUserClosedSource: WordBool; safecall;
    function UploadFileToFTP(const FilePath: WideString; const Host: WideString; 
                             const Path: WideString; const Login: WideString; 
                             const Password: WideString; FTPPort: Integer): GdPictureStatus; safecall;
    function WiaAcquireToFile(const FilePath: WideString; ImageFormat: WiaImageFormat; ICM: WordBool): GdPictureStatus; safecall;
    function WiaAcquireToFile_2(const FilePath: WideString): GdPictureStatus; safecall;
    function WiaAcquireToGdPictureImage: Integer; safecall;
    function WiaAcquireWizard: GdPictureStatus; safecall;
    procedure WiaCloseSource; safecall;
    function WiaEnableDuplex(Enable: WordBool): WordBool; safecall;
    function WiaGetAvailableBrightnessCount: Integer; safecall;
    function WiaGetAvailableBrightnessNo(BrightnessNo: Integer): Double; safecall;
    function WiaGetAvailableContrastCount: Integer; safecall;
    function WiaGetAvailableContrastNo(ContrastNo: Integer): Double; safecall;
    function WiaGetAvailableHorizontalResolutionCount: Integer; safecall;
    function WiaGetAvailableHorizontalResolutionNo(ResNo: Integer): Integer; safecall;
    function WiaGetAvailableImageIntentCount: Integer; safecall;
    function WiaGetAvailableImageIntentNo(IntentNo: Integer): WiaImageIntent; safecall;
    function WiaGetAvailableVerticalResolutionCount: Integer; safecall;
    function WiaGetAvailableVerticalResolutionNo(ResNo: Integer): Integer; safecall;
    function WiaGetBitsPerPixel: Integer; safecall;
    function WiaGetBrightness: Double; safecall;
    function WiaGetChannelsPerPixel: Integer; safecall;
    function WiaGetContrast: Double; safecall;
    function WiaGetCurrentSourceID: WideString; safecall;
    function WiaGetDevicePropertyInt(PropertyID: Integer; var PropertyValue: Integer): GdPictureStatus; safecall;
    function WiaGetHorizontalBedSize: Double; safecall;
    function WiaGetHorizontalResolution: Integer; safecall;
    function WiaGetHorizontalSheetFeedSize: Double; safecall;
    function WiaGetImageCount: Integer; safecall;
    function WiaGetImageExtension: WideString; safecall;
    function WiaGetImageIntent: WiaImageIntent; safecall;
    function WiaGetImageLayout(var Left: Double; var Top: Double; var Width: Double; 
                               var Height: Double): WordBool; safecall;
    function WiaGetLastError: WiaStatus; safecall;
    function WiaGetPaperSize: WiaPageSize; safecall;
    function WiaGetSourceCount: Integer; safecall;
    function WiaGetSourceDescription(SourceNo: Integer): WideString; safecall;
    function WiaGetSourceDriverVersion(SourceNo: Integer): WideString; safecall;
    function WiaGetSourceID(SourceNo: Integer): WideString; safecall;
    function WiaGetSourceManufacturer(SourceNo: Integer): WideString; safecall;
    function WiaGetSourceName(SourceNo: Integer): WideString; safecall;
    function WiaGetSourceServer(SourceNo: Integer): WideString; safecall;
    function WiaGetSourceType(SourceNo: Integer): WiaSourceType; safecall;
    function WiaGetSourceWIAVersion(SourceNo: Integer): WideString; safecall;
    function WiaGetVerticalBedSize: Double; safecall;
    function WiaGetVerticalResolution: Integer; safecall;
    function WiaGetVerticalSheetFeedSize: Double; safecall;
    function WiaHasFeeder: WordBool; safecall;
    function WiaHasFlatBed: WordBool; safecall;
    function WiaIsDuplexAvailable: WordBool; safecall;
    function WiaIsDuplexEnabled: WordBool; safecall;
    function WiaIsFeederLoaded: WordBool; safecall;
    function WiaIsFeederSelected: WordBool; safecall;
    function WiaOpenSource(const SourceID: WideString): WordBool; safecall;
    function WiaSelectFeeder(SelectFeeder: WordBool): WordBool; safecall;
    function WiaSelectImageIdx(ImageIdx: Integer): GdPictureStatus; safecall;
    function WiaSelectSource(SourceType: WiaSourceType): WideString; safecall;
    function WiaSetBitsPerPixel(bpp: Integer): WordBool; safecall;
    function WiaSetBrightness(Brightness: Double): WordBool; safecall;
    function WiaSetChannelsPerPixel(n: Integer): WordBool; safecall;
    function WiaSetContrast(Contrast: Double): WordBool; safecall;
    function WiaSetDevicePropertyInt(PropertyID: Integer; PropertyValue: Integer): GdPictureStatus; safecall;
    function WiaSetHorizontalResolution(Resolution: Integer): WordBool; safecall;
    function WiaSetImageIntent(Intent: WiaImageIntent): WordBool; safecall;
    function WiaSetImageLayout(Left: Double; Top: Double; Width: Double; Height: Double): WordBool; safecall;
    procedure WiaSetIndicators(ShowIndicator: WordBool); safecall;
    function WiaSetPaperSize(PageSize: WiaPageSize): WordBool; safecall;
    function WiaSetVerticalResolution(Resolution: Integer): WordBool; safecall;
    function WiaShowSetupDialogSource: GdPictureStatus; safecall;
    function WiaTakePictureToGdPictureImage: Integer; safecall;
    function ApplyExifRotation(ImageID: Integer): GdPictureStatus; safecall;
  end;

// *********************************************************************//
// DispIntf:  IGdPictureImagingDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {572B1557-5AAB-4A36-99D4-3BEC5AD538E8}
// *********************************************************************//
  IGdPictureImagingDisp = dispinterface
    ['{572B1557-5AAB-4A36-99D4-3BEC5AD538E8}']
    function AddBorderBottom(ImageID: Integer; BorderHeight: Integer; BorderColor: Integer): GdPictureStatus; dispid 1;
    function AddBorderLeft(ImageID: Integer; BorderWidth: Integer; BorderColor: Integer): GdPictureStatus; dispid 2;
    function AddBorderRight(ImageID: Integer; BorderWidth: Integer; BorderColor: Integer): GdPictureStatus; dispid 3;
    function AddBorders(ImageID: Integer; BorderWidth: Integer; BorderColor: Integer): GdPictureStatus; dispid 4;
    function AddBorderTop(ImageID: Integer; BorderHeight: Integer; BorderColor: Integer): GdPictureStatus; dispid 5;
    function AdjustRGB(ImageID: Integer; RedAdjust: Integer; GreenAdjust: Integer; 
                       BlueAdjust: Integer): GdPictureStatus; dispid 6;
    function ADRAddGdPictureImageToTemplate(TemplateID: Integer; ImageID: Integer): GdPictureStatus; dispid 7;
    function ADRCreateTemplateEmpty: Integer; dispid 8;
    function ADRCreateTemplateFromFile(const FilePath: WideString): Integer; dispid 9;
    function ADRCreateTemplateFromGdPictureImage(ImageID: Integer): Integer; dispid 10;
    function ADRDeleteTemplate(TemplateID: Integer): WordBool; dispid 11;
    function ADRGetCloserTemplateForFile(const FilePath: WideString): Integer; dispid 12;
    function ADRGetCloserTemplateForGdPictureImage(ImageID: Integer): Integer; dispid 13;
    function ADRGetLastConfidence: Double; dispid 14;
    function ADRGetLastConfidenceFromTemplate(TemplateID: Integer): Double; dispid 15;
    function ADRGetTemplateCount: Integer; dispid 16;
    function ADRGetTemplateID(TemplateNo: Integer): Integer; dispid 17;
    function ADRGetTemplateImageCount(TemplateID: Integer): Integer; dispid 18;
    function ADRGetTemplateTag(TemplateID: Integer): WideString; dispid 19;
    function ADRLoadTemplateConfig(const FileConfig: WideString): WordBool; dispid 20;
    function ADRSaveTemplateConfig(const FileConfig: WideString): WordBool; dispid 21;
    function ADRSetTemplateTag(TemplateID: Integer; const TemplateTag: WideString): WordBool; dispid 22;
    procedure ADRStartNewTemplateConfig; dispid 23;
    function AppendToTiff(ImageID: Integer; const FilePath: WideString; Compression: TiffCompression): GdPictureStatus; dispid 24;
    function AppendToTiff_2(ImageID: Integer; const FilePath: WideString; 
                            Compression: TiffCompression; JpegQuality: Integer): GdPictureStatus; dispid 25;
    function ARGB(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer; dispid 26;
    function ARGBI(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer; dispid 27;
    function AttachThumbnail(ImageID: Integer; ThumbnailImageID: Integer): GdPictureStatus; dispid 28;
    function AutoDeskew(ImageID: Integer): GdPictureStatus; dispid 29;
    function AutoDeskew_2(ImageID: Integer; MaxAngleOfResearch: Single): GdPictureStatus; dispid 30;
    function AutoDeskew_3(ImageID: Integer; MaxAngleOfResearch: Single; BackColor: Integer; 
                          AngleStep: Single; Optimistic: WordBool): GdPictureStatus; dispid 31;
    function AutoTextInvert(ImageID: Integer; MinObjectWidth: Integer; MinObjectHeight: Integer; 
                            MinBlackPercent: Integer; MaxBlackPercent: Integer; 
                            FixBackground: WordBool; ConnectedToLines: WordBool; 
                            MaxLinesThickness: Integer): GdPictureStatus; dispid 32;
    function Barcode1DReaderBarcodeHasChecksum(BarcodeNo: Integer): WordBool; dispid 33;
    procedure Barcode1DReaderClear; dispid 34;
    function Barcode1DReaderCode128IsEAN(BarcodeNo: Integer): WordBool; dispid 35;
    function Barcode1DReaderDoScan(ImageID: Integer): GdPictureStatus; dispid 36;
    function Barcode1DReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; dispid 37;
    function Barcode1DReaderDoScan_3(ImageID: Integer; ScanMode: Byte; 
                                     BarcodeType: Barcode1DReaderType; ReturnCorrupted: WordBool; 
                                     ExpectedCount: Integer): GdPictureStatus; dispid 38;
    function Barcode1DReaderDoScan_4(ImageID: Integer; ScanMode: Byte; 
                                     BarcodeType: Barcode1DReaderType; ReturnCorrupted: WordBool; 
                                     ExpectedCount: Integer; StopOnExpectedCount: WordBool): GdPictureStatus; dispid 984;
    function Barcode1DReaderDoScan_5(ImageID: Integer; ScanMode: Byte; 
                                     BarcodeType: Barcode1DReaderType; ReturnCorrupted: WordBool; 
                                     ExpectedCount: Integer; StopOnExpectedCount: WordBool; 
                                     timeoutMilliseconds: Integer): GdPictureStatus; dispid 991;
    function Barcode1DReaderGetBarcodeCount: Integer; dispid 39;
    function Barcode1DReaderGetBarcodeSkewAngle(BarcodeNo: Integer): Double; dispid 40;
    function Barcode1DReaderGetBarcodeType(BarcodeNo: Integer): Barcode1DReaderType; dispid 41;
    function Barcode1DReaderGetBarcodeValue(BarcodeNo: Integer): WideString; dispid 42;
    function Barcode1DReaderGetBarcodeValueRAWBase64(BarcodeNo: Integer): WideString; dispid 43;
    function Barcode1DReaderGetBarcodeValue_2(BarcodeNo: Integer; GetFrebrabanDigitalLine: WordBool): WideString; dispid 994;
    function Barcode1DReaderGetBarcodeX1(BarcodeNo: Integer): Integer; dispid 44;
    function Barcode1DReaderGetBarcodeX2(BarcodeNo: Integer): Integer; dispid 45;
    function Barcode1DReaderGetBarcodeX3(BarcodeNo: Integer): Integer; dispid 46;
    function Barcode1DReaderGetBarcodeX4(BarcodeNo: Integer): Integer; dispid 47;
    function Barcode1DReaderGetBarcodeY1(BarcodeNo: Integer): Integer; dispid 48;
    function Barcode1DReaderGetBarcodeY2(BarcodeNo: Integer): Integer; dispid 49;
    function Barcode1DReaderGetBarcodeY3(BarcodeNo: Integer): Integer; dispid 50;
    function Barcode1DReaderGetBarcodeY4(BarcodeNo: Integer): Integer; dispid 51;
    function Barcode1DWrite(ImageID: Integer; BarcodeType: Barcode1DWriterType; 
                            const Data: WideString; DstLeft: Integer; DstTop: Integer; 
                            DstWidth: Integer; DstHeight: Integer; FillColor: Integer; 
                            Alignment: BarcodeAlign; Angle: Single): GdPictureStatus; dispid 52;
    function Barcode1DWriteGetMinWidth(BarcodeType: Barcode1DWriterType; const Data: WideString): Integer; dispid 53;
    function BarcodeAztecGetSize(const Data: WideString; var Version: BarcodeAztecCodeVersion; 
                                 EccPercent: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                 out Width: Integer; out Height: Integer): GdPictureStatus; dispid 54;
    procedure BarcodeAztecReaderClear; dispid 55;
    function BarcodeAztecReaderDoScan(ImageID: Integer): GdPictureStatus; dispid 56;
    function BarcodeAztecReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; dispid 57;
    function BarcodeAztecReaderDoScan_3(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer): GdPictureStatus; dispid 58;
    function BarcodeAztecReaderDoScan_4(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer; 
                                        StopOnExpectedCount: WordBool): GdPictureStatus; dispid 985;
    function BarcodeAztecReaderGetBarcodeCount: Integer; dispid 59;
    function BarcodeAztecReaderGetBarcodeValue(BarcodeNo: Integer): WideString; dispid 60;
    function BarcodeAztecReaderGetBarcodeValueRAWBase64(BarcodeNo: Integer): WideString; dispid 61;
    function BarcodeAztecReaderGetBarcodeX1(BarcodeNo: Integer): Integer; dispid 62;
    function BarcodeAztecReaderGetBarcodeX2(BarcodeNo: Integer): Integer; dispid 63;
    function BarcodeAztecReaderGetBarcodeX3(BarcodeNo: Integer): Integer; dispid 64;
    function BarcodeAztecReaderGetBarcodeX4(BarcodeNo: Integer): Integer; dispid 65;
    function BarcodeAztecReaderGetBarcodeY1(BarcodeNo: Integer): Integer; dispid 66;
    function BarcodeAztecReaderGetBarcodeY2(BarcodeNo: Integer): Integer; dispid 67;
    function BarcodeAztecReaderGetBarcodeY3(BarcodeNo: Integer): Integer; dispid 68;
    function BarcodeAztecReaderGetBarcodeY4(BarcodeNo: Integer): Integer; dispid 69;
    function BarcodeAztecWrite(ImageID: Integer; const Data: WideString; 
                               var Version: BarcodeAztecCodeVersion; EccPercent: Integer; 
                               QuietZone: Integer; ModuleSize: Integer; DstLeft: Integer; 
                               DstTop: Integer; Angle: Single; FillColor: Integer; 
                               BackColor: Integer): GdPictureStatus; dispid 70;
    function BarcodeAztecReaderGetBarcodeConfidence(BarcodeNo: Integer): Single; dispid 982;
    function BarcodeDataMatrixGetSize(const Data: WideString; 
                                      EncodingMode: BarcodeDataMatrixEncodingMode; 
                                      var Version: BarcodeDataMatrixVersion; QuietZone: Integer; 
                                      ModuleSize: Integer; out Width: Integer; out Height: Integer): GdPictureStatus; dispid 71;
    procedure BarcodeDataMatrixReaderClear; dispid 72;
    function BarcodeDataMatrixReaderDoScan(ImageID: Integer): GdPictureStatus; dispid 73;
    function BarcodeDataMatrixReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; dispid 74;
    function BarcodeDataMatrixReaderDoScan_3(ImageID: Integer; ScanMode: Byte; 
                                             ExpectedCount: Integer): GdPictureStatus; dispid 75;
    function BarcodeDataMatrixReaderDoScan_4(ImageID: Integer; ScanMode: Byte; 
                                             ExpectedCount: Integer; StopOnExpectedCount: WordBool): GdPictureStatus; dispid 986;
    function BarcodeDataMatrixReaderGetBarcodeColumns(BarcodeNo: Integer): Integer; dispid 76;
    function BarcodeDataMatrixReaderGetBarcodeCount: Integer; dispid 77;
    function BarcodeDataMatrixReaderGetBarcodeRows(BarcodeNo: Integer): Integer; dispid 78;
    function BarcodeDataMatrixReaderGetBarcodeSkewAngle(BarcodeNo: Integer): Double; dispid 79;
    function BarcodeDataMatrixReaderGetBarcodeValue(BarcodeNo: Integer): WideString; dispid 80;
    function BarcodeDataMatrixReaderGetBarcodeValueRAWBase64(BarcodeNo: Integer): WideString; dispid 81;
    function BarcodeDataMatrixReaderGetBarcodeX1(BarcodeNo: Integer): Integer; dispid 82;
    function BarcodeDataMatrixReaderGetBarcodeX2(BarcodeNo: Integer): Integer; dispid 83;
    function BarcodeDataMatrixReaderGetBarcodeX3(BarcodeNo: Integer): Integer; dispid 84;
    function BarcodeDataMatrixReaderGetBarcodeX4(BarcodeNo: Integer): Integer; dispid 85;
    function BarcodeDataMatrixReaderGetBarcodeY1(BarcodeNo: Integer): Integer; dispid 86;
    function BarcodeDataMatrixReaderGetBarcodeY2(BarcodeNo: Integer): Integer; dispid 87;
    function BarcodeDataMatrixReaderGetBarcodeY3(BarcodeNo: Integer): Integer; dispid 88;
    function BarcodeDataMatrixReaderGetBarcodeY4(BarcodeNo: Integer): Integer; dispid 89;
    function BarcodeDataMatrixWrite(ImageID: Integer; const Data: WideString; 
                                    EncodingMode: BarcodeDataMatrixEncodingMode; 
                                    var Version: BarcodeDataMatrixVersion; QuietZone: Integer; 
                                    ModuleSize: Integer; DstLeft: Integer; DstTop: Integer; 
                                    Angle: Single; FillColor: Integer; BackColor: Integer): GdPictureStatus; dispid 90;
    function BarcodeDataMatrixReaderGetBarcodeConfidence(BarcodeNo: Integer): Single; dispid 983;
    function BarcodeMicroQRGetSize(const Data: WideString; EncodingMode: BarcodeQREncodingMode; 
                                   ErrorCorrectionLevel: BarcodeMicroQRErrorCorrectionLevel; 
                                   out Version: Integer; QuietZone: Integer; ModuleSize: Integer): Integer; dispid 91;
    procedure BarcodeMicroQRReaderClear; dispid 92;
    function BarcodeMicroQRReaderDoScan(ImageID: Integer): GdPictureStatus; dispid 93;
    function BarcodeMicroQRReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; dispid 94;
    function BarcodeMicroQRReaderDoScan_3(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer): GdPictureStatus; dispid 95;
    function BarcodeMicroQRReaderDoScan_4(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer; 
                                          StopOnExpectedCount: WordBool): GdPictureStatus; dispid 989;
    function BarcodeMicroQRReaderGetBarcodeConfidence(BarcodeNo: Integer): Single; dispid 96;
    function BarcodeMicroQRReaderGetBarcodeCount: Integer; dispid 97;
    function BarcodeMicroQRReaderGetBarcodeSkewAngle(BarcodeNo: Integer): Double; dispid 98;
    function BarcodeMicroQRReaderGetBarcodeValue(BarcodeNo: Integer): WideString; dispid 99;
    function BarcodeMicroQRReaderGetBarcodeX1(BarcodeNo: Integer): Integer; dispid 100;
    function BarcodeMicroQRReaderGetBarcodeX2(BarcodeNo: Integer): Integer; dispid 101;
    function BarcodeMicroQRReaderGetBarcodeX3(BarcodeNo: Integer): Integer; dispid 102;
    function BarcodeMicroQRReaderGetBarcodeX4(BarcodeNo: Integer): Integer; dispid 103;
    function BarcodeMicroQRReaderGetBarcodeY1(BarcodeNo: Integer): Integer; dispid 104;
    function BarcodeMicroQRReaderGetBarcodeY2(BarcodeNo: Integer): Integer; dispid 105;
    function BarcodeMicroQRReaderGetBarcodeY3(BarcodeNo: Integer): Integer; dispid 106;
    function BarcodeMicroQRReaderGetBarcodeY4(BarcodeNo: Integer): Integer; dispid 107;
    function BarcodeMicroQRReaderGetVersion(BarcodeNo: Integer): Integer; dispid 108;
    function BarcodeMicroQRWrite(ImageID: Integer; const Data: WideString; 
                                 EncodingMode: BarcodeQREncodingMode; 
                                 ErrorCorrectionLevel: BarcodeMicroQRErrorCorrectionLevel; 
                                 Version: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                 DstLeft: Integer; DstTop: Integer; Angle: Single; 
                                 FillColor: Integer; BackColor: Integer): GdPictureStatus; dispid 109;
    function BarcodePDF417GetSize(const Data: WideString; EncodingMode: BarcodePDF417EncodingMode; 
                                  var ErrorCorrectionLevel: BarcodePDF417ErrorCorrectionLevel; 
                                  var Rows: Integer; var Cols: Integer; QuietZone: Integer; 
                                  ModuleWidth: Integer; RowHeight: Integer; out Width: Integer; 
                                  out Height: Integer): GdPictureStatus; dispid 110;
    procedure BarcodePDF417ReaderClear; dispid 111;
    function BarcodePDF417ReaderDoScan(ImageID: Integer): GdPictureStatus; dispid 112;
    function BarcodePDF417ReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; dispid 113;
    function BarcodePDF417ReaderDoScan_3(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer): GdPictureStatus; dispid 114;
    function BarcodePDF417ReaderDoScan_4(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer; 
                                         StopOnExpectedCount: WordBool): GdPictureStatus; dispid 987;
    function BarcodePDF417ReaderGetBarcodeColumns(BarcodeNo: Integer): Integer; dispid 115;
    function BarcodePDF417ReaderGetBarcodeConfidence(BarcodeNo: Integer): Single; dispid 116;
    function BarcodePDF417ReaderGetBarcodeCount: Integer; dispid 117;
    function BarcodePDF417ReaderGetBarcodeRows(BarcodeNo: Integer): Integer; dispid 118;
    function BarcodePDF417ReaderGetBarcodeSkewAngle(BarcodeNo: Integer): Double; dispid 119;
    function BarcodePDF417ReaderGetBarcodeValue(BarcodeNo: Integer): WideString; dispid 120;
    function BarcodePDF417ReaderGetBarcodeValueRAWBase64(BarcodeNo: Integer): WideString; dispid 121;
    function BarcodePDF417ReaderGetBarcodeX1(BarcodeNo: Integer): Integer; dispid 122;
    function BarcodePDF417ReaderGetBarcodeX2(BarcodeNo: Integer): Integer; dispid 123;
    function BarcodePDF417ReaderGetBarcodeX3(BarcodeNo: Integer): Integer; dispid 124;
    function BarcodePDF417ReaderGetBarcodeX4(BarcodeNo: Integer): Integer; dispid 125;
    function BarcodePDF417ReaderGetBarcodeY1(BarcodeNo: Integer): Integer; dispid 126;
    function BarcodePDF417ReaderGetBarcodeY2(BarcodeNo: Integer): Integer; dispid 127;
    function BarcodePDF417ReaderGetBarcodeY3(BarcodeNo: Integer): Integer; dispid 128;
    function BarcodePDF417ReaderGetBarcodeY4(BarcodeNo: Integer): Integer; dispid 129;
    function BarcodePDF417Write(ImageID: Integer; const Data: WideString; 
                                EncodingMode: BarcodePDF417EncodingMode; 
                                ErrorCorrectionLevel: BarcodePDF417ErrorCorrectionLevel; 
                                Rows: Integer; Cols: Integer; QuietZone: Integer; 
                                ModuleWidth: Integer; RowHeight: Integer; DstLeft: Integer; 
                                DstTop: Integer; Angle: Single; FillColor: Integer; 
                                BackColor: Integer): GdPictureStatus; dispid 130;
    function BarcodeQRGetSize(const Data: WideString; EncodingMode: BarcodeQREncodingMode; 
                              ErrorCorrectionLevel: BarcodeQRErrorCorrectionLevel; 
                              out Version: Integer; QuietZone: Integer; ModuleSize: Integer): Integer; dispid 131;
    procedure BarcodeQRReaderClear; dispid 132;
    function BarcodeQRReaderDoScan(ImageID: Integer): GdPictureStatus; dispid 133;
    function BarcodeQRReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; dispid 134;
    function BarcodeQRReaderDoScan_3(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer): GdPictureStatus; dispid 135;
    function BarcodeQRReaderDoScan_4(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer; 
                                     StopOnExpectedCount: WordBool): GdPictureStatus; dispid 988;
    function BarcodeQRReaderGetBarcodeConfidence(BarcodeNo: Integer): Single; dispid 136;
    function BarcodeQRReaderGetBarcodeCount: Integer; dispid 137;
    function BarcodeQRReaderGetBarcodeSkewAngle(BarcodeNo: Integer): Double; dispid 138;
    function BarcodeQRReaderGetBarcodeValue(BarcodeNo: Integer): WideString; dispid 139;
    function BarcodeQRReaderGetBarcodeValueRAWBase64(BarcodeNo: Integer): WideString; dispid 140;
    function BarcodeQRReaderGetBarcodeX1(BarcodeNo: Integer): Integer; dispid 141;
    function BarcodeQRReaderGetBarcodeX2(BarcodeNo: Integer): Integer; dispid 142;
    function BarcodeQRReaderGetBarcodeX3(BarcodeNo: Integer): Integer; dispid 143;
    function BarcodeQRReaderGetBarcodeX4(BarcodeNo: Integer): Integer; dispid 144;
    function BarcodeQRReaderGetBarcodeY1(BarcodeNo: Integer): Integer; dispid 145;
    function BarcodeQRReaderGetBarcodeY2(BarcodeNo: Integer): Integer; dispid 146;
    function BarcodeQRReaderGetBarcodeY3(BarcodeNo: Integer): Integer; dispid 147;
    function BarcodeQRReaderGetBarcodeY4(BarcodeNo: Integer): Integer; dispid 148;
    function BarcodeQRReaderGetVersion(BarcodeNo: Integer): Integer; dispid 149;
    function BarcodeQRWrite(ImageID: Integer; const Data: WideString; 
                            EncodingMode: BarcodeQREncodingMode; 
                            ErrorCorrectionLevel: BarcodeQRErrorCorrectionLevel; Version: Integer; 
                            QuietZone: Integer; ModuleSize: Integer; DstLeft: Integer; 
                            DstTop: Integer; Angle: Single; FillColor: Integer; BackColor: Integer): GdPictureStatus; dispid 150;
    function BarcodeMaxiCodeGetSize(QuietZone: Integer; ModuleSize: Integer; out Width: Integer; 
                                    out Height: Integer): GdPictureStatus; dispid 997;
    function BarcodeMaxiCodeWrite(ImageID: Integer; const Data: WideString; 
                                  Mode: BarcodeMaxiCodeEncodingMode; QuietZone: Integer; 
                                  ModuleSize: Integer; DstLeft: Integer; DstTop: Integer; 
                                  Angle: Single; FillColor: Integer; BackColor: Integer): GdPictureStatus; dispid 998;
    procedure BarcodeMaxiCodeReaderClear; dispid 999;
    function BarcodeMaxiCodeReaderDoScan(ImageID: Integer): GdPictureStatus; dispid 1000;
    function BarcodeMaxiCodeReaderDoScan_2(ImageID: Integer; ScanMode: Byte): GdPictureStatus; dispid 1001;
    function BarcodeMaxiCodeReaderDoScan_3(ImageID: Integer; ScanMode: Byte; ExpectedCount: Integer): GdPictureStatus; dispid 1002;
    function BarcodeMaxiCodeReaderDoScan_4(ImageID: Integer; ScanMode: Byte; 
                                           ExpectedCount: Integer; StopOnExpectedCount: WordBool): GdPictureStatus; dispid 1003;
    function BarcodeMaxiCodeReaderGetBarcodeCount: Integer; dispid 1004;
    function BarcodeMaxiCodeReaderGetBarcodeValue(BarcodeNo: Integer): WideString; dispid 1005;
    function BarcodeMaxiCodeReaderGetBarcodeValueRAWBase64(BarcodeNo: Integer): WideString; dispid 1006;
    function BarcodeMaxiCodeReaderGetBarcodeConfidence(BarcodeNo: Integer): Single; dispid 1007;
    function BarcodeMaxiCodeReaderGetBarcodeX1(BarcodeNo: Integer): Integer; dispid 1008;
    function BarcodeMaxiCodeReaderGetBarcodeX2(BarcodeNo: Integer): Integer; dispid 1009;
    function BarcodeMaxiCodeReaderGetBarcodeX3(BarcodeNo: Integer): Integer; dispid 1010;
    function BarcodeMaxiCodeReaderGetBarcodeX4(BarcodeNo: Integer): Integer; dispid 1011;
    function BarcodeMaxiCodeReaderGetBarcodeY1(BarcodeNo: Integer): Integer; dispid 1012;
    function BarcodeMaxiCodeReaderGetBarcodeY2(BarcodeNo: Integer): Integer; dispid 1013;
    function BarcodeMaxiCodeReaderGetBarcodeY3(BarcodeNo: Integer): Integer; dispid 1014;
    function BarcodeMaxiCodeReaderGetBarcodeY4(BarcodeNo: Integer): Integer; dispid 1015;
    function ClearImage(ImageID: Integer; Color: Integer): GdPictureStatus; dispid 151;
    procedure ColorCMYKtoRGB(Cyan: Integer; Magenta: Integer; Yellow: Integer; Black: Integer; 
                             var Red: Integer; var Green: Integer; var Blue: Integer); dispid 152;
    procedure ColorCMYtoRGB(Cyan: Integer; Magenta: Integer; Yellow: Integer; var Red: Integer; 
                            var Green: Integer; var Blue: Integer); dispid 153;
    function ColorDetection(ImageID: Integer; AutoConvert: WordBool; ScanningContext: WordBool; 
                            AutoRepairCharacters: WordBool): GdPictureOutputIntent; dispid 154;
    procedure ColorHSLtoRGB(Hue: Single; Saturation: Single; Lightness: Single; var Red: Byte; 
                            var Green: Byte; var Blue: Byte); dispid 155;
    procedure ColorRGBtoCMY(Red: Integer; Green: Integer; Blue: Integer; var Cyan: Integer; 
                            var Magenta: Integer; var Yellow: Integer); dispid 156;
    procedure ColorRGBtoCMYK(Red: Integer; Green: Integer; Blue: Integer; var Cyan: Integer; 
                             var Magenta: Integer; var Yellow: Integer; var Black: Integer); dispid 157;
    procedure ColorRGBtoHSL(Red: Byte; Green: Byte; Blue: Byte; var Hue: Single; 
                            var Saturation: Single; var Lightness: Single); dispid 158;
    function ConvertBitonalToGrayScale(ImageID: Integer; SoftenValue: Integer): GdPictureStatus; dispid 159;
    function ConvertTo16BppRGB555(ImageID: Integer): GdPictureStatus; dispid 160;
    function ConvertTo16BppRGB565(ImageID: Integer): GdPictureStatus; dispid 161;
    function ConvertTo1Bpp(ImageID: Integer): GdPictureStatus; dispid 162;
    function ConvertTo1Bpp_2(ImageID: Integer; Threshold: Byte): GdPictureStatus; dispid 169;
    function ConvertTo1BppAT(ImageID: Integer): GdPictureStatus; dispid 163;
    function ConvertTo1BppAT_2(ImageID: Integer; Threshold: Integer): GdPictureStatus; dispid 164;
    function ConvertTo1BppBradley(ImageID: Integer; Threshold: Byte): GdPictureStatus; dispid 165;
    function ConvertTo1BppFast(ImageID: Integer): GdPictureStatus; dispid 166;
    function ConvertTo1BppSauvola(ImageID: Integer; Factor: Single): GdPictureStatus; dispid 167;
    function ConvertTo1BppSauvola_2(ImageID: Integer; Factor: Single; ContrastMinDif: Integer; 
                                    SmoothKernel: Integer): GdPictureStatus; dispid 168;
    function ConvertTo1BppWAN(ImageID: Integer; Threshold: Byte): GdPictureStatus; dispid 990;
    function ConvertTo24BppRGB(ImageID: Integer): GdPictureStatus; dispid 170;
    function ConvertTo32BppARGB(ImageID: Integer): GdPictureStatus; dispid 171;
    function ConvertTo32BppPARGB(ImageID: Integer): GdPictureStatus; dispid 172;
    function ConvertTo32BppRGB(ImageID: Integer): GdPictureStatus; dispid 173;
    function ConvertTo48BppRGB(ImageID: Integer): GdPictureStatus; dispid 174;
    function ConvertTo4Bpp16(ImageID: Integer): GdPictureStatus; dispid 175;
    function ConvertTo4BppPal(ImageID: Integer; var ColorEntries: {??PSafeArray}OleVariant): GdPictureStatus; dispid 176;
    function ConvertTo4BppQ(ImageID: Integer): GdPictureStatus; dispid 177;
    function ConvertTo64BppARGB(ImageID: Integer): GdPictureStatus; dispid 178;
    function ConvertTo64BppPARGB(ImageID: Integer): GdPictureStatus; dispid 179;
    function ConvertTo8Bpp216(ImageID: Integer): GdPictureStatus; dispid 180;
    function ConvertTo8BppGrayScale(ImageID: Integer): GdPictureStatus; dispid 181;
    function ConvertTo8BppGrayScaleAdv(ImageID: Integer): GdPictureStatus; dispid 182;
    function ConvertTo8BppQ(ImageID: Integer): GdPictureStatus; dispid 183;
    function ConvertTo8BppQ_2(ImageID: Integer; MaxColors: Integer): GdPictureStatus; dispid 184;
    function CopyRegionToClipboard(ImageID: Integer; SrcLeft: Integer; SrcTop: Integer; 
                                   Width: Integer; Height: Integer): GdPictureStatus; dispid 185;
    function CopyToClipboard(ImageID: Integer): GdPictureStatus; dispid 186;
    function CountColor(ImageID: Integer; PickColor: Integer): Double; dispid 187;
    function CountUniqueColors(ImageID: Integer): Integer; dispid 188;
    function CreateAnchorTemplate(ImageID: Integer; PosLeft: Integer; PosTop: Integer; 
                                  Width: Integer; Height: Integer): Integer; dispid 189;
    function CreateAnchorTemplateL(ImageID: Integer; PosLeft: Integer; PosTop: Integer; 
                                   Width: Integer; Height: Integer): {??Int64}OleVariant; dispid 190;
    function CreateClonedGdPictureImage(ImageID: Integer): Integer; dispid 191;
    function CreateClonedGdPictureImage24BppRGB(ImageID: Integer): Integer; dispid 192;
    function CreateClonedGdPictureImage32BppARGB(ImageID: Integer): Integer; dispid 193;
    function CreateClonedGdPictureImage32BppPARGB(ImageID: Integer): Integer; dispid 194;
    function CreateClonedGdPictureImageArea(ImageID: Integer; SrcLeft: Integer; SrcTop: Integer; 
                                            Width: Integer; Height: Integer): Integer; dispid 195;
    function CreateGdPictureImageFromByteArray(var Data: {??PSafeArray}OleVariant): Integer; dispid 197;
    function CreateGdPictureImageFromByteArray_2(var Data: {??PSafeArray}OleVariant; 
                                                 ImageFormat: DocumentFormat): Integer; dispid 198;
    function CreateGdPictureImageFromClipboard: Integer; dispid 199;
    function CreateGdPictureImageFromCMYKSep(CyanImageID: Integer; MagentaImageID: Integer; 
                                             YellowImageID: Integer; BlackImageID: Integer): Integer; dispid 200;
    function CreateGdPictureImageFromDIB(Dib: Integer): Integer; dispid 201;
    function CreateGdPictureImageFromFile(const FilePath: WideString): Integer; dispid 202;
    function CreateGdPictureImageFromFile_2(const FilePath: WideString; LoadInMemory: WordBool): Integer; dispid 203;
    function CreateGdPictureImageFromFile_3(const FilePath: WideString; LoadInMemory: WordBool; 
                                            DirectAccess: WordBool): Integer; dispid 204;
    function CreateGdPictureImageFromFTP(const Host: WideString; const Path: WideString; 
                                         const Login: WideString; const Password: WideString; 
                                         FTPPort: Integer): Integer; dispid 205;
    function CreateGdPictureImageFromHBitmap(hBitmap: Integer): Integer; dispid 206;
    function CreateGdPictureImageFromHICON(hicon: Integer): Integer; dispid 207;
    function CreateGdPictureImageFromHTTP(const Host: WideString; const Path: WideString; 
                                          HTTPPort: Integer): Integer; dispid 208;
    function CreateGdPictureImageFromHTTP_2(const Uri: WideString; const Login: WideString; 
                                            const Password: WideString): Integer; dispid 209;
    function CreateGdPictureImageFromHwnd(HANDLE: Integer): Integer; dispid 210;
    function CreateGdPictureImageFromIStream(const Stream: IUnknown): Integer; dispid 211;
    function CreateGdPictureImageFromIStream_2(const Stream: IUnknown; DirectAccess: WordBool): Integer; dispid 212;
    function CreateGdPictureImageFromIStream_3(const Stream: IUnknown; DirectAccess: WordBool; 
                                               ImageFormat: DocumentFormat): Integer; dispid 213;
    function CreateGdPictureImageFromMetaFile(const FilePath: WideString): Integer; dispid 214;
    function CreateGdPictureImageFromMetaFile_2(const FilePath: WideString; ScaleBy: Single): Integer; dispid 215;
    function CreateGdPictureImageFromString(const ImageData: WideString): Integer; dispid 216;
    function CreateNewGdPictureImage(Width: Integer; Height: Integer; BitDepth: Smallint; 
                                     BackColor: Integer): Integer; dispid 217;
    function CreateNewGdPictureImage_2(Width: Integer; Height: Integer; PixelFormat: PixelFormat; 
                                       BackColor: Integer): Integer; dispid 218;
    function CreateThumbnail(ImageID: Integer; Width: Integer; Height: Integer): Integer; dispid 219;
    function CreateThumbnailHQ(ImageID: Integer; Width: Integer; Height: Integer): Integer; dispid 220;
    function CreateThumbnailHQ_2(ImageID: Integer; Width: Integer; Height: Integer; 
                                 BackColor: Integer): Integer; dispid 221;
    function CreateThumbnailHQ_3(const FilePath: WideString; Width: Integer; Height: Integer; 
                                 BackColor: Integer): Integer; dispid 222;
    function Crop(ImageID: Integer; Left: Integer; Top: Integer; Width: Integer; Height: Integer): GdPictureStatus; dispid 223;
    function CropBlackBorders(ImageID: Integer): GdPictureStatus; dispid 224;
    function CropBlackBordersEx(ImageID: Integer): GdPictureStatus; dispid 225;
    function CropBlackBordersEx_2(ImageID: Integer; Confidence: Single): GdPictureStatus; dispid 226;
    function CropBlackBordersEx_3(ImageID: Integer; Confidence: Single; SkipLinesCount: Integer): GdPictureStatus; dispid 227;
    function CropBlackBorders_2(ImageID: Integer; Confidence: Single): GdPictureStatus; dispid 228;
    function CropBlackBorders_3(ImageID: Integer; Confidence: Single; SkipLinesCount: Integer): GdPictureStatus; dispid 229;
    function CropBorders(ImageID: Integer; Context: ImagingContext): GdPictureStatus; dispid 230;
    function CropBorders_2(ImageID: Integer; Confidence: Single; Context: ImagingContext): GdPictureStatus; dispid 231;
    function CropBorders_3(ImageID: Integer; Confidence: Single; PixelReference: ReferencePoint; 
                           Context: ImagingContext): GdPictureStatus; dispid 232;
    function CropBorders_4(ImageID: Integer; Confidence: Single; PixelReference: ReferencePoint; 
                           var Left: Integer; var Top: Integer; var Width: Integer; 
                           var Height: Integer): GdPictureStatus; dispid 233;
    function CropBorders_5(ImageID: Integer; Confidence: Single; PixelReference: ReferencePoint; 
                           var Left: Integer; var Top: Integer; var Width: Integer; 
                           var Height: Integer; Context: ImagingContext): GdPictureStatus; dispid 234;
    function CropBottom(ImageID: Integer; Lines: Integer): GdPictureStatus; dispid 235;
    function CropLeft(ImageID: Integer; Lines: Integer): GdPictureStatus; dispid 236;
    function CropRight(ImageID: Integer; Lines: Integer): GdPictureStatus; dispid 237;
    function CropTop(ImageID: Integer; Lines: Integer): GdPictureStatus; dispid 238;
    function CropWhiteBorders(ImageID: Integer): GdPictureStatus; dispid 239;
    function CropWhiteBorders_2(ImageID: Integer; Confidence: Single): GdPictureStatus; dispid 240;
    function CropWhiteBorders_3(ImageID: Integer; Confidence: Single; SkipLinesCount: Integer): GdPictureStatus; dispid 241;
    function Decode64String(const StringToDecode: WideString): WideString; dispid 242;
    procedure DeleteAnchorTemplate(AnchorTemplateID: Integer); dispid 243;
    procedure DeleteAnchorTemplateL(AnchorTemplateID: {??Int64}OleVariant); dispid 244;
    function DeleteBlackBorders(ImageID: Integer; Margin: Integer; SkewedBorders: WordBool): GdPictureStatus; dispid 245;
    procedure DeleteClipboardData; dispid 246;
    function DetachThumbnail(ImageID: Integer): GdPictureStatus; dispid 247;
    function DicomGetDefaultWindowLevel(ImageID: Integer): Single; dispid 248;
    function DicomGetDefaultWindowWidth(ImageID: Integer): Single; dispid 249;
    function DicomGetLastWindowLevel(ImageID: Integer): Single; dispid 250;
    function DicomGetLastWindowWidth(ImageID: Integer): Single; dispid 251;
    function DicomGetMaxWindowLevel(ImageID: Integer): Single; dispid 252;
    function DicomGetMaxWindowWidth(ImageID: Integer): Single; dispid 253;
    function DicomGetMinWindowLevel(ImageID: Integer): Single; dispid 254;
    function DicomGetPageCount(ImageID: Integer): Integer; dispid 255;
    function DicomGetTagDescription(ImageID: Integer; TagIdx: Integer): WideString; dispid 256;
    function DicomGetTagElement(ImageID: Integer; TagIdx: Integer): Integer; dispid 257;
    function DicomGetTagGroup(ImageID: Integer; TagIdx: Integer): Integer; dispid 258;
    function DicomGetTagsCount(ImageID: Integer): Integer; dispid 259;
    function DicomGetTagValue(ImageID: Integer; TagIdx: Integer): WideString; dispid 260;
    function DicomIsMultiPage(ImageID: Integer): WordBool; dispid 261;
    function DicomSelectPage(ImageID: Integer; Page: Integer): GdPictureStatus; dispid 262;
    function DicomSetWindowLevel(ImageID: Integer; WindowWidth: Single; WindowLevel: Single): GdPictureStatus; dispid 263;
    procedure Dispose; dispid 264;
    function DrawArc(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                     Height: Single; StartAngle: Single; SweepAngle: Single; PenWidth: Single; 
                     PenColor: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 265;
    function DrawBezier(ImageID: Integer; Left1: Single; Top1: Single; Left2: Single; Top2: Single; 
                        Left3: Single; Top3: Single; Left4: Single; Top4: Single; PenWidth: Single; 
                        PenColor: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 266;
    function DrawCircle(ImageID: Integer; DstLeft: Single; DstTop: Single; Diameter: Single; 
                        PenColor: Integer; PenWidth: Single; AntiAlias: WordBool): GdPictureStatus; dispid 267;
    function DrawEllipse(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                         Height: Single; PenColor: Integer; PenWidth: Single; AntiAlias: WordBool): GdPictureStatus; dispid 268;
    function DrawFilledCircle(ImageID: Integer; DstLeft: Single; DstTop: Single; Diameter: Single; 
                              FillColor: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 269;
    function DrawFilledCircleTextureFromFile(ImageID: Integer; const TextureFilePath: WideString; 
                                             DstLeft: Integer; DstTop: Integer; Diameter: Integer; 
                                             AntiAlias: WordBool): GdPictureStatus; dispid 270;
    function DrawFilledCircleTextureFromGdPictureImage(ImageID: Integer; ImageTexture: Integer; 
                                                       DstLeft: Integer; DstTop: Integer; 
                                                       Diameter: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 271;
    function DrawFilledEllipse(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                               Height: Single; FillColor: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 272;
    function DrawFilledPie(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                           Height: Single; StartAngle: Single; SweepAngle: Single; 
                           FillColor: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 273;
    function DrawFilledRectangle(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                                 Height: Single; FillColor: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 274;
    function DrawFilledRoundedRectangle(ImageID: Integer; DstLeft: Single; DstTop: Single; 
                                        Width: Single; Height: Single; Radius: Single; 
                                        FillColor: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 276;
    function DrawGdPictureImage(SrcImage: Integer; DstImage: Integer; DstLeft: Integer; 
                                DstTop: Integer; DstWidth: Integer; DstHeight: Integer; 
                                InterpolationMode: InterpolationMode): GdPictureStatus; dispid 277;
    function DrawGdPictureImageOnHDC(ImageID: Integer; hdc: Integer; DstLeft: Integer; 
                                     DstTop: Integer; DstWidth: Integer; DstHeight: Integer; 
                                     InterpolationMode: InterpolationMode): GdPictureStatus; dispid 278;
    function DrawGdPictureImageOnHwnd(ImageID: Integer; HANDLE: Integer; DstLeft: Integer; 
                                      DstTop: Integer; DstWidth: Integer; DstHeight: Integer; 
                                      InterpolationMode: InterpolationMode): GdPictureStatus; dispid 279;
    function DrawGdPictureImageOP(SrcImage: Integer; DstImage: Integer; DstLeft: Integer; 
                                  DstTop: Integer; DstWidth: Integer; DstHeight: Integer; 
                                  Op: Operators; InterpolationMode: InterpolationMode): GdPictureStatus; dispid 280;
    function DrawGdPictureImageOPRect(SrcImage: Integer; DstImage: Integer; DstLeft: Integer; 
                                      DstTop: Integer; DstWidth: Integer; DstHeight: Integer; 
                                      SrcLeft: Integer; SrcTop: Integer; SrcWidth: Integer; 
                                      SrcHeight: Integer; Op: Operators; 
                                      InterpolationMode: InterpolationMode): GdPictureStatus; dispid 281;
    function DrawGdPictureImageRect(SrcImage: Integer; DstImage: Integer; DstLeft: Single; 
                                    DstTop: Single; DstWidth: Single; DstHeight: Single; 
                                    SrcLeft: Single; SrcTop: Single; SrcWidth: Single; 
                                    SrcHeight: Single; InterpolationMode: InterpolationMode): GdPictureStatus; dispid 282;
    function DrawGdPictureImageRectOnHDC(ImageID: Integer; hdc: Integer; DstLeft: Single; 
                                         DstTop: Single; DstWidth: Single; DstHeight: Single; 
                                         SrcLeft: Single; SrcTop: Single; SrcWidth: Single; 
                                         SrcHeight: Single; InterpolationMode: InterpolationMode): GdPictureStatus; dispid 283;
    function DrawGdPictureImageRectOnHwnd(ImageID: Integer; HANDLE: Integer; DstLeft: Single; 
                                          DstTop: Single; DstWidth: Single; DstHeight: Single; 
                                          SrcLeft: Single; SrcTop: Single; SrcWidth: Single; 
                                          SrcHeight: Single; InterpolationMode: InterpolationMode): GdPictureStatus; dispid 284;
    function DrawGdPictureImageSkewing(SrcImage: Integer; DstImage: Integer; DstLeft1: Integer; 
                                       DstTop1: Integer; DstLeft2: Integer; DstTop2: Integer; 
                                       DstLeft3: Integer; DstTop3: Integer; 
                                       InterpolationMode: InterpolationMode; AntiAlias: WordBool): GdPictureStatus; dispid 285;
    function DrawGdPictureImageTransparency(SrcImage: Integer; DstImage: Integer; 
                                            Transparency: Integer; DstLeft: Integer; 
                                            DstTop: Integer; DstWidth: Integer; DstHeight: Integer; 
                                            InterpolationMode: InterpolationMode): GdPictureStatus; dispid 286;
    function DrawGdPictureImageTransparencyColor(SrcImage: Integer; DstImage: Integer; 
                                                 TransparentColor: Integer; DstLeft: Integer; 
                                                 DstTop: Integer; DstWidth: Integer; 
                                                 DstHeight: Integer; 
                                                 InterpolationMode: InterpolationMode): GdPictureStatus; dispid 1020;
    function DrawGdPictureImageTransparencyColor_2(SrcImage: Integer; DstImage: Integer; 
                                                   TransparentColor: Integer; Threshold: Single; 
                                                   DstLeft: Integer; DstTop: Integer; 
                                                   DstWidth: Integer; DstHeight: Integer; 
                                                   InterpolationMode: InterpolationMode): GdPictureStatus; dispid 1021;
    function DrawGradientLine(ImageID: Integer; SrcLeft: Single; SrcTop: Single; DstLeft: Single; 
                              DstTop: Single; PenWidth: Integer; StartColor: Integer; 
                              EndColor: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 287;
    function DrawLine(ImageID: Integer; SrcLeft: Single; SrcTop: Single; DstLeft: Single; 
                      DstTop: Single; PenWidth: Single; PenColor: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 288;
    function DrawLineTextureFromFile(ImageID: Integer; const TextureFilePath: WideString; 
                                     SrcLeft: Integer; SrcTop: Integer; DstLeft: Integer; 
                                     DstTop: Integer; PenWidth: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 289;
    function DrawLineTextureFromGdPictureImage(ImageID: Integer; ImageTexture: Integer; 
                                               SrcLeft: Integer; SrcTop: Integer; DstLeft: Integer; 
                                               DstTop: Integer; PenWidth: Integer; 
                                               AntiAlias: WordBool): GdPictureStatus; dispid 290;
    function DrawPie(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                     Height: Single; StartAngle: Single; SweepAngle: Single; PenWidth: Integer; 
                     PenColor: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 291;
    function DrawRectangle(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                           Height: Single; PenWidth: Integer; PenColor: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 292;
    function DrawRotatedEllipse(ImageID: Integer; Angle: Single; DstLeft: Single; DstTop: Single; 
                                Width: Single; Height: Single; PenWidth: Single; PenColor: Integer; 
                                AntiAlias: WordBool): GdPictureStatus; dispid 293;
    function DrawRotatedFilledRectangle(ImageID: Integer; Angle: Single; DstLeft: Single; 
                                        DstTop: Single; Width: Single; Height: Single; 
                                        FillColor: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 294;
    function DrawRotatedRectangle(ImageID: Integer; Angle: Single; DstLeft: Single; DstTop: Single; 
                                  Width: Single; Height: Single; PenWidth: Integer; 
                                  PenColor: Integer; AntiAlias: WordBool): GdPictureStatus; dispid 295;
    function DrawRotatedText(ImageID: Integer; Angle: Single; const Text: WideString; 
                             DstLeft: Integer; DstTop: Integer; FontSize: Single; 
                             FontStyle: FontStyle; TextColor: Integer; const FontName: WideString; 
                             AntiAlias: WordBool): GdPictureStatus; dispid 296;
    function DrawText(ImageID: Integer; const Text: WideString; DstLeft: Integer; DstTop: Integer; 
                      FontSize: Single; FontStyle: FontStyle; TextColor: Integer; 
                      const FontName: WideString; AntiAlias: WordBool): GdPictureStatus; dispid 297;
    function DrawTextBackColor(ImageID: Integer; const Text: WideString; DstLeft: Integer; 
                               DstTop: Integer; FontSize: Single; FontStyle: FontStyle; 
                               TextColor: Integer; BackColor: Integer; const FontName: WideString; 
                               AntiAlias: WordBool): GdPictureStatus; dispid 298;
    function DrawTextBox(ImageID: Integer; const Text: WideString; Left: Integer; Top: Integer; 
                         Width: Integer; Height: Integer; FontSize: Single; 
                         Alignment: TextAlignment; FontStyle: FontStyle; TextColor: Integer; 
                         const FontName: WideString; DrawBox: WordBool; AntiAlias: WordBool): GdPictureStatus; dispid 299;
    function DrawTextGradient(ImageID: Integer; const Text: WideString; DstLeft: Integer; 
                              DstTop: Integer; StartColor: Integer; EndColor: Integer; 
                              FontSize: Single; FontStyle: FontStyle; const FontName: WideString; 
                              AntiAlias: WordBool): GdPictureStatus; dispid 300;
    function DrawTextTextureFromFile(ImageID: Integer; const TextureFilePath: WideString; 
                                     const Text: WideString; DstLeft: Integer; DstTop: Integer; 
                                     FontSize: Single; FontStyle: FontStyle; 
                                     const FontName: WideString; AntiAlias: WordBool): GdPictureStatus; dispid 301;
    function DrawTextTextureFromGdPictureImage(ImageID: Integer; ImageTexture: Integer; 
                                               const Text: WideString; DstLeft: Integer; 
                                               DstTop: Integer; FontSize: Single; 
                                               FontStyle: FontStyle; const FontName: WideString; 
                                               AntiAlias: WordBool): GdPictureStatus; dispid 302;
    procedure EnableICM(Enable: WordBool); dispid 303;
    function Encode64String(const StringToEncode: WideString): WideString; dispid 304;
    function FindAnchor(ImageID: Integer; AnchorTemplateID: Integer; Mode: Byte; 
                        SearchLeft: Integer; SearchTop: Integer; SearchWidth: Integer; 
                        SearchHeight: Integer; var PosLeft: Integer; var PosTop: Integer; 
                        var PosWidth: Integer; var PosHeight: Integer; var Accuracy: Double): GdPictureStatus; dispid 305;
    function FindAnchorL(ImageID: Integer; AnchorTemplateID: {??Int64}OleVariant; Mode: Byte; 
                         SearchLeft: Integer; SearchTop: Integer; SearchWidth: Integer; 
                         SearchHeight: Integer; var PosLeft: Integer; var PosTop: Integer; 
                         var PosWidth: Integer; var PosHeight: Integer; var Accuracy: Double): GdPictureStatus; dispid 306;
    function FloodFill(ImageID: Integer; XStart: Integer; YStart: Integer; FillColor: Integer): GdPictureStatus; dispid 307;
    function FontGetCount: Integer; dispid 308;
    function FontGetName(FontNo: Integer): WideString; dispid 309;
    function FontIsSymbolic(FontNo: Integer): WordBool; dispid 995;
    function FontCanRenderText(FontNo: Integer; const Text: WideString): WordBool; dispid 996;
    function FontGetUnit: GdPicture14_UnitMode; dispid 310;
    function FontIsStyleAvailable(const FontName: WideString; FontStyle: FontStyle): WordBool; dispid 311;
    procedure FontSetUnit(UnitMode: GdPicture14_UnitMode); dispid 312;
    function ForceDownTop(ImageID: Integer): GdPictureStatus; dispid 313;
    function ForceTopDown(ImageID: Integer): GdPictureStatus; dispid 314;
    function FormDropOut(ImageID: Integer; TemplateID: Integer; UseGapCorrection: WordBool): GdPictureStatus; dispid 315;
    function FxAddNoise(ImageID: Integer): GdPictureStatus; dispid 316;
    function FxAqua(ImageID: Integer): GdPictureStatus; dispid 317;
    function FxBitonalClose8(ImageID: Integer): GdPictureStatus; dispid 318;
    function FxBitonalDespeckle(ImageID: Integer; FixText: WordBool): GdPictureStatus; dispid 319;
    function FxBitonalDespeckleAdvanced(ImageID: Integer; DespeckleMode: DespeckleType; 
                                        Strength: Integer): GdPictureStatus; dispid 320;
    function FxBitonalDespeckleMore(ImageID: Integer; FixText: WordBool): GdPictureStatus; dispid 321;
    function FxBitonalDilate(ImageID: Integer; KernelSize: Integer): GdPictureStatus; dispid 322;
    function FxBitonalDilate4(ImageID: Integer): GdPictureStatus; dispid 323;
    function FxBitonalDilate8(ImageID: Integer): GdPictureStatus; dispid 324;
    function FxBitonalDilateH(ImageID: Integer): GdPictureStatus; dispid 325;
    function FxBitonalDilateV(ImageID: Integer): GdPictureStatus; dispid 326;
    function FxBitonalErode(ImageID: Integer; KernelSize: Integer): GdPictureStatus; dispid 327;
    function FxBitonalErode4(ImageID: Integer): GdPictureStatus; dispid 328;
    function FxBitonalErode8(ImageID: Integer): GdPictureStatus; dispid 329;
    function FxBitonalErodeH(ImageID: Integer): GdPictureStatus; dispid 330;
    function FxBitonalErodeV(ImageID: Integer): GdPictureStatus; dispid 331;
    function FxBitonalFillHolesH(ImageID: Integer): GdPictureStatus; dispid 332;
    function FxBitonalFillHolesHV(ImageID: Integer): GdPictureStatus; dispid 333;
    function FxBitonalFillHolesV(ImageID: Integer): GdPictureStatus; dispid 334;
    function FxBitonalOpen8(ImageID: Integer): GdPictureStatus; dispid 335;
    function FxBitonalOutline(ImageID: Integer): GdPictureStatus; dispid 336;
    function FxBitonalRemoveIsolatedDots2x2(ImageID: Integer): GdPictureStatus; dispid 337;
    function FxBitonalRemoveIsolatedDots4(ImageID: Integer): GdPictureStatus; dispid 338;
    function FxBitonalRemoveIsolatedDots8(ImageID: Integer): GdPictureStatus; dispid 339;
    function FxBitonalSkeletonize(ImageID: Integer; Repetition: Integer): GdPictureStatus; dispid 340;
    function FxBitonalVigorousDespeckle(ImageID: Integer; CheckForDotOfI: WordBool): GdPictureStatus; dispid 341;
    function FxBlackNWhite(ImageID: Integer; Mode: BitonalReduction): GdPictureStatus; dispid 342;
    function FxBlackNWhiteT(ImageID: Integer; Threshold: Byte): GdPictureStatus; dispid 343;
    function FxBlackNWhite_2(ImageID: Integer; Mode: BitonalReduction; PalWeight: Integer): GdPictureStatus; dispid 344;
    function FxBlur(ImageID: Integer): GdPictureStatus; dispid 345;
    function FxColorDropout(ImageID: Integer; Filter: ColorDropoutFilter): GdPictureStatus; dispid 346;
    function FxColorize(ImageID: Integer; Hue: Single; Saturation: Single; Luminosity: Single): GdPictureStatus; dispid 347;
    function FxConnectedContour(ImageID: Integer): GdPictureStatus; dispid 348;
    function FxContour(ImageID: Integer): GdPictureStatus; dispid 349;
    function FxDespeckle(ImageID: Integer): GdPictureStatus; dispid 350;
    function FxDespeckleMore(ImageID: Integer): GdPictureStatus; dispid 351;
    function FxDiffuse(ImageID: Integer): GdPictureStatus; dispid 352;
    function FxDiffuseMore(ImageID: Integer): GdPictureStatus; dispid 353;
    function FxDilate(ImageID: Integer): GdPictureStatus; dispid 354;
    function FxEdgeEnhance(ImageID: Integer): GdPictureStatus; dispid 355;
    function FxEmboss(ImageID: Integer): GdPictureStatus; dispid 356;
    function FxEmbossMore(ImageID: Integer): GdPictureStatus; dispid 357;
    function FxEngrave(ImageID: Integer): GdPictureStatus; dispid 358;
    function FxEngraveMore(ImageID: Integer): GdPictureStatus; dispid 359;
    function FxEqualizeIntensity(ImageID: Integer): GdPictureStatus; dispid 360;
    function FxErode(ImageID: Integer): GdPictureStatus; dispid 361;
    function FxFire(ImageID: Integer): GdPictureStatus; dispid 362;
    function FxGaussian(ImageID: Integer; KernelSize: Integer): GdPictureStatus; dispid 363;
    function FxGrayscale(ImageID: Integer): GdPictureStatus; dispid 364;
    function FxHalo(ImageID: Integer; Left: Integer; Top: Integer; Radius: Integer): GdPictureStatus; dispid 365;
    function FxhWaves(ImageID: Integer; WidthWave: Integer; HeightWave: Integer): GdPictureStatus; dispid 366;
    function FxMax(ImageID: Integer; KernelSize: Integer): GdPictureStatus; dispid 367;
    function FxMedian(ImageID: Integer; KernelSize: Integer): GdPictureStatus; dispid 368;
    function FxMin(ImageID: Integer; KernelSize: Integer): GdPictureStatus; dispid 369;
    function FxMirrorRounded(ImageID: Integer): GdPictureStatus; dispid 370;
    function FxNegative(ImageID: Integer): GdPictureStatus; dispid 371;
    function FxPixelize(ImageID: Integer): GdPictureStatus; dispid 372;
    function FxPrewittEdgeDetect(ImageID: Integer): GdPictureStatus; dispid 373;
    function FxRedEyesCorrection(ImageID: Integer): GdPictureStatus; dispid 374;
    function FxRelief(ImageID: Integer): GdPictureStatus; dispid 375;
    function fxRemoveBackgroundChromaKey(ImageID: Integer; Component: ColorKey; Variation: Integer; 
                                         MinKeyValue: Integer): GdPictureStatus; dispid 376;
    function FxScanLine(ImageID: Integer): GdPictureStatus; dispid 377;
    function FxSepia(ImageID: Integer): GdPictureStatus; dispid 378;
    function FxSharpen(ImageID: Integer): GdPictureStatus; dispid 379;
    function FxSharpenMore(ImageID: Integer): GdPictureStatus; dispid 380;
    function FxSmooth(ImageID: Integer): GdPictureStatus; dispid 381;
    function FxSobelEdgeDetect(ImageID: Integer): GdPictureStatus; dispid 382;
    function FxSoften(ImageID: Integer; SoftenValue: Integer): GdPictureStatus; dispid 383;
    function FxStretchContrast(ImageID: Integer): GdPictureStatus; dispid 384;
    function FxSubtractBackground(ImageID: Integer; RollingBallSize: Integer; 
                                  LightBackground: WordBool): GdPictureStatus; dispid 385;
    function FxSwirl(ImageID: Integer; Factor: Single): GdPictureStatus; dispid 386;
    function FxTwirl(ImageID: Integer; Factor: Single): GdPictureStatus; dispid 387;
    function FxUnsharpMask(ImageID: Integer; Radius: Integer; Amount: Double; Threshold: Integer): GdPictureStatus; dispid 388;
    function FxvWaves(ImageID: Integer; WidthWave: Integer; HeightWave: Integer): GdPictureStatus; dispid 389;
    function GetAlphaChannel(ImageID: Integer; var Alpha: {??PSafeArray}OleVariant; 
                             SrcLeft: Integer; SrcTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; dispid 390;
    function GetAttachedThumbnail(ImageID: Integer): Integer; dispid 391;
    function GetAverageColor(ImageID: Integer): Integer; dispid 392;
    function GetBitDepth(ImageID: Integer): Integer; dispid 393;
    function GetBits(ImageID: Integer): Integer; dispid 394;
    function GetColorChannelFlagsC(ImageID: Integer): Integer; dispid 395;
    function GetColorChannelFlagsK(ImageID: Integer): Integer; dispid 396;
    function GetColorChannelFlagsM(ImageID: Integer): Integer; dispid 397;
    function GetColorChannelFlagsY(ImageID: Integer): Integer; dispid 398;
    function GetDesktopHwndI: Integer; dispid 399;
    function GetDibFromGdPictureImageI(ImageID: Integer): Integer; dispid 400;
    function GetDistance(ImageID: Integer; Left1: Integer; Top1: Integer; Left2: Integer; 
                         Top2: Integer): Double; dispid 401;
    function GetHBitmapFromGdPictureImageI(ImageID: Integer): Integer; dispid 403;
    function GetHdcFromGdPictureImage(ImageID: Integer): Integer; dispid 404;
    function GetHeight(ImageID: Integer): Integer; dispid 405;
    function GetHeightInches(ImageID: Integer): Double; dispid 406;
    function GetHorizontalResolution(ImageID: Integer): Single; dispid 407;
    function GetImageColorSpace(ImageID: Integer): ImageColorSpace; dispid 408;
    function GetImageFormat(ImageID: Integer): DocumentFormat; dispid 409;
    function GetLastPath: WideString; dispid 410;
    function GetLastTransferError: WideString; dispid 411;
    function GetPageCount(ImageID: Integer): Integer; dispid 412;
    function GetPixelArrayByte(ImageID: Integer; var Data: {??PSafeArray}OleVariant; 
                               SrcLeft: Integer; SrcTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; dispid 413;
    function GetPixelArrayByte8bpp(ImageID: Integer; var Data: {??PSafeArray}OleVariant; 
                                   SrcLeft: Integer; SrcTop: Integer; Width: Integer; 
                                   Height: Integer): GdPictureStatus; dispid 414;
    function GetPixelArrayInteger(ImageID: Integer; var Data: {??PSafeArray}OleVariant; 
                                  SrcLeft: Integer; SrcTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; dispid 415;
    function GetPixelFormat(ImageID: Integer): PixelFormat; dispid 416;
    function GetResizedGdPictureImage(ImageID: Integer; NewImageWidth: Integer; 
                                      NewImageHeight: Integer; InterpolationMode: InterpolationMode): Integer; dispid 417;
    function GetScanLines(ImageID: Integer): {??PSafeArray}OleVariant; dispid 418;
    function GetSelectedPage(ImageID: Integer): Integer; dispid 419;
    function GetSkewAngle(ImageID: Integer; MaxAngleOfResearch: Single): Single; dispid 420;
    function GetSkewAngle_2(ImageID: Integer; MaxAngleOfResearch: Single; AngleStep: Single; 
                            Optimistic: WordBool): Single; dispid 421;
    function GetStat: GdPictureStatus; dispid 422;
    function GetStride(ImageID: Integer): Integer; dispid 423;
    function GetTextHeight(ImageID: Integer; const Text: WideString; const FontName: WideString; 
                           FontSize: Single; FontStyle: FontStyle): Single; dispid 424;
    function GetTextWidth(ImageID: Integer; const Text: WideString; const FontName: WideString; 
                          FontSize: Single; FontStyle: FontStyle): Single; dispid 425;
    function GetTiffCompression(ImageID: Integer): TiffCompression; dispid 426;
    function GetVersion: Double; dispid 427;
    function GetVerticalResolution(ImageID: Integer): Single; dispid 428;
    function GetWidth(ImageID: Integer): Integer; dispid 429;
    function GetWidthInches(ImageID: Integer): Double; dispid 430;
    function GifAppendFrameFromFile(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 431;
    function GifAppendFrameFromGdPictureImage(ImageID: Integer; ImageToAddID: Integer): GdPictureStatus; dispid 432;
    function GifCreateMultiFrameFromFile(const FilePath: WideString): Integer; dispid 433;
    function GifCreateMultiFrameFromGdPictureImage(ImageID: Integer): Integer; dispid 434;
    function GifDeleteFrame(ImageID: Integer; Frame: Integer): GdPictureStatus; dispid 435;
    function GifGetCurrentFrame(ImageID: Integer): Integer; dispid 436;
    function GifGetFrameCount(ImageID: Integer): Integer; dispid 437;
    function GifGetFrameTime(ImageID: Integer; Frame: Integer): Integer; dispid 438;
    function GifGetLoopCount(ImageID: Integer): Integer; dispid 439;
    function GifInsertFrameFromFile(ImageID: Integer; Position: Integer; const FilePath: WideString): GdPictureStatus; dispid 440;
    function GifInsertFrameFromGdPictureImage(ImageID: Integer; Position: Integer; 
                                              ImageToAddID: Integer): GdPictureStatus; dispid 441;
    function GifIsEditableMultiFrame(ImageID: Integer): WordBool; dispid 442;
    function GifIsMultiFrame(ImageID: Integer): WordBool; dispid 443;
    procedure GifOpenMultiFrameForWrite(WriteAccess: WordBool); dispid 444;
    function GifSaveMultiFrameToFile(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 445;
    function GifSelectFrame(ImageID: Integer; Frame: Integer): GdPictureStatus; dispid 446;
    function GifSetFrameDisposal(ImageID: Integer; Frame: Integer; FrameDisposal: Integer): GdPictureStatus; dispid 447;
    function GifSetFrameTime(ImageID: Integer; Frame: Integer; FrameTime: Integer): GdPictureStatus; dispid 448;
    function GifSetLoopCount(ImageID: Integer; LoopCount: Integer): GdPictureStatus; dispid 449;
    function GifSetTransparency(ImageID: Integer; TransparentColor: Integer): GdPictureStatus; dispid 1018;
    function GifSwapFrames(ImageID: Integer; Frame1: Integer; Frame2: Integer): GdPictureStatus; dispid 450;
    function HasAttachedThumbnail(ImageID: Integer): WordBool; dispid 451;
    function HasGrayPalette256(ImageID: Integer): WordBool; dispid 452;
    function HasTransparency(ImageID: Integer): WordBool; dispid 453;
    function HistogramGet8Bpp(ImageID: Integer; var Data: {??PSafeArray}OleVariant): GdPictureStatus; dispid 454;
    function HistogramGetAlpha(ImageID: Integer; var Data: {??PSafeArray}OleVariant): GdPictureStatus; dispid 455;
    function HistogramGetARGB(ImageID: Integer; var HistoA: {??PSafeArray}OleVariant; 
                              var HistoR: {??PSafeArray}OleVariant; 
                              var HistoG: {??PSafeArray}OleVariant; 
                              var HistoB: {??PSafeArray}OleVariant): GdPictureStatus; dispid 456;
    function HistogramGetBlue(ImageID: Integer; var Data: {??PSafeArray}OleVariant): GdPictureStatus; dispid 457;
    function HistogramGetGreen(ImageID: Integer; var Data: {??PSafeArray}OleVariant): GdPictureStatus; dispid 458;
    function HistogramGetRed(ImageID: Integer; var Data: {??PSafeArray}OleVariant): GdPictureStatus; dispid 459;
    function ICCAddFromFile(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 460;
    function ICCAddProfileToFile(const ImagePath: WideString; const ProfilePath: WideString): GdPictureStatus; dispid 461;
    function ICCExportToFile(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 462;
    function ICCImageHasProfile(ImageID: Integer): WordBool; dispid 463;
    function ICCRemove(ImageID: Integer): GdPictureStatus; dispid 464;
    function ICCRemoveProfileOfFile(const FilePath: WideString): GdPictureStatus; dispid 465;
    function ICCSetRGBProfile(ImageID: Integer; const ProfilePath: WideString): GdPictureStatus; dispid 466;
    function IPTCCount(ImageID: Integer): Integer; dispid 467;
    function IPTCDelete(ImageID: Integer; TagNo: Integer): GdPictureStatus; dispid 468;
    function IPTCDeleteAll(ImageID: Integer): GdPictureStatus; dispid 469;
    function IPTCGetID(ImageID: Integer; TagNo: Integer): IPTCTags; dispid 470;
    function IPTCGetLength(ImageID: Integer; TagNo: Integer): Integer; dispid 471;
    function IPTCGetType(ImageID: Integer; TagNo: Integer): TagType; dispid 472;
    function IPTCGetValueBytes(ImageID: Integer; TagNo: Integer; var Data: {??PSafeArray}OleVariant): Integer; dispid 473;
    function IPTCGetValueString(ImageID: Integer; TagNo: Integer): WideString; dispid 474;
    function IPTCSetValueString(ImageID: Integer; IPTCTagID: IPTCTags; const TagData: WideString): GdPictureStatus; dispid 475;
    function IsBitonal(ImageID: Integer): WordBool; dispid 476;
    function IsBitonal_2(ImageID: Integer; Threshold: Integer): WordBool; dispid 477;
    function IsBlank(ImageID: Integer): WordBool; dispid 478;
    function IsBlank_2(ImageID: Integer; Confidence: Single): WordBool; dispid 479;
    function IsBlank_3(ImageID: Integer; Confidence: Single; AccountForMargins: WordBool): WordBool; dispid 480;
    function IsBlank_4(ImageID: Integer; Confidence: Single; AccountForMargins: WordBool; 
                       var ConfidenceOut: Single): WordBool; dispid 481;
    function IsBlank_5(ImageID: Integer; Confidence: Single; AccountForMargins: WordBool; 
                       AccountForPunchHoles: WordBool; var ConfidenceOut: Single): WordBool; dispid 482;
    function IsCMYKFile(const FilePath: WideString): WordBool; dispid 483;
    function IsGrayscale(ImageID: Integer): WordBool; dispid 484;
    function IsNegative(ImageID: Integer): WordBool; dispid 485;
    function IsPixelFormatHasAlpha(ImageID: Integer): WordBool; dispid 486;
    function IsPixelFormatIndexed(ImageID: Integer): WordBool; dispid 487;
    function JBIG2AddToMultiPageFile(ImageID: Integer; ImageToAddID: Integer): GdPictureStatus; dispid 488;
    function JBIG2CloseMultiPageFile(ImageID: Integer): GdPictureStatus; dispid 489;
    function JBIG2GetPageCount(ImageID: Integer): Integer; dispid 490;
    function JBIG2IsMultiPage(ImageID: Integer): WordBool; dispid 491;
    function JBIG2SaveAsMultiPageFile(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 492;
    function JBIG2SelectPage(ImageID: Integer; Page: Integer): GdPictureStatus; dispid 493;
    function JPEGLosslessCrop(const SrcFile: WideString; const DstFile: WideString; Left: Integer; 
                              Top: Integer; Width: Integer; Height: Integer): GdPictureStatus; dispid 494;
    function KeepBlueComponent(ImageID: Integer): GdPictureStatus; dispid 495;
    function KeepGreenComponent(ImageID: Integer): GdPictureStatus; dispid 496;
    function KeepRedComponent(ImageID: Integer): GdPictureStatus; dispid 497;
    function MeasureTextBox(ImageID: Integer; const Text: WideString; var Left: Single; 
                            var Top: Single; var Width: Single; var Height: Single; 
                            FontSize: Single; Alignment: TextAlignment; FontStyle: FontStyle; 
                            const FontName: WideString; AntiAlias: WordBool; 
                            var CharactersFitted: Integer; var LinesFilled: Integer): GdPictureStatus; dispid 498;
    procedure MICRClear; dispid 499;
    function MICRDoMICR(ImageID: Integer; SymbolsFont: MICRFont; Context: MICRContext; 
                        const WhiteList: WideString; ExpectedSymbols: Integer): WideString; dispid 500;
    function MICRGetSymbolBottom(SymbolNo: Integer): Integer; dispid 501;
    function MICRGetSymbolConfidence(SymbolNo: Integer; Candidate: Integer): Single; dispid 502;
    function MICRGetSymbolLeft(SymbolNo: Integer): Integer; dispid 503;
    function MICRGetSymbolLine(SymbolNo: Integer): Integer; dispid 504;
    function MICRGetSymbolRight(SymbolNo: Integer): Integer; dispid 505;
    function MICRGetSymbolsCount: Integer; dispid 506;
    function MICRGetSymbolTop(SymbolNo: Integer): Integer; dispid 507;
    function MICRGetSymbolValue(SymbolNo: Integer; Candidate: Integer): WideString; dispid 508;
    function OMRDetectMarks(ImageID: Integer; var Areas: {??PSafeArray}OleVariant; 
                            AreasCount: Integer; Sensitivity: Double; 
                            var Confidence: {??PSafeArray}OleVariant; HasCharacter: WordBool): {??PSafeArray}OleVariant; dispid 509;
    function OMRDetectOvalMarks(ImageID: Integer; var Areas: {??PSafeArray}OleVariant; 
                                AreasCount: Integer; Sensitivity: Double; 
                                var Confidence: {??PSafeArray}OleVariant; HasCharacter: WordBool): {??PSafeArray}OleVariant; dispid 510;
    function PaletteGetColorsCount(ImageID: Integer): Integer; dispid 511;
    function PaletteGetType(ImageID: Integer): PaletteType; dispid 512;
    function PaletteHasTransparentColor(ImageID: Integer): WordBool; dispid 513;
    function PaletteSetTransparentColor(ImageID: Integer; TransparentColor: Integer): GdPictureStatus; dispid 1019;
    function PaletteSwapEntries(ImageID: Integer; Entrie1: Integer; Entrie2: Integer): GdPictureStatus; dispid 514;
    procedure PatchCodeReaderClear; dispid 515;
    function PatchCodeReaderDoScan(ImageID: Integer): GdPictureStatus; dispid 516;
    function PatchCodeReaderGetCodeCount: Integer; dispid 517;
    function PatchCodeReaderGetCodeType(PatchCodeNo: Integer): PatchCodeType; dispid 518;
    function PatchCodeReaderGetCodeX1(PatchCodeNo: Integer): Integer; dispid 519;
    function PatchCodeReaderGetCodeX2(PatchCodeNo: Integer): Integer; dispid 520;
    function PatchCodeReaderGetCodeX3(PatchCodeNo: Integer): Integer; dispid 521;
    function PatchCodeReaderGetCodeX4(PatchCodeNo: Integer): Integer; dispid 522;
    function PatchCodeReaderGetCodeY1(PatchCodeNo: Integer): Integer; dispid 523;
    function PatchCodeReaderGetCodeY2(PatchCodeNo: Integer): Integer; dispid 524;
    function PatchCodeReaderGetCodeY3(PatchCodeNo: Integer): Integer; dispid 525;
    function PatchCodeReaderGetCodeY4(PatchCodeNo: Integer): Integer; dispid 526;
    function PdfCreateFromMultipageTIFF(ImageID: Integer; const PdfFileDest: WideString; 
                                        PDFA: WordBool; const Title: WideString; 
                                        const Author: WideString; const Subject: WideString; 
                                        const Keywords: WideString; const Creator: WideString): GdPictureStatus; dispid 527;
    function PdfCreateFromMultipageTIFF_2(ImageID: Integer; const PdfFileDest: WideString; 
                                          PDFA: WordBool; const Title: WideString; 
                                          const Author: WideString; const Subject: WideString; 
                                          const Keywords: WideString; const Creator: WideString; 
                                          BitonalCompressionScheme: PdfCompression; 
                                          ColorCompressionScheme: PdfCompression): GdPictureStatus; dispid 528;
    function PdfCreateFromMultipageTIFF_3(ImageID: Integer; const PdfFileDest: WideString; 
                                          const Title: WideString; const Author: WideString; 
                                          const Subject: WideString; const Keywords: WideString; 
                                          const Creator: WideString; Encryption: PdfEncryption; 
                                          Rights: PdfRight; const UserPassword: WideString; 
                                          const OwnerPassword: WideString): GdPictureStatus; dispid 529;
    function PdfCreateFromMultipageTIFF_4(ImageID: Integer; const PdfFileDest: WideString; 
                                          const Title: WideString; const Author: WideString; 
                                          const Subject: WideString; const Keywords: WideString; 
                                          const Creator: WideString; Encryption: PdfEncryption; 
                                          Rights: PdfRight; const UserPassword: WideString; 
                                          const OwnerPassword: WideString; 
                                          BitonalCompressionScheme: PdfCompression; 
                                          ColorCompressionScheme: PdfCompression): GdPictureStatus; dispid 530;
    function PdfCreateRights(CanPrint: WordBool; CanModify: WordBool; CanCopy: WordBool; 
                             CanAddNotes: WordBool; CanFillFields: WordBool; 
                             CanCopyAccess: WordBool; CanAssemble: WordBool; CanPrintFull: WordBool): PdfRight; dispid 531;
    function PixelGetColorI(ImageID: Integer; SrcLeft: Integer; SrcTop: Integer): Integer; dispid 532;
    function PixelSetColorI(ImageID: Integer; DstLeft: Integer; DstTop: Integer; PixelColor: Integer): GdPictureStatus; dispid 533;
    function Print(ImageID: Integer): GdPictureStatus; dispid 534;
    function PrintBySize(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                         Height: Single): GdPictureStatus; dispid 535;
    function PrintDialog(ImageID: Integer): WordBool; dispid 536;
    function PrintDialogBySize(ImageID: Integer; DstLeft: Single; DstTop: Single; Width: Single; 
                               Height: Single): WordBool; dispid 537;
    function PrintDialogFit(ImageID: Integer): WordBool; dispid 538;
    function PrintFit(ImageID: Integer): GdPictureStatus; dispid 539;
    function PrintGetActivePrinter: WideString; dispid 540;
    function PrintGetAlignment: PrintAlignment; dispid 541;
    function PrintGetCollate: WordBool; dispid 542;
    function PrintGetColorMode: PrinterColorMode; dispid 543;
    function PrintGetCopies: Smallint; dispid 544;
    function PrintGetDocumentName: WideString; dispid 545;
    function PrintGetDuplexMode: Duplex; dispid 546;
    function PrintGetLastError: WideString; dispid 547;
    function PrintGetMargins(var LeftMargin: Single; var TopMargin: Single): GdPictureStatus; dispid 548;
    function PrintGetOrientation: PrinterOrientation; dispid 549;
    function PrintGetPaperBin: Integer; dispid 550;
    function PrintGetPaperHeight: Single; dispid 551;
    function PrintGetPaperSize: Integer; dispid 552;
    function PrintGetPaperWidth: Single; dispid 553;
    function PrintGetPrinterName(PrinterNo: Integer): WideString; dispid 554;
    function PrintGetPrintersCount: Integer; dispid 555;
    function PrintGetQuality: PrintQuality; dispid 557;
    function PrintGetStat: GdPictureStatus; dispid 558;
    function PrintInterop(ImageID: Integer): GdPictureStatus; dispid 559;
    function PrintSetActivePrinter(const PrinterName: WideString): WordBool; dispid 560;
    function PrintSetAlignment(Alignment: PrintAlignment): GdPictureStatus; dispid 561;
    function PrintSetAutoRotation(AutoRotation: WordBool): GdPictureStatus; dispid 562;
    function PrintSetCollate(Collate: WordBool): GdPictureStatus; dispid 563;
    function PrintSetColorMode(ColorMode: PrinterColorMode): GdPictureStatus; dispid 564;
    function PrintSetCopies(Copies: Smallint): GdPictureStatus; dispid 565;
    function PrintSetDocumentName(const DocumentName: WideString): GdPictureStatus; dispid 566;
    function PrintSetDuplexMode(DuplexMode: Duplex): GdPictureStatus; dispid 567;
    function PrintSetFromToPage(FromPage: Integer; ToPage: Integer): GdPictureStatus; dispid 568;
    function PrintSetOrientation(Orientation: PrinterOrientation): GdPictureStatus; dispid 569;
    function PrintSetPageSelection(const CustomRange: WideString): GdPictureStatus; dispid 570;
    function PrintSetPaperBin(PaperBin: Integer): WordBool; dispid 571;
    function PrintSetQuality(Quality: PrintQuality): GdPictureStatus; dispid 574;
    function PrintSetShowPrintingProgress(Show: WordBool): GdPictureStatus; dispid 575;
    function PrintSetStdPaperSize(PaperSize: Integer): GdPictureStatus; dispid 576;
    function PrintSetUserPaperSize(PaperWidth: Single; PaperHeight: Single): GdPictureStatus; dispid 577;
    function PrintShowPrinterSettingsDialog(HANDLE: Integer): GdPictureStatus; dispid 578;
    procedure ReleaseDib(Dib: Integer); dispid 579;
    function ReleaseGdPictureImage(ImageID: Integer): GdPictureStatus; dispid 580;
    procedure ReleaseHBitmapI(hBitmap: Integer); dispid 581;
    function ReleaseHdcFromGdPictureImage(ImageID: Integer): GdPictureStatus; dispid 582;
    function RemoveBlob(ImageID: Integer; MinBlobWidth: Integer; MinBlobHeight: Integer; 
                        MaxBlobWidth: Integer; MaxBlobHeight: Integer; Mode: Byte): GdPictureStatus; dispid 583;
    function RemoveBlob_2(ImageID: Integer; MinBlobWidth: Integer; MinBlobHeight: Integer; 
                          MaxBlobWidth: Integer; MaxBlobHeight: Integer; MinFillPercent: Integer; 
                          MaxFillPercent: Integer): GdPictureStatus; dispid 584;
    function RemoveBlueComponent(ImageID: Integer): GdPictureStatus; dispid 585;
    function RemoveGreenComponent(ImageID: Integer): GdPictureStatus; dispid 586;
    function RemoveHolePunch(ImageID: Integer): GdPictureStatus; dispid 587;
    function RemoveHolePunch_2(ImageID: Integer; Margins: HolePunchMargins): GdPictureStatus; dispid 588;
    function RemoveLines(ImageID: Integer; Orientation: LineRemoveOrientation): GdPictureStatus; dispid 589;
    function RemoveLines_2(ImageID: Integer; Orientation: LineRemoveOrientation; 
                           MaxLineGap: Integer; MaxLineThickness: Integer; MinLineLength: Integer; 
                           MaxInterception: Integer; ReConnectBrokenCharacters: WordBool): GdPictureStatus; dispid 590;
    function RemoveRedComponent(ImageID: Integer): GdPictureStatus; dispid 591;
    function RemoveStapleMark(ImageID: Integer): GdPictureStatus; dispid 592;
    procedure ResetROI; dispid 593;
    function Resize(ImageID: Integer; NewImageWidth: Integer; NewImageHeight: Integer; 
                    InterpolationMode: InterpolationMode): GdPictureStatus; dispid 594;
    function ResizeHeightRatio(ImageID: Integer; NewImageHeight: Integer; 
                               InterpolationMode: InterpolationMode): GdPictureStatus; dispid 595;
    function ResizeWidthRatio(ImageID: Integer; NewImageWidth: Integer; 
                              InterpolationMode: InterpolationMode): GdPictureStatus; dispid 596;
    function Rotate(ImageID: Integer; Rotation: RotateFlipType): GdPictureStatus; dispid 597;
    function RotateAngle(ImageID: Integer; Angle: Single): GdPictureStatus; dispid 598;
    function RotateAngleBackColor(ImageID: Integer; Angle: Single; BackColor: Integer): GdPictureStatus; dispid 599;
    function RotateAnglePreserveDimensions(ImageID: Integer; Angle: Single): GdPictureStatus; dispid 600;
    function RotateAnglePreserveDimensionsBackColor(ImageID: Integer; Angle: Single; 
                                                    BackColor: Integer): GdPictureStatus; dispid 601;
    function RotateAnglePreserveDimensionsCenter(ImageID: Integer; Angle: Single): GdPictureStatus; dispid 602;
    function SaveAsBMP(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 603;
    function SaveAsBMP_2(ImageID: Integer; const FilePath: WideString; UseRLE: WordBool): GdPictureStatus; dispid 604;
    function SaveAsByteArray(ImageID: Integer; var Data: {??PSafeArray}OleVariant; 
                             var Length: Integer; ImageFormat: DocumentFormat; 
                             EncoderParameter: Integer): GdPictureStatus; dispid 605;
    function SaveAsEXR(ImageID: Integer; const FilePath: WideString; Compression: ExrCompression): GdPictureStatus; dispid 606;
    function SaveAsGIF(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 607;
    function SaveAsICO(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 608;
    function SaveAsICO_2(ImageID: Integer; const FilePath: WideString; IconSize: IconSize): GdPictureStatus; dispid 609;
    function SaveAsIStream(ImageID: Integer; const Stream: IUnknown; ImageFormat: DocumentFormat; 
                           EncoderParameter: Integer): GdPictureStatus; dispid 610;
    function SaveAsJ2K(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 611;
    function SaveAsJ2K_2(ImageID: Integer; const FilePath: WideString; Rate: Integer): GdPictureStatus; dispid 612;
    function SaveAsJBIG2(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 613;
    function SaveAsJP2(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 614;
    function SaveAsJP2_2(ImageID: Integer; const FilePath: WideString; Rate: Integer): GdPictureStatus; dispid 615;
    function SaveAsJPEG(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 616;
    function SaveAsJPEG_2(ImageID: Integer; const FilePath: WideString; Quality: Integer): GdPictureStatus; dispid 617;
    function SaveAsJPEG_3(ImageID: Integer; const FilePath: WideString; Quality: Integer; 
                          Progressive: WordBool): GdPictureStatus; dispid 618;
    function SaveAsJPEG_4(ImageID: Integer; const FilePath: WideString; Quality: Integer; 
                          Progressive: WordBool; JPEGSubsamplingMode: JPEGSubsamplingMode): GdPictureStatus; dispid 619;
    function SaveAsPBM(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 620;
    function SaveAsPDF(ImageID: Integer; const FilePath: WideString; PDFA: WordBool; 
                       const Title: WideString; const Author: WideString; 
                       const Subject: WideString; const Keywords: WideString; 
                       const Creator: WideString): GdPictureStatus; dispid 621;
    function SaveAsPDF_2(ImageID: Integer; const FilePath: WideString; const Title: WideString; 
                         const Author: WideString; const Subject: WideString; 
                         const Keywords: WideString; const Creator: WideString; 
                         Encryption: PdfEncryption; Rights: PdfRight; 
                         const UserPassword: WideString; const OwnerPassword: WideString): GdPictureStatus; dispid 622;
    function SaveAsPDF_3(ImageID: Integer; const PDFStream: IUnknown; const Title: WideString; 
                         const Author: WideString; const Subject: WideString; 
                         const Keywords: WideString; const Creator: WideString; 
                         Encryption: PdfEncryption; Rights: PdfRight; 
                         const UserPassword: WideString; const OwnerPassword: WideString): GdPictureStatus; dispid 623;
    function SaveAsPNG(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 624;
    function SaveAsPNG_2(ImageID: Integer; const FilePath: WideString; CompressionLevel: Integer; 
                         Interlaced: WordBool): GdPictureStatus; dispid 625;
    function SaveAsString(ImageID: Integer; ImageFormat: DocumentFormat; EncoderParameter: Integer): WideString; dispid 626;
    function SaveAsTGA(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 627;
    function SaveAsTIFF(ImageID: Integer; const FilePath: WideString; Compression: TiffCompression): GdPictureStatus; dispid 628;
    function SaveAsTIFF_2(ImageID: Integer; const FilePath: WideString; 
                          Compression: TiffCompression; JpegQuality: Integer): GdPictureStatus; dispid 629;
    function SaveAsTIFF_3(ImageID: Integer; const FilePath: WideString; CMYKMode: WordBool; 
                          Compression: TiffCompression): GdPictureStatus; dispid 630;
    function SaveAsTIFF_4(ImageID: Integer; const FilePath: WideString; CMYKMode: WordBool; 
                          Compression: TiffCompression; JpegQuality: Integer): GdPictureStatus; dispid 631;
    function SaveAsWBMP(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 632;
    function SaveAsWEBP(ImageID: Integer; const FilePath: WideString; Quality: Single; 
                        Method: Integer): GdPictureStatus; dispid 633;
    function SaveAsWMF(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 634;
    function SaveAsXPM(ImageID: Integer; const FilePath: WideString): GdPictureStatus; dispid 635;
    function SaveToFTP(ImageID: Integer; ImageFormat: DocumentFormat; EncoderParameter: Integer; 
                       const Host: WideString; const Path: WideString; const Login: WideString; 
                       const Password: WideString; FTPPort: Integer): GdPictureStatus; dispid 636;
    function SaveToHTTP(ImageID: Integer; ImageFormat: DocumentFormat; EncoderParameter: Integer; 
                        const Address: WideString): GdPictureStatus; dispid 637;
    function SaveToHTTP_2(ImageID: Integer; ImageFormat: DocumentFormat; EncoderParameter: Integer; 
                          const Address: WideString; const Login: WideString; 
                          const Password: WideString): GdPictureStatus; dispid 638;
    function Scale(ImageID: Integer; ScalePercent: Single; InterpolationMode: InterpolationMode): GdPictureStatus; dispid 639;
    function ScaleBlueComponent(ImageID: Integer; Factor: Single): GdPictureStatus; dispid 640;
    function ScaleEx(ImageID: Integer; ScalePercent: Single; InterpolationMode: InterpolationMode): GdPictureStatus; dispid 641;
    function ScaleGreenComponent(ImageID: Integer; Factor: Single): GdPictureStatus; dispid 642;
    function ScaleRedComponent(ImageID: Integer; Factor: Single): GdPictureStatus; dispid 643;
    function SelectPage_2(ImageID: Integer; PageNo: Integer; DirectAccess: WordBool): GdPictureStatus; dispid 644;
    function SelectPage(ImageID: Integer; PageNo: Integer): GdPictureStatus; dispid 645;
    function SetAlphaChannel(ImageID: Integer; var Alpha: {??PSafeArray}OleVariant; 
                             SrcLeft: Integer; SrcTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; dispid 646;
    function SetBCSG(ImageID: Integer; Brightness: Integer; Contrast: Integer; Saturation: Integer; 
                     Gamma: Integer): GdPictureStatus; dispid 647;
    function SetBrightness(ImageID: Integer; Brightness: Integer): GdPictureStatus; dispid 648;
    procedure SetCacheMode(CacheMode: PageCacheMode); dispid 649;
    function SetContrast(ImageID: Integer; Contrast: Integer): GdPictureStatus; dispid 650;
    procedure SetFtpPassiveMode(PassiveMode: WordBool); dispid 651;
    function SetGammaCorrection(ImageID: Integer; Gamma: Integer): GdPictureStatus; dispid 652;
    function SetHorizontalResolution(ImageID: Integer; HorizontalResolution: Single): GdPictureStatus; dispid 653;
    procedure SetHttpTransferBufferSize(Buffersize: Integer); dispid 654;
    function SetPixelArrayByte(ImageID: Integer; var Data: {??PSafeArray}OleVariant; 
                               DstLeft: Integer; DstTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; dispid 655;
    function SetPixelArrayByte8bpp(ImageID: Integer; var Data: {??PSafeArray}OleVariant; 
                                   DstLeft: Integer; DstTop: Integer; Width: Integer; 
                                   Height: Integer): GdPictureStatus; dispid 656;
    function SetPixelArrayByteBGR(ImageID: Integer; var Data: {??PSafeArray}OleVariant; 
                                  DstLeft: Integer; DstTop: Integer; Width: Integer; 
                                  Height: Integer; InputIsRGB: WordBool): GdPictureStatus; dispid 657;
    function SetPixelArrayInteger(ImageID: Integer; var Data: {??PSafeArray}OleVariant; 
                                  DstLeft: Integer; DstTop: Integer; Width: Integer; Height: Integer): GdPictureStatus; dispid 658;
    procedure SetRawImageLoadingOptions(Options: RAWImageLoadingOptions); dispid 659;
    procedure SetROI(Left: Integer; Top: Integer; Width: Integer; Height: Integer); dispid 660;
    function SetSaturation(ImageID: Integer; Saturation: Integer): GdPictureStatus; dispid 661;
    function SetTransparency(ImageID: Integer; TransparencyValue: Integer): GdPictureStatus; dispid 662;
    function SetTransparencyColor(ImageID: Integer; TransparentColor: Integer): GdPictureStatus; dispid 1016;
    function SetTransparencyColor_2(ImageID: Integer; TransparentColor: Integer; Threshold: Single): GdPictureStatus; dispid 1017;
    function SetVerticalResolution(ImageID: Integer; VerticalResolution: Single): GdPictureStatus; dispid 663;
    function SwapColor(ImageID: Integer; ColorSrc: Integer; ColorDst: Integer; Threshold: Single): GdPictureStatus; dispid 664;
    function SwapColorsRGBtoBGR(ImageID: Integer): GdPictureStatus; dispid 665;
    function SwapColorsRGBtoBRG(ImageID: Integer): GdPictureStatus; dispid 666;
    function SwapColorsRGBtoGBR(ImageID: Integer): GdPictureStatus; dispid 667;
    function SwapColorsRGBtoGRB(ImageID: Integer): GdPictureStatus; dispid 668;
    function SwapColorsRGBtoRBG(ImageID: Integer): GdPictureStatus; dispid 669;
    function TagCount(ImageID: Integer): Integer; dispid 670;
    function TagDelete(ImageID: Integer; TagNo: Integer): GdPictureStatus; dispid 671;
    function TagDeleteAll(ImageID: Integer): GdPictureStatus; dispid 672;
    function TagGetExifRotation(ImageID: Integer): GdPictureRotateFlipType; dispid 673;
    function TagGetID(ImageID: Integer; TagNo: Integer): Tags; dispid 674;
    function TagGetLength(ImageID: Integer; TagNo: Integer): Integer; dispid 675;
    function TagGetName(ImageID: Integer; TagNo: Integer): WideString; dispid 676;
    function TagGetType(ImageID: Integer; TagNo: Integer): TagType; dispid 677;
    function TagGetValueBytes(ImageID: Integer; TagNo: Integer; var Data: {??PSafeArray}OleVariant): Integer; dispid 678;
    function TagGetValueString(ImageID: Integer; TagNo: Integer): WideString; dispid 679;
    function TagGetValueToHandle(ImageID: Integer; TagNo: Integer; HDest: Integer): GdPictureStatus; dispid 680;
    function TagGetXMLPacket(ImageID: Integer): WideString; dispid 681;
    function TagSetValueBytes(ImageID: Integer; TagID: Tags; TagType: TagType; 
                              var Data: {??PSafeArray}OleVariant): GdPictureStatus; dispid 682;
    function TagSetValueHandle(ImageID: Integer; TagID: Tags; TagType: TagType; HData: Integer; 
                               Len: Integer): GdPictureStatus; dispid 683;
    function TagSetValueString(ImageID: Integer; TagID: Tags; TagType: TagType; 
                               const TagData: WideString): GdPictureStatus; dispid 684;
    function TagSetXMLPacket(ImageID: Integer; const XMLPacket: WideString): GdPictureStatus; dispid 685;
    procedure TagsSetPreserve(Preserve: WordBool); dispid 686;
    function TiffAddToMultiPageFile(TiffImageID: Integer; ImageID: Integer): GdPictureStatus; dispid 687;
    function TiffAddToMultiPageFile_2(TiffImageID: Integer; ImageID: Integer; 
                                      Compression: TiffCompression): GdPictureStatus; dispid 688;
    function TiffAddToMultiPageFile_3(TiffImageID: Integer; ImageID: Integer; 
                                      Compression: TiffCompression; JpegQuality: Integer): GdPictureStatus; dispid 689;
    function TiffAppendPageFromFile(EditableTiffID: Integer; const FilePath: WideString): GdPictureStatus; dispid 690;
    function TiffAppendPageFromGdPictureImage(ImageID: Integer; ImageToAddID: Integer): GdPictureStatus; dispid 691;
    function TiffCloseMultiPageFile(TiffImageID: Integer): GdPictureStatus; dispid 692;
    function TiffCreateMultiPageFromFile(const FilePath: WideString): Integer; dispid 693;
    function TiffCreateMultiPageFromFile_2(const FilePath: WideString; LoadInMemory: WordBool): Integer; dispid 694;
    function TiffCreateMultiPageFromGdPictureImage(ImageID: Integer): Integer; dispid 695;
    function TiffDeletePage(EditableTiffID: Integer; Page: Integer): GdPictureStatus; dispid 696;
    function TiffExtractPage(ImageID: Integer; Page: Integer; const FilePath: WideString): GdPictureStatus; dispid 697;
    function TiffExtractPage_2(ImageID: Integer; Page: Integer; const FilePath: WideString; 
                               Compression: TiffCompression): GdPictureStatus; dispid 1022;
    function TiffGetCurrentPage(ImageID: Integer): Integer; dispid 698;
    function TiffGetPageCount(ImageID: Integer): Integer; dispid 699;
    function TiffInsertPageFromFile(EditableTiffID: Integer; Position: Integer; 
                                    const FilePath: WideString): GdPictureStatus; dispid 700;
    function TiffInsertPageFromGdPictureImage(EditableTiffID: Integer; Position: Integer; 
                                              ImageToAddID: Integer): GdPictureStatus; dispid 701;
    function TiffIsEditableMultiPage(ImageID: Integer): WordBool; dispid 702;
    function TiffIsMultiPage(ImageID: Integer): WordBool; dispid 703;
    function TiffMerge2Files(const FilePath1: WideString; const FilePath2: WideString; 
                             const FileDest: WideString; Compression: TiffCompression): GdPictureStatus; dispid 704;
    function TiffMergeFileList(const FilesList: WideString; const FileDest: WideString; 
                               Compression: TiffCompression): GdPictureStatus; dispid 705;
    function TiffMergeFiles(var FilePath: {??PSafeArray}OleVariant; const FileDest: WideString; 
                            Compression: TiffCompression): GdPictureStatus; dispid 706;
    function TiffMovePage(ImageID: Integer; PageNo: Integer; Destination: Integer): GdPictureStatus; dispid 707;
    procedure TiffOpenMultiPageForWrite(WriteAccess: WordBool); dispid 708;
    function TiffSaveAsMultiPageFile(ImageID: Integer; const FilePath: WideString; 
                                     Compression: TiffCompression): GdPictureStatus; dispid 709;
    function TiffSaveAsMultiPageFile_2(ImageID: Integer; const FilePath: WideString; 
                                       Compression: TiffCompression; JpegQuality: Integer): GdPictureStatus; dispid 710;
    function TiffSaveMultiPageToFile(ImageID: Integer; const FilePath: WideString; 
                                     Compression: TiffCompression): GdPictureStatus; dispid 711;
    function TiffSaveMultiPageToFile_2(ImageID: Integer; const FilePath: WideString; 
                                       Compression: TiffCompression; JpegQuality: Integer): GdPictureStatus; dispid 712;
    function TiffSelectPage(ImageID: Integer; Page: Integer): GdPictureStatus; dispid 713;
    function TiffSwapPages(ImageID: Integer; Page1: Integer; Page2: Integer): GdPictureStatus; dispid 714;
    function TransformJPEG(const InputFile: WideString; const OutputFile: WideString; 
                           Transformation: JPEGTransformation): GdPictureStatus; dispid 715;
    function TwainAcquireToFile(const FilePath: WideString; HANDLE: Integer): GdPictureStatus; dispid 716;
    function TwainAcquireToGdPictureImage(HANDLE: Integer): Integer; dispid 717;
    function TwainAcquireToMemoryFile(const FilePath: WideString; HANDLE: Integer): GdPictureStatus; dispid 718;
    function TwainAcquireToDibI(HANDLE: Integer): Integer; dispid 993;
    function TwainBarCodeGetConfidence(BarcodeNo: Integer): Integer; dispid 719;
    function TwainBarCodeGetCount: Integer; dispid 720;
    function TwainBarCodeGetRotation(BarcodeNo: Integer): TwainBarCodeRotation; dispid 721;
    function TwainBarCodeGetType(BarcodeNo: Integer): TwainBarCodeType; dispid 722;
    function TwainBarCodeGetValue(BarcodeNo: Integer): WideString; dispid 723;
    function TwainBarCodeGetXPos(BarcodeNo: Integer): Integer; dispid 724;
    function TwainBarCodeGetYPos(BarcodeNo: Integer): Integer; dispid 725;
    function TwainCloseSource: WordBool; dispid 726;
    function TwainCloseSourceManager(HANDLE: Integer): WordBool; dispid 727;
    function TwainDisableSource: WordBool; dispid 728;
    function TwainEnableDuplex(Duplex: WordBool): WordBool; dispid 729;
    function TwainEnableImprinter(Enabled: WordBool): WordBool; dispid 730;
    procedure TwainEnableMemoryTransferMode(Enabled: WordBool); dispid 731;
    function TwainEndAllXfers: WordBool; dispid 732;
    function TwainEndXfer: WordBool; dispid 733;
    function TwainGetAvailableBarCodeTypeCount: Integer; dispid 734;
    function TwainGetAvailableBarCodeTypeNo(Number: Integer): TwainBarCodeType; dispid 735;
    function TwainGetAvailableBitDepthCount: Integer; dispid 736;
    function TwainGetAvailableBitDepthNo(Number: Integer): Integer; dispid 737;
    function TwainGetAvailableBrightnessCount: Integer; dispid 738;
    function TwainGetAvailableBrightnessNo(Number: Integer): Double; dispid 739;
    function TwainGetAvailableCapValueNoNumeric(Cap: TwainCapabilities; Number: Integer): Double; dispid 740;
    function TwainGetAvailableCapValueNoString(Cap: TwainCapabilities; Number: Integer): WideString; dispid 741;
    function TwainGetAvailableCapValuesCount(Cap: TwainCapabilities): Integer; dispid 742;
    function TwainGetAvailableCompressionCount: Integer; dispid 743;
    function TwainGetAvailableCompressionNo(Number: Integer): TwainCompression; dispid 744;
    function TwainGetAvailableContrastCount: Integer; dispid 745;
    function TwainGetAvailableContrastNo(Number: Integer): Double; dispid 746;
    function TwainGetAvailableImageFileFormatCount: Integer; dispid 747;
    function TwainGetAvailableImageFileFormatNo(Number: Integer): TwainImageFileFormats; dispid 748;
    function TwainGetAvailableImprinterModeCount: Integer; dispid 749;
    function TwainGetAvailableImprinterModeNo(Number: Integer): TwainPrinterMode; dispid 750;
    function TwainGetAvailablePaperSizeCount: Integer; dispid 751;
    function TwainGetAvailablePaperSizeNo(Number: Integer): TwainPaperSize; dispid 752;
    function TwainGetAvailablePixelTypeCount: Integer; dispid 753;
    function TwainGetAvailablePixelTypeNo(Number: Integer): TwainPixelType; dispid 754;
    function TwainGetAvailableXResolutionCount: Integer; dispid 755;
    function TwainGetAvailableXResolutionNo(No: Integer): Integer; dispid 756;
    function TwainGetAvailableYResolutionCount: Integer; dispid 757;
    function TwainGetAvailableYResolutionNo(No: Integer): Integer; dispid 758;
    function TwainGetBitDepth: Integer; dispid 759;
    function TwainGetBitDepthReduction: TwainBitDepthReduction; dispid 760;
    function TwainGetBrightness: Integer; dispid 761;
    function TwainGetCapCurrentNumeric(Cap: TwainCapabilities; var CurrentValue: Double): WordBool; dispid 762;
    function TwainGetCapCurrentString(Cap: TwainCapabilities; var CurrentValue: WideString): WordBool; dispid 763;
    function TwainGetCapDefaultNumeric(Cap: TwainCapabilities; var CurrentValue: Double): WordBool; dispid 764;
    function TwainGetCapDefaultString(Cap: TwainCapabilities; var CurrentValue: WideString): WordBool; dispid 765;
    function TwainGetCapItemType(Cap: TwainCapabilities): TwainItemTypes; dispid 766;
    function TwainGetCapQuerySupport(Cap: TwainCapabilities; var SupportGet: WordBool; 
                                     var SupportSet: WordBool; var SupportGetDefault: WordBool; 
                                     var SupportGetCurrent: WordBool; var SupportReset: WordBool): WordBool; dispid 767;
    function TwainGetCapRangeNumeric(Cap: TwainCapabilities; var nMinValue: Double; 
                                     var nMaxValue: Double; var nStepValue: Double): WordBool; dispid 768;
    function TwainGetCompression: TwainCompression; dispid 769;
    function TwainGetContrast: Integer; dispid 770;
    function TwainGetCurrentSourceName(HANDLE: Integer): WideString; dispid 771;
    function TwainGetDefaultSourceName(HANDLE: Integer): WideString; dispid 772;
    function TwainGetDuplexMode: Integer; dispid 773;
    function TwainGetEndorserNumber: Integer; dispid 774;
    function TwainGetGamma: Double; dispid 775;
    function TwainGetHideUI: WordBool; dispid 776;
    function TwainGetImageFileFormat: TwainImageFileFormats; dispid 777;
    function TwainGetImageLayout(var Left: Double; var Top: Double; var Right: Double; 
                                 var Bottom: Double): WordBool; dispid 778;
    function TwainGetImprinterIndex: Integer; dispid 779;
    function TwainGetImprinterMode: TwainPrinterMode; dispid 780;
    function TwainGetImprinterString: WideString; dispid 781;
    function TwainGetImprinterSuffix: WideString; dispid 782;
    function TwainGetLastConditionCode: TwainConditionCode; dispid 783;
    function TwainGetLastEndorsedString: WideString; dispid 784;
    function TwainGetLastPageSide: TwainPageSide; dispid 785;
    function TwainGetLastPrintedString: WideString; dispid 786;
    function TwainGetLastResultCode: TwainResultCode; dispid 787;
    function TwainGetModalUI: WordBool; dispid 788;
    function TwainGetNoiseFilter: TwainNoiseFilterMode; dispid 789;
    function TwainGetOrientation: TwainOrientation; dispid 790;
    function TwainGetPaperSize: TwainPaperSize; dispid 791;
    function TwainGetPendingXfersCount: Integer; dispid 792;
    function TwainGetPhysicalHeight: Double; dispid 793;
    function TwainGetPhysicalWidth: Double; dispid 794;
    function TwainGetPixelFlavor: TwainPixelFlavor; dispid 795;
    function TwainGetPixelType: TwainPixelType; dispid 796;
    function TwainGetPlanarChunky: Integer; dispid 797;
    function TwainGetResolution: Integer; dispid 798;
    function TwainGetRotation: Double; dispid 799;
    function TwainGetSourceCount(HANDLE: Integer): Integer; dispid 800;
    function TwainGetSourceFamily(HANDLE: Integer; SourceNo: Integer): WideString; dispid 801;
    function TwainGetSourceManufacturer(HANDLE: Integer; SourceNo: Integer): WideString; dispid 802;
    function TwainGetSourceName(HANDLE: Integer; SourceNo: Integer): WideString; dispid 803;
    function TwainGetSourceVersionInfo(HANDLE: Integer; SourceNo: Integer; var MajorNum: Integer; 
                                       var MinorNum: Integer; var Language: TwainLanguage; 
                                       var Country: TwainCountry; var Info: WideString): GdPictureStatus; dispid 804;
    function TwainGetState: TwainStatus; dispid 805;
    function TwainGetThreshold: Integer; dispid 806;
    function TwainGetXScaling: Double; dispid 807;
    function TwainGetYScaling: Double; dispid 808;
    function TwainHasCameraPreviewUI: WordBool; dispid 809;
    function TwainHasFeeder: WordBool; dispid 810;
    function TwainHasFlatBed: WordBool; dispid 811;
    function TwainIsAutoBrightnessAvailable: WordBool; dispid 812;
    function TwainIsAutoBrightnessEnabled: WordBool; dispid 813;
    function TwainIsAutoFeedAvailable: WordBool; dispid 814;
    function TwainIsAutoFeedEnabled: WordBool; dispid 815;
    function TwainIsAutomaticBorderDetectionAvailable: WordBool; dispid 816;
    function TwainIsAutomaticBorderDetectionEnabled: WordBool; dispid 817;
    function TwainIsAutomaticColorAvailable: WordBool; dispid 818;
    function TwainIsAutomaticColorEnabled: WordBool; dispid 819;
    function TwainIsAutomaticDeskewAvailable: WordBool; dispid 820;
    function TwainIsAutomaticDeskewEnabled: WordBool; dispid 821;
    function TwainIsAutomaticDiscardBlankPagesAvailable: WordBool; dispid 822;
    function TwainIsAutomaticDiscardBlankPagesEnabled: WordBool; dispid 823;
    function TwainIsAutomaticRotationAvailable: WordBool; dispid 824;
    function TwainIsAutomaticRotationEnabled: WordBool; dispid 825;
    function TwainIsAutoScanAvailable: WordBool; dispid 826;
    function TwainIsAutoScanEnabled: WordBool; dispid 827;
    function TwainIsAutoSizeAvailable: WordBool; dispid 828;
    function TwainIsAutoSizeEnabled: WordBool; dispid 829;
    function TwainIsAvailable: WordBool; dispid 830;
    function TwainIsBarcodeDetectionAvailable: WordBool; dispid 831;
    function TwainIsBarcodeDetectionEnabled: WordBool; dispid 832;
    function TwainIsDeviceOnline: WordBool; dispid 833;
    function TwainIsDuplexEnabled: WordBool; dispid 834;
    function TwainIsEndorserAvailable: WordBool; dispid 835;
    function TwainIsFeederLoaded: WordBool; dispid 836;
    function TwainIsFeederSelected: WordBool; dispid 837;
    function TwainIsFileTransferModeAvailable: WordBool; dispid 838;
    function TwainIsGammaAvailable: WordBool; dispid 839;
    function TwainIsImprinterAvailable: WordBool; dispid 840;
    function TwainIsImprinterEnabled: WordBool; dispid 841;
    function TwainIsMemoryTransferModeAvailable: WordBool; dispid 842;
    function TwainIsNoiseFilterAvailable: WordBool; dispid 843;
    function TwainIsOrientationAvailable: WordBool; dispid 844;
    function TwainIsPixelTypeAvailable(PixelType: TwainPixelType): WordBool; dispid 845;
    function TwainIsRotationAvailable: WordBool; dispid 846;
    function TwainIsSetupDialogSourceAvailable: WordBool; dispid 847;
    function TwainIsXScalingAvailable: WordBool; dispid 848;
    function TwainIsYScalingAvailable: WordBool; dispid 849;
    function TwainLastXferFail: WordBool; dispid 850;
    function TwainLoadConfiguration(const FilePath: WideString): WordBool; dispid 851;
    function TwainLoadConfiguration_2(var Data: {??PSafeArray}OleVariant): WordBool; dispid 852;
    function TwainLogStart(const LogPath: WideString): WordBool; dispid 853;
    procedure TwainLogStop; dispid 854;
    function TwainOpenDefaultSource(HANDLE: Integer): WordBool; dispid 855;
    function TwainOpenSource(HANDLE: Integer; const SourceName: WideString): WordBool; dispid 856;
    function TwainResetCap(Cap: TwainCapabilities): WordBool; dispid 857;
    function TwainResetImageLayout: WordBool; dispid 858;
    function TwainSaveConfiguration(const FilePath: WideString): WordBool; dispid 859;
    function TwainSaveConfiguration_2(var Data: {??PSafeArray}OleVariant): WordBool; dispid 860;
    function TwainSelectFeeder(SelectFeeder: WordBool): WordBool; dispid 861;
    function TwainSelectSource(HANDLE: Integer): WordBool; dispid 862;
    procedure TwainSetApplicationInfo(MajorNumVersion: Integer; MinorNumVersion: Integer; 
                                      LanguageID: TwainLanguage; CountryID: TwainCountry; 
                                      const VersionInfo: WideString; const CompanyName: WideString; 
                                      const ProductFamily: WideString; const ProductName: WideString); dispid 863;
    function TwainSetAutoBrightness(AutoBrightness: WordBool): WordBool; dispid 864;
    function TwainSetAutoFeed(AutoFeed: WordBool): WordBool; dispid 865;
    function TwainSetAutomaticBorderDetection(AutoBorderDetect: WordBool): WordBool; dispid 866;
    function TwainSetAutomaticColor(AutomaticColor: WordBool): WordBool; dispid 867;
    function TwainSetAutomaticDeskew(AutoDeskew: WordBool): WordBool; dispid 868;
    function TwainSetAutomaticDiscardBlankPages(AutoDiscard: WordBool): WordBool; dispid 869;
    function TwainSetAutomaticRotation(AutoRotate: WordBool): WordBool; dispid 870;
    function TwainSetAutoScan(AutoScan: WordBool): WordBool; dispid 871;
    function TwainSetAutoSize(AutoSize: WordBool): WordBool; dispid 872;
    procedure TwainSetAutoSourceClose(AutoSourceClose: WordBool); dispid 873;
    procedure TwainSetKeepSourceEnabled(KeepSourceEnabled: WordBool); dispid 981;
    function TwainSetBarcodeDetection(bBarcodeDetection: WordBool): WordBool; dispid 874;
    function TwainSetBitDepth(BitDepth: Integer): WordBool; dispid 875;
    function TwainSetBitDepthReduction(BitDepthReduction: TwainBitDepthReduction): WordBool; dispid 876;
    function TwainSetBrightness(Brightness: Integer): WordBool; dispid 877;
    function TwainSetCapCurrentNumeric(Cap: TwainCapabilities; ItemType: TwainItemTypes; 
                                       NewValue: Double): WordBool; dispid 878;
    function TwainSetCapCurrentString(Cap: TwainCapabilities; ItemType: TwainItemTypes; 
                                      const NewValue: WideString): WordBool; dispid 879;
    function TwainSetCompression(Compression: TwainCompression): WordBool; dispid 880;
    function TwainSetContrast(Contrast: Integer): WordBool; dispid 881;
    procedure TwainSetDebugMode(DebugMode: WordBool); dispid 882;
    procedure TwainSetDSMPath(const DSMPath: WideString); dispid 883;
    function TwainSetEndorserNumber(Number: Integer): WordBool; dispid 884;
    procedure TwainSetErrorMessage(ShowErrors: WordBool); dispid 885;
    function TwainSetGamma(Gamma: Double): WordBool; dispid 886;
    procedure TwainSetHideUI(Hide: WordBool); dispid 887;
    function TwainSetImageFileFormat(ImageFileFormat: TwainImageFileFormats): WordBool; dispid 888;
    function TwainSetImageLayout(Left: Double; Top: Double; Right: Double; Bottom: Double): WordBool; dispid 889;
    function TwainSetImprinterIndex(Index: Integer): WordBool; dispid 890;
    function TwainSetImprinterMode(PrinterMode: TwainPrinterMode): WordBool; dispid 891;
    function TwainSetImprinterString(const PrinterString: WideString): WordBool; dispid 892;
    function TwainSetImprinterSuffix(const Suffix: WideString): WordBool; dispid 893;
    function TwainSetIndicators(ShowIndicator: WordBool): WordBool; dispid 894;
    procedure TwainSetInternalBehaviour(OptionID: Integer; Enable: WordBool); dispid 895;
    procedure TwainSetModalUI(ModalUI: WordBool); dispid 896;
    procedure TwainSetMultiTransfer(MultiTransfer: WordBool); dispid 897;
    function TwainSetNoiseFilter(NoiseFilter: TwainNoiseFilterMode): WordBool; dispid 898;
    function TwainSetOrientation(Orientation: TwainOrientation): WordBool; dispid 899;
    function TwainSetPaperSize(Size: TwainPaperSize): WordBool; dispid 900;
    function TwainSetPixelFlavor(PixelFlavor: TwainPixelFlavor): WordBool; dispid 901;
    function TwainSetPixelType(PixelType: TwainPixelType): WordBool; dispid 902;
    function TwainSetPlanarChunky(PlanarChunky: Integer): WordBool; dispid 903;
    function TwainSetResolution(Resolution: Integer): WordBool; dispid 904;
    function TwainSetRotation(Rotation: Integer): WordBool; dispid 905;
    function TwainSetThreshold(Threshold: Integer): WordBool; dispid 906;
    function TwainSetXferCount(Xfers: Integer): WordBool; dispid 907;
    function TwainSetXScaling(XScaling: Double): WordBool; dispid 908;
    function TwainSetYScaling(YScaling: Double): WordBool; dispid 909;
    function TwainShowSetupDialogSource(HANDLE: Integer): WordBool; dispid 910;
    function TwainStopFeeder: WordBool; dispid 911;
    function TwainUnloadSourceManager(HANDLE: Integer): WordBool; dispid 912;
    function TwainUserClosedSource: WordBool; dispid 913;
    function UploadFileToFTP(const FilePath: WideString; const Host: WideString; 
                             const Path: WideString; const Login: WideString; 
                             const Password: WideString; FTPPort: Integer): GdPictureStatus; dispid 914;
    function WiaAcquireToFile(const FilePath: WideString; ImageFormat: WiaImageFormat; ICM: WordBool): GdPictureStatus; dispid 915;
    function WiaAcquireToFile_2(const FilePath: WideString): GdPictureStatus; dispid 916;
    function WiaAcquireToGdPictureImage: Integer; dispid 917;
    function WiaAcquireWizard: GdPictureStatus; dispid 918;
    procedure WiaCloseSource; dispid 919;
    function WiaEnableDuplex(Enable: WordBool): WordBool; dispid 920;
    function WiaGetAvailableBrightnessCount: Integer; dispid 921;
    function WiaGetAvailableBrightnessNo(BrightnessNo: Integer): Double; dispid 922;
    function WiaGetAvailableContrastCount: Integer; dispid 923;
    function WiaGetAvailableContrastNo(ContrastNo: Integer): Double; dispid 924;
    function WiaGetAvailableHorizontalResolutionCount: Integer; dispid 925;
    function WiaGetAvailableHorizontalResolutionNo(ResNo: Integer): Integer; dispid 926;
    function WiaGetAvailableImageIntentCount: Integer; dispid 927;
    function WiaGetAvailableImageIntentNo(IntentNo: Integer): WiaImageIntent; dispid 928;
    function WiaGetAvailableVerticalResolutionCount: Integer; dispid 929;
    function WiaGetAvailableVerticalResolutionNo(ResNo: Integer): Integer; dispid 930;
    function WiaGetBitsPerPixel: Integer; dispid 931;
    function WiaGetBrightness: Double; dispid 932;
    function WiaGetChannelsPerPixel: Integer; dispid 933;
    function WiaGetContrast: Double; dispid 934;
    function WiaGetCurrentSourceID: WideString; dispid 935;
    function WiaGetDevicePropertyInt(PropertyID: Integer; var PropertyValue: Integer): GdPictureStatus; dispid 936;
    function WiaGetHorizontalBedSize: Double; dispid 937;
    function WiaGetHorizontalResolution: Integer; dispid 938;
    function WiaGetHorizontalSheetFeedSize: Double; dispid 939;
    function WiaGetImageCount: Integer; dispid 940;
    function WiaGetImageExtension: WideString; dispid 941;
    function WiaGetImageIntent: WiaImageIntent; dispid 942;
    function WiaGetImageLayout(var Left: Double; var Top: Double; var Width: Double; 
                               var Height: Double): WordBool; dispid 943;
    function WiaGetLastError: WiaStatus; dispid 944;
    function WiaGetPaperSize: WiaPageSize; dispid 945;
    function WiaGetSourceCount: Integer; dispid 946;
    function WiaGetSourceDescription(SourceNo: Integer): WideString; dispid 947;
    function WiaGetSourceDriverVersion(SourceNo: Integer): WideString; dispid 948;
    function WiaGetSourceID(SourceNo: Integer): WideString; dispid 949;
    function WiaGetSourceManufacturer(SourceNo: Integer): WideString; dispid 950;
    function WiaGetSourceName(SourceNo: Integer): WideString; dispid 951;
    function WiaGetSourceServer(SourceNo: Integer): WideString; dispid 952;
    function WiaGetSourceType(SourceNo: Integer): WiaSourceType; dispid 953;
    function WiaGetSourceWIAVersion(SourceNo: Integer): WideString; dispid 954;
    function WiaGetVerticalBedSize: Double; dispid 955;
    function WiaGetVerticalResolution: Integer; dispid 956;
    function WiaGetVerticalSheetFeedSize: Double; dispid 957;
    function WiaHasFeeder: WordBool; dispid 958;
    function WiaHasFlatBed: WordBool; dispid 959;
    function WiaIsDuplexAvailable: WordBool; dispid 960;
    function WiaIsDuplexEnabled: WordBool; dispid 961;
    function WiaIsFeederLoaded: WordBool; dispid 962;
    function WiaIsFeederSelected: WordBool; dispid 963;
    function WiaOpenSource(const SourceID: WideString): WordBool; dispid 964;
    function WiaSelectFeeder(SelectFeeder: WordBool): WordBool; dispid 965;
    function WiaSelectImageIdx(ImageIdx: Integer): GdPictureStatus; dispid 966;
    function WiaSelectSource(SourceType: WiaSourceType): WideString; dispid 967;
    function WiaSetBitsPerPixel(bpp: Integer): WordBool; dispid 968;
    function WiaSetBrightness(Brightness: Double): WordBool; dispid 969;
    function WiaSetChannelsPerPixel(n: Integer): WordBool; dispid 970;
    function WiaSetContrast(Contrast: Double): WordBool; dispid 971;
    function WiaSetDevicePropertyInt(PropertyID: Integer; PropertyValue: Integer): GdPictureStatus; dispid 972;
    function WiaSetHorizontalResolution(Resolution: Integer): WordBool; dispid 973;
    function WiaSetImageIntent(Intent: WiaImageIntent): WordBool; dispid 974;
    function WiaSetImageLayout(Left: Double; Top: Double; Width: Double; Height: Double): WordBool; dispid 975;
    procedure WiaSetIndicators(ShowIndicator: WordBool); dispid 976;
    function WiaSetPaperSize(PageSize: WiaPageSize): WordBool; dispid 977;
    function WiaSetVerticalResolution(Resolution: Integer): WordBool; dispid 978;
    function WiaShowSetupDialogSource: GdPictureStatus; dispid 979;
    function WiaTakePictureToGdPictureImage: Integer; dispid 980;
    function ApplyExifRotation(ImageID: Integer): GdPictureStatus; dispid 992;
  end;

// *********************************************************************//
// Interface: _TwainImagePreviewEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2F578A25-D034-35D4-86DE-F5B986E0AC71}
// *********************************************************************//
  _TwainImagePreviewEventHandler = interface(IDispatch)
    ['{2F578A25-D034-35D4-86DE-F5B986E0AC71}']
  end;

// *********************************************************************//
// DispIntf:  _TwainImagePreviewEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2F578A25-D034-35D4-86DE-F5B986E0AC71}
// *********************************************************************//
  _TwainImagePreviewEventHandlerDisp = dispinterface
    ['{2F578A25-D034-35D4-86DE-F5B986E0AC71}']
  end;

// *********************************************************************//
// Interface: IGdPictureOCR
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AA29CE09-A9EF-4A25-8FCC-30D3264CF319}
// *********************************************************************//
  IGdPictureOCR = interface(IDispatch)
    ['{AA29CE09-A9EF-4A25-8FCC-30D3264CF319}']
    function Get_OCRMode: OCRMode; safecall;
    procedure Set_OCRMode(pRetVal: OCRMode); safecall;
    function Get_MaxThreadCount: Integer; safecall;
    procedure Set_MaxThreadCount(pRetVal: Integer); safecall;
    function Get_OrientationDetectionAccuracyLevel: Single; safecall;
    procedure Set_OrientationDetectionAccuracyLevel(pRetVal: Single); safecall;
    function Get_EnableSkewDetection: WordBool; safecall;
    procedure Set_EnableSkewDetection(pRetVal: WordBool); safecall;
    function Get_EnableOrientationDetection: WordBool; safecall;
    procedure Set_EnableOrientationDetection(pRetVal: WordBool); safecall;
    function Get_EnablePreprocessing: WordBool; safecall;
    procedure Set_EnablePreprocessing(pRetVal: WordBool); safecall;
    function Get_Context: OCRContext; safecall;
    procedure Set_Context(pRetVal: OCRContext); safecall;
    function Get_LanguageModelPenaltyNonDictWords: Double; safecall;
    procedure Set_LanguageModelPenaltyNonDictWords(pRetVal: Double); safecall;
    function Get_EnableVigorousDespeckle: WordBool; safecall;
    procedure Set_EnableVigorousDespeckle(pRetVal: WordBool); safecall;
    function Get_LoadMainDictionary: WordBool; safecall;
    procedure Set_LoadMainDictionary(pRetVal: WordBool); safecall;
    function Get_LoadFreqWordsDictionary: WordBool; safecall;
    procedure Set_LoadFreqWordsDictionary(pRetVal: WordBool); safecall;
    function Get_MinCharHeight: Integer; safecall;
    procedure Set_MinCharHeight(pRetVal: Integer); safecall;
    function Get_MaxCharHeight: Integer; safecall;
    procedure Set_MaxCharHeight(pRetVal: Integer); safecall;
    function Get_MinCharWidth: Integer; safecall;
    procedure Set_MinCharWidth(pRetVal: Integer); safecall;
    function Get_MaxCharWidth: Integer; safecall;
    procedure Set_MaxCharWidth(pRetVal: Integer); safecall;
    function Get_Timeout: Integer; safecall;
    procedure Set_Timeout(pRetVal: Integer); safecall;
    function Get_ResourceFolder: WideString; safecall;
    procedure Set_ResourceFolder(const pRetVal: WideString); safecall;
    function Get_LanguageModelPenaltyNonFreqDictWords: Double; safecall;
    procedure Set_LanguageModelPenaltyNonFreqDictWords(pRetVal: Double); safecall;
    function Get_CharacterSet: WideString; safecall;
    procedure Set_CharacterSet(const pRetVal: WideString); safecall;
    function Get_CharacterBlackList: WideString; safecall;
    procedure Set_CharacterBlackList(const pRetVal: WideString); safecall;
    function AddCustomDictionary(const CustomDictionary: WideString): GdPictureStatus; safecall;
    function AddLanguage(Language: OCRLanguage): GdPictureStatus; safecall;
    procedure Dispose; safecall;
    function GetAvailableLanguage(LanguageIdx: Integer): OCRLanguage; safecall;
    function GetAvailableLanguageCount: Integer; safecall;
    function GetAverageWordConfidence(const OCRResultID: WideString): Integer; safecall;
    function GetBlockBottom(const OCRResultID: WideString; BlockIdx: Integer): Integer; safecall;
    function GetBlockCount(const OCRResultID: WideString): Integer; safecall;
    function GetBlockFirstParagraphIndex(const OCRResultID: WideString; BlockIdx: Integer): Integer; safecall;
    function GetBlockLeft(const OCRResultID: WideString; BlockIdx: Integer): Integer; safecall;
    function GetBlockParagraphCount(const OCRResultID: WideString; BlockIdx: Integer): Integer; safecall;
    function GetBlockRight(const OCRResultID: WideString; BlockIdx: Integer): Integer; safecall;
    function GetBlockTop(const OCRResultID: WideString; BlockIdx: Integer): Integer; safecall;
    function GetBlockType(const OCRResultID: WideString; BlockIdx: Integer): OCRBlockType; safecall;
    function GetBlockWritingDirection(const OCRResultID: WideString; BlockIdx: Integer): OCRWritingDirection; safecall;
    function GetCharacterBottom(const OCRResultID: WideString; CharacterIdx: Integer): Integer; safecall;
    function GetCharacterConfidence(const OCRResultID: WideString; CharacterIdx: Integer): Single; safecall;
    function GetCharacterCount(const OCRResultID: WideString): Integer; safecall;
    function GetCharacterLeft(const OCRResultID: WideString; CharacterIdx: Integer): Integer; safecall;
    function GetCharacterRight(const OCRResultID: WideString; CharacterIdx: Integer): Integer; safecall;
    function GetCharacterTop(const OCRResultID: WideString; CharacterIdx: Integer): Integer; safecall;
    function GetCharacterValue(const OCRResultID: WideString; CharacterIdx: Integer): WideString; safecall;
    function GetCharacterWordIndex(const OCRResultID: WideString; CharacterIdx: Integer): Integer; safecall;
    function GetCharacterAlternativeConfidence(const OCRResultID: WideString; 
                                               CharacterIdx: Integer; AlternativeIdx: Integer): Single; safecall;
    function GetCharacterAlternativeValue(const OCRResultID: WideString; CharacterIdx: Integer; 
                                          AlternativeIdx: Integer): WideString; safecall;
    function GetCharacterAlternativeCount(const OCRResultID: WideString; CharacterIdx: Integer): Integer; safecall;
    function GetOCRResultText(const OCRResultID: WideString): WideString; safecall;
    function GetOCRResultText_2(const OCRResultID: WideString; EnableTextFormatting: WordBool): WideString; safecall;
    function GetOrientation: Integer; safecall;
    function GetParagraphBlockIndex(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; safecall;
    function GetParagraphBottom(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; safecall;
    function GetParagraphCount(const OCRResultID: WideString): Integer; safecall;
    function GetParagraphFirstTextLineIndex(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; safecall;
    function GetParagraphJustification(const OCRResultID: WideString; ParagraphIdx: Integer): OCRParagraphJustification; safecall;
    function GetParagraphLeft(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; safecall;
    function GetParagraphRight(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; safecall;
    function GetParagraphTextLineCount(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; safecall;
    function GetParagraphTop(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; safecall;
    function GetStat: GdPictureStatus; safecall;
    function GetTextLineBottom(const OCRResultID: WideString; TextLineIdx: Integer): Integer; safecall;
    function GetTextLineCount(const OCRResultID: WideString): Integer; safecall;
    function GetTextLineFirstWordIndex(const OCRResultID: WideString; TextLineIdx: Integer): Integer; safecall;
    function GetTextLineLeft(const OCRResultID: WideString; TextLineIdx: Integer): Integer; safecall;
    function GetTextLineParagraphIndex(const OCRResultID: WideString; TextLineIdx: Integer): Integer; safecall;
    function GetTextLineRight(const OCRResultID: WideString; TextLineIdx: Integer): Integer; safecall;
    function GetTextLineTop(const OCRResultID: WideString; TextLineIdx: Integer): Integer; safecall;
    function GetTextLineValue(const OCRResultID: WideString; TextLineIdx: Integer): WideString; safecall;
    function GetTextLineWordCount(const OCRResultID: WideString; TextLineIdx: Integer): Integer; safecall;
    function GetWordBottom(const OCRResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordCharacterCount(const OCRResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordCount(const OCRResultID: WideString): Integer; safecall;
    function GetWordFirstCharacterIndex(const OCRResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordFontFamilyName(const OCRResultID: WideString; WordIdx: Integer): WideString; safecall;
    function GetWordFontIsMonospaced(const OCRResultID: WideString; WordIdx: Integer): WordBool; safecall;
    function GetWordFontIsSerif(const OCRResultID: WideString; WordIdx: Integer): WordBool; safecall;
    function GetWordFontIsSmallcaps(const OCRResultID: WideString; WordIdx: Integer): WordBool; safecall;
    function GetWordFontSize(const OCRResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordFontStyle(const OCRResultID: WideString; WordIdx: Integer): TrueTypeFontStyle; safecall;
    function GetWordIsFromDictionary(const OCRResultID: WideString; WordIdx: Integer): WordBool; safecall;
    function GetWordLeft(const OCRResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordLineIndex(const OCRResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordRecognitionLanguage(const OCRResultID: WideString; WordIdx: Integer): WideString; safecall;
    function GetWordRight(const OCRResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordSpacesBefore(const OCRResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordTop(const OCRResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordValue(const OCRResultID: WideString; WordIdx: Integer): WideString; safecall;
    function ReleaseOCRResult(const OCRResultID: WideString): GdPictureStatus; safecall;
    function ReleaseOCRResults: GdPictureStatus; safecall;
    function ResetParameters: GdPictureStatus; safecall;
    function ResetROI: GdPictureStatus; safecall;
    function ResetSelectedDictionaries: GdPictureStatus; safecall;
    function RunOCR: WideString; safecall;
    function RunOCR_2(const OCRResultID: WideString): WideString; safecall;
    function RunOCR_3(OCRSpecialContext: OCRSpecialContext): WideString; safecall;
    function SaveAsDOCX(const OCRResultIDs: WideString; const FilePath: WideString; 
                        KeepLineBreaks: WordBool): GdPictureStatus; safecall;
    function SaveAsHTML(const OCRResultIDs: WideString; const FilePath: WideString; 
                        KeepLineBreaks: WordBool): GdPictureStatus; safecall;
    function SaveAsText(const OCRResultIDs: WideString; const FilePath: WideString; 
                        TextFormat: OCROutputTextFormat; KeepLineBreaks: WordBool): GdPictureStatus; safecall;
    function SetImage(ImageID: Integer): GdPictureStatus; safecall;
    function SetROI(Left: Integer; Top: Integer; Width: Integer; Height: Integer): GdPictureStatus; safecall;
    function SetVariable(const Name: WideString; const Value: WideString): GdPictureStatus; safecall;
    function GetWordConfidence(const OCRResultID: WideString; WordIdx: Integer): Single; safecall;
    function GetSerializedResult(const OCRResultID: WideString): WideString; safecall;
    function GetPageRotation(const OCRResultID: WideString): Integer; safecall;
    function GetPageSkewAngle(const OCRResultID: WideString): Single; safecall;
    function GetBlockOrientation(const OCRResultID: WideString; BlockIdx: Integer): OCRBlockOrientation; safecall;
    function GetBlockSpecialFormatData(const OCRResultID: WideString; BlockIdx: Integer): WideString; safecall;
    function GetBlockSpecialFormat(const OCRResultID: WideString; BlockIdx: Integer): OCRBlockSpecialFormat; safecall;
    function GetKeyValuePairCount(const OCRResultID: WideString): Integer; safecall;
    function GetKeyValuePairKeyString(const OCRResultID: WideString; PairIdx: Integer): WideString; safecall;
    function GetKeyValuePairValueString(const OCRResultID: WideString; PairIdx: Integer): WideString; safecall;
    function GetKeyValuePairKeyRect(const OCRResultID: WideString; PairIdx: Integer; 
                                    out Left: Integer; out Top: Integer; out Width: Integer; 
                                    out Height: Integer): GdPictureStatus; safecall;
    function GetKeyValuePairValueRect(const OCRResultID: WideString; PairIdx: Integer; 
                                      out Left: Integer; out Top: Integer; out Width: Integer; 
                                      out Height: Integer): GdPictureStatus; safecall;
    function GetKeyValuePairDataType(const OCRResultID: WideString; PairIdx: Integer): DataType; safecall;
    function GetKeyValuePairConfidence(const OCRResultID: WideString; PairIdx: Integer): Single; safecall;
    function GetKeyValuePairIsStrong(const OCRResultID: WideString; PairIdx: Integer): WordBool; safecall;
    function GetTableRowRect(const OCRResultID: WideString; TableIdx: Integer; RowIdx: Integer; 
                             out Left: Integer; out Top: Integer; out Width: Integer; 
                             out Height: Integer): GdPictureStatus; safecall;
    function GetTableRowCount(const OCRResultID: WideString; TableIdx: Integer): Integer; safecall;
    function GetTableColumnRect(const OCRResultID: WideString; TableIdx: Integer; 
                                ColummIdx: Integer; out Left: Integer; out Top: Integer; 
                                out Width: Integer; out Height: Integer): GdPictureStatus; safecall;
    function GetTableColumnCount(const OCRResultID: WideString; TableIdx: Integer): Integer; safecall;
    function GetTableRect(const OCRResultID: WideString; TableIdx: Integer; out Left: Integer; 
                          out Top: Integer; out Width: Integer; out Height: Integer): GdPictureStatus; safecall;
    function GetTableCount(const OCRResultID: WideString): Integer; safecall;
    function GetTableCellText(const OCRResultID: WideString; TableIdx: Integer; ColummIdx: Integer; 
                              RowIdx: Integer): WideString; safecall;
    function GetTableCellRect(const OCRResultID: WideString; TableIdx: Integer; ColummIdx: Integer; 
                              RowIdx: Integer; out Left: Integer; out Top: Integer; 
                              out Width: Integer; out Height: Integer): GdPictureStatus; safecall;
    property OCRMode: OCRMode read Get_OCRMode write Set_OCRMode;
    property MaxThreadCount: Integer read Get_MaxThreadCount write Set_MaxThreadCount;
    property OrientationDetectionAccuracyLevel: Single read Get_OrientationDetectionAccuracyLevel write Set_OrientationDetectionAccuracyLevel;
    property EnableSkewDetection: WordBool read Get_EnableSkewDetection write Set_EnableSkewDetection;
    property EnableOrientationDetection: WordBool read Get_EnableOrientationDetection write Set_EnableOrientationDetection;
    property EnablePreprocessing: WordBool read Get_EnablePreprocessing write Set_EnablePreprocessing;
    property Context: OCRContext read Get_Context write Set_Context;
    property LanguageModelPenaltyNonDictWords: Double read Get_LanguageModelPenaltyNonDictWords write Set_LanguageModelPenaltyNonDictWords;
    property EnableVigorousDespeckle: WordBool read Get_EnableVigorousDespeckle write Set_EnableVigorousDespeckle;
    property LoadMainDictionary: WordBool read Get_LoadMainDictionary write Set_LoadMainDictionary;
    property LoadFreqWordsDictionary: WordBool read Get_LoadFreqWordsDictionary write Set_LoadFreqWordsDictionary;
    property MinCharHeight: Integer read Get_MinCharHeight write Set_MinCharHeight;
    property MaxCharHeight: Integer read Get_MaxCharHeight write Set_MaxCharHeight;
    property MinCharWidth: Integer read Get_MinCharWidth write Set_MinCharWidth;
    property MaxCharWidth: Integer read Get_MaxCharWidth write Set_MaxCharWidth;
    property Timeout: Integer read Get_Timeout write Set_Timeout;
    property ResourceFolder: WideString read Get_ResourceFolder write Set_ResourceFolder;
    property LanguageModelPenaltyNonFreqDictWords: Double read Get_LanguageModelPenaltyNonFreqDictWords write Set_LanguageModelPenaltyNonFreqDictWords;
    property CharacterSet: WideString read Get_CharacterSet write Set_CharacterSet;
    property CharacterBlackList: WideString read Get_CharacterBlackList write Set_CharacterBlackList;
  end;

// *********************************************************************//
// DispIntf:  IGdPictureOCRDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AA29CE09-A9EF-4A25-8FCC-30D3264CF319}
// *********************************************************************//
  IGdPictureOCRDisp = dispinterface
    ['{AA29CE09-A9EF-4A25-8FCC-30D3264CF319}']
    property OCRMode: OCRMode dispid 1;
    property MaxThreadCount: Integer dispid 109;
    property OrientationDetectionAccuracyLevel: Single dispid 2;
    property EnableSkewDetection: WordBool dispid 3;
    property EnableOrientationDetection: WordBool dispid 4;
    property EnablePreprocessing: WordBool dispid 102;
    property Context: OCRContext dispid 6;
    property LanguageModelPenaltyNonDictWords: Double dispid 7;
    property EnableVigorousDespeckle: WordBool dispid 8;
    property LoadMainDictionary: WordBool dispid 9;
    property LoadFreqWordsDictionary: WordBool dispid 10;
    property MinCharHeight: Integer dispid 11;
    property MaxCharHeight: Integer dispid 12;
    property MinCharWidth: Integer dispid 13;
    property MaxCharWidth: Integer dispid 14;
    property Timeout: Integer dispid 15;
    property ResourceFolder: WideString dispid 16;
    property LanguageModelPenaltyNonFreqDictWords: Double dispid 17;
    property CharacterSet: WideString dispid 18;
    property CharacterBlackList: WideString dispid 19;
    function AddCustomDictionary(const CustomDictionary: WideString): GdPictureStatus; dispid 20;
    function AddLanguage(Language: OCRLanguage): GdPictureStatus; dispid 21;
    procedure Dispose; dispid 23;
    function GetAvailableLanguage(LanguageIdx: Integer): OCRLanguage; dispid 24;
    function GetAvailableLanguageCount: Integer; dispid 25;
    function GetAverageWordConfidence(const OCRResultID: WideString): Integer; dispid 26;
    function GetBlockBottom(const OCRResultID: WideString; BlockIdx: Integer): Integer; dispid 27;
    function GetBlockCount(const OCRResultID: WideString): Integer; dispid 28;
    function GetBlockFirstParagraphIndex(const OCRResultID: WideString; BlockIdx: Integer): Integer; dispid 29;
    function GetBlockLeft(const OCRResultID: WideString; BlockIdx: Integer): Integer; dispid 30;
    function GetBlockParagraphCount(const OCRResultID: WideString; BlockIdx: Integer): Integer; dispid 31;
    function GetBlockRight(const OCRResultID: WideString; BlockIdx: Integer): Integer; dispid 32;
    function GetBlockTop(const OCRResultID: WideString; BlockIdx: Integer): Integer; dispid 33;
    function GetBlockType(const OCRResultID: WideString; BlockIdx: Integer): OCRBlockType; dispid 34;
    function GetBlockWritingDirection(const OCRResultID: WideString; BlockIdx: Integer): OCRWritingDirection; dispid 35;
    function GetCharacterBottom(const OCRResultID: WideString; CharacterIdx: Integer): Integer; dispid 36;
    function GetCharacterConfidence(const OCRResultID: WideString; CharacterIdx: Integer): Single; dispid 37;
    function GetCharacterCount(const OCRResultID: WideString): Integer; dispid 38;
    function GetCharacterLeft(const OCRResultID: WideString; CharacterIdx: Integer): Integer; dispid 39;
    function GetCharacterRight(const OCRResultID: WideString; CharacterIdx: Integer): Integer; dispid 40;
    function GetCharacterTop(const OCRResultID: WideString; CharacterIdx: Integer): Integer; dispid 41;
    function GetCharacterValue(const OCRResultID: WideString; CharacterIdx: Integer): WideString; dispid 42;
    function GetCharacterWordIndex(const OCRResultID: WideString; CharacterIdx: Integer): Integer; dispid 43;
    function GetCharacterAlternativeConfidence(const OCRResultID: WideString; 
                                               CharacterIdx: Integer; AlternativeIdx: Integer): Single; dispid 106;
    function GetCharacterAlternativeValue(const OCRResultID: WideString; CharacterIdx: Integer; 
                                          AlternativeIdx: Integer): WideString; dispid 107;
    function GetCharacterAlternativeCount(const OCRResultID: WideString; CharacterIdx: Integer): Integer; dispid 108;
    function GetOCRResultText(const OCRResultID: WideString): WideString; dispid 44;
    function GetOCRResultText_2(const OCRResultID: WideString; EnableTextFormatting: WordBool): WideString; dispid 103;
    function GetOrientation: Integer; dispid 45;
    function GetParagraphBlockIndex(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; dispid 46;
    function GetParagraphBottom(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; dispid 47;
    function GetParagraphCount(const OCRResultID: WideString): Integer; dispid 48;
    function GetParagraphFirstTextLineIndex(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; dispid 49;
    function GetParagraphJustification(const OCRResultID: WideString; ParagraphIdx: Integer): OCRParagraphJustification; dispid 50;
    function GetParagraphLeft(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; dispid 51;
    function GetParagraphRight(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; dispid 52;
    function GetParagraphTextLineCount(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; dispid 53;
    function GetParagraphTop(const OCRResultID: WideString; ParagraphIdx: Integer): Integer; dispid 54;
    function GetStat: GdPictureStatus; dispid 55;
    function GetTextLineBottom(const OCRResultID: WideString; TextLineIdx: Integer): Integer; dispid 56;
    function GetTextLineCount(const OCRResultID: WideString): Integer; dispid 57;
    function GetTextLineFirstWordIndex(const OCRResultID: WideString; TextLineIdx: Integer): Integer; dispid 58;
    function GetTextLineLeft(const OCRResultID: WideString; TextLineIdx: Integer): Integer; dispid 59;
    function GetTextLineParagraphIndex(const OCRResultID: WideString; TextLineIdx: Integer): Integer; dispid 60;
    function GetTextLineRight(const OCRResultID: WideString; TextLineIdx: Integer): Integer; dispid 61;
    function GetTextLineTop(const OCRResultID: WideString; TextLineIdx: Integer): Integer; dispid 62;
    function GetTextLineValue(const OCRResultID: WideString; TextLineIdx: Integer): WideString; dispid 63;
    function GetTextLineWordCount(const OCRResultID: WideString; TextLineIdx: Integer): Integer; dispid 64;
    function GetWordBottom(const OCRResultID: WideString; WordIdx: Integer): Integer; dispid 65;
    function GetWordCharacterCount(const OCRResultID: WideString; WordIdx: Integer): Integer; dispid 66;
    function GetWordCount(const OCRResultID: WideString): Integer; dispid 67;
    function GetWordFirstCharacterIndex(const OCRResultID: WideString; WordIdx: Integer): Integer; dispid 68;
    function GetWordFontFamilyName(const OCRResultID: WideString; WordIdx: Integer): WideString; dispid 69;
    function GetWordFontIsMonospaced(const OCRResultID: WideString; WordIdx: Integer): WordBool; dispid 70;
    function GetWordFontIsSerif(const OCRResultID: WideString; WordIdx: Integer): WordBool; dispid 71;
    function GetWordFontIsSmallcaps(const OCRResultID: WideString; WordIdx: Integer): WordBool; dispid 72;
    function GetWordFontSize(const OCRResultID: WideString; WordIdx: Integer): Integer; dispid 73;
    function GetWordFontStyle(const OCRResultID: WideString; WordIdx: Integer): TrueTypeFontStyle; dispid 74;
    function GetWordIsFromDictionary(const OCRResultID: WideString; WordIdx: Integer): WordBool; dispid 75;
    function GetWordLeft(const OCRResultID: WideString; WordIdx: Integer): Integer; dispid 76;
    function GetWordLineIndex(const OCRResultID: WideString; WordIdx: Integer): Integer; dispid 77;
    function GetWordRecognitionLanguage(const OCRResultID: WideString; WordIdx: Integer): WideString; dispid 78;
    function GetWordRight(const OCRResultID: WideString; WordIdx: Integer): Integer; dispid 79;
    function GetWordSpacesBefore(const OCRResultID: WideString; WordIdx: Integer): Integer; dispid 80;
    function GetWordTop(const OCRResultID: WideString; WordIdx: Integer): Integer; dispid 81;
    function GetWordValue(const OCRResultID: WideString; WordIdx: Integer): WideString; dispid 82;
    function ReleaseOCRResult(const OCRResultID: WideString): GdPictureStatus; dispid 83;
    function ReleaseOCRResults: GdPictureStatus; dispid 84;
    function ResetParameters: GdPictureStatus; dispid 85;
    function ResetROI: GdPictureStatus; dispid 86;
    function ResetSelectedDictionaries: GdPictureStatus; dispid 87;
    function RunOCR: WideString; dispid 88;
    function RunOCR_2(const OCRResultID: WideString): WideString; dispid 89;
    function RunOCR_3(OCRSpecialContext: OCRSpecialContext): WideString; dispid 101;
    function SaveAsDOCX(const OCRResultIDs: WideString; const FilePath: WideString; 
                        KeepLineBreaks: WordBool): GdPictureStatus; dispid 90;
    function SaveAsHTML(const OCRResultIDs: WideString; const FilePath: WideString; 
                        KeepLineBreaks: WordBool): GdPictureStatus; dispid 91;
    function SaveAsText(const OCRResultIDs: WideString; const FilePath: WideString; 
                        TextFormat: OCROutputTextFormat; KeepLineBreaks: WordBool): GdPictureStatus; dispid 92;
    function SetImage(ImageID: Integer): GdPictureStatus; dispid 93;
    function SetROI(Left: Integer; Top: Integer; Width: Integer; Height: Integer): GdPictureStatus; dispid 94;
    function SetVariable(const Name: WideString; const Value: WideString): GdPictureStatus; dispid 95;
    function GetWordConfidence(const OCRResultID: WideString; WordIdx: Integer): Single; dispid 96;
    function GetSerializedResult(const OCRResultID: WideString): WideString; dispid 97;
    function GetPageRotation(const OCRResultID: WideString): Integer; dispid 98;
    function GetPageSkewAngle(const OCRResultID: WideString): Single; dispid 99;
    function GetBlockOrientation(const OCRResultID: WideString; BlockIdx: Integer): OCRBlockOrientation; dispid 100;
    function GetBlockSpecialFormatData(const OCRResultID: WideString; BlockIdx: Integer): WideString; dispid 104;
    function GetBlockSpecialFormat(const OCRResultID: WideString; BlockIdx: Integer): OCRBlockSpecialFormat; dispid 105;
    function GetKeyValuePairCount(const OCRResultID: WideString): Integer; dispid 110;
    function GetKeyValuePairKeyString(const OCRResultID: WideString; PairIdx: Integer): WideString; dispid 111;
    function GetKeyValuePairValueString(const OCRResultID: WideString; PairIdx: Integer): WideString; dispid 112;
    function GetKeyValuePairKeyRect(const OCRResultID: WideString; PairIdx: Integer; 
                                    out Left: Integer; out Top: Integer; out Width: Integer; 
                                    out Height: Integer): GdPictureStatus; dispid 113;
    function GetKeyValuePairValueRect(const OCRResultID: WideString; PairIdx: Integer; 
                                      out Left: Integer; out Top: Integer; out Width: Integer; 
                                      out Height: Integer): GdPictureStatus; dispid 114;
    function GetKeyValuePairDataType(const OCRResultID: WideString; PairIdx: Integer): DataType; dispid 115;
    function GetKeyValuePairConfidence(const OCRResultID: WideString; PairIdx: Integer): Single; dispid 116;
    function GetKeyValuePairIsStrong(const OCRResultID: WideString; PairIdx: Integer): WordBool; dispid 117;
    function GetTableRowRect(const OCRResultID: WideString; TableIdx: Integer; RowIdx: Integer; 
                             out Left: Integer; out Top: Integer; out Width: Integer; 
                             out Height: Integer): GdPictureStatus; dispid 118;
    function GetTableRowCount(const OCRResultID: WideString; TableIdx: Integer): Integer; dispid 119;
    function GetTableColumnRect(const OCRResultID: WideString; TableIdx: Integer; 
                                ColummIdx: Integer; out Left: Integer; out Top: Integer; 
                                out Width: Integer; out Height: Integer): GdPictureStatus; dispid 120;
    function GetTableColumnCount(const OCRResultID: WideString; TableIdx: Integer): Integer; dispid 121;
    function GetTableRect(const OCRResultID: WideString; TableIdx: Integer; out Left: Integer; 
                          out Top: Integer; out Width: Integer; out Height: Integer): GdPictureStatus; dispid 122;
    function GetTableCount(const OCRResultID: WideString): Integer; dispid 123;
    function GetTableCellText(const OCRResultID: WideString; TableIdx: Integer; ColummIdx: Integer; 
                              RowIdx: Integer): WideString; dispid 124;
    function GetTableCellRect(const OCRResultID: WideString; TableIdx: Integer; ColummIdx: Integer; 
                              RowIdx: Integer; out Left: Integer; out Top: Integer; 
                              out Width: Integer; out Height: Integer): GdPictureStatus; dispid 125;
  end;

// *********************************************************************//
// Interface: ISpreadsheetOptions
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {107507E4-8258-4E89-9167-CADCD46059BB}
// *********************************************************************//
  ISpreadsheetOptions = interface(IDispatch)
    ['{107507E4-8258-4E89-9167-CADCD46059BB}']
  end;

// *********************************************************************//
// DispIntf:  ISpreadsheetOptionsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {107507E4-8258-4E89-9167-CADCD46059BB}
// *********************************************************************//
  ISpreadsheetOptionsDisp = dispinterface
    ['{107507E4-8258-4E89-9167-CADCD46059BB}']
  end;

// *********************************************************************//
// Interface: IGdPicturePDF
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4862F192-136A-4700-9F1D-0B6164A36B99}
// *********************************************************************//
  IGdPicturePDF = interface(IDispatch)
    ['{4862F192-136A-4700-9F1D-0B6164A36B99}']
    function AddCheckBoxFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                                  const FieldName: WideString; Style: PdfCheckBoxStyle; 
                                  Checked: WordBool; CheckMarkRed: Byte; CheckMarkGreen: Byte; 
                                  CheckMarkBlue: Byte): Integer; safecall;
    function AddCheckBoxFormField_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                    const FieldName: WideString; Style: PdfCheckBoxStyle; 
                                    Checked: WordBool; CheckMarkCyan: Byte; CheckMarkMagenta: Byte; 
                                    CheckMarkYellow: Byte; CheckMarkBlack: Byte): Integer; safecall;
    function AddCircleAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                                 const Title: WideString; const Contents: WideString; 
                                 LineWidth: Single; LineStyle: PdfAnnotationBorderStyle; 
                                 LineDashOn: Single; LineDashOff: Single; Opacity: Single; 
                                 Red: Byte; Green: Byte; Blue: Byte): Integer; safecall;
    function AddComboFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                               const FieldName: WideString; const FontResName: WideString; 
                               FontSize: Single; TextRed: Byte; TextGreen: Byte; TextBlue: Byte; 
                               Sorted: WordBool): Integer; safecall;
    function AddComboFormField_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                 const FieldName: WideString; const FontResName: WideString; 
                                 FontSize: Single; TextCyan: Byte; TextMagenta: Byte; 
                                 TextYellow: Byte; TextBlack: Byte; Sorted: WordBool): Integer; safecall;
    function AddCurveToPath1(X1: Single; Y1: Single; X3: Single; Y3: Single): GdPictureStatus; safecall;
    function AddCurveToPath2(X2: Single; Y2: Single; X3: Single; Y3: Single): GdPictureStatus; safecall;
    function AddCurveToPath3(X1: Single; Y1: Single; X2: Single; Y2: Single; X3: Single; Y3: Single): GdPictureStatus; safecall;
    function AddEllipseToPath(CenterX: Single; CenterY: Single; Width: Single; Height: Single): GdPictureStatus; safecall;
    function AddFontFromFileU(const FilePath: WideString; const FontName: WideString; 
                              CharSet: FontCharSet; Bold: WordBool; Italic: WordBool): WideString; safecall;
    function AddFormFieldItem(FieldId: Integer; const Text: WideString): GdPictureStatus; safecall;
    function AddFormFieldItem_2(FieldId: Integer; const Text: WideString; const Value: WideString): GdPictureStatus; safecall;
    function AddFreeTextAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                                   Borders: WordBool; const Title: WideString; 
                                   const Subject: WideString; const Contents: WideString; 
                                   const FontResName: WideString; FontSize: Single; 
                                   FontColorRed: Byte; FontColorGreen: Byte; FontColorBlue: Byte; 
                                   FillColorRed: Byte; FillColorGreen: Byte; FillColorBlue: Byte; 
                                   Opacity: Single): Integer; safecall;
    function AddFreeTextAnnotation_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                     Borders: WordBool; const Title: WideString; 
                                     const Subject: WideString; const Contents: WideString; 
                                     const FontResName: WideString; FontSize: Single; 
                                     FontColorCyan: Byte; FontColorMagenta: Byte; 
                                     FontColorYellow: Byte; FontColorBlack: Byte; 
                                     FillColorCyan: Byte; FillColorMagenta: Byte; 
                                     FillColorYellow: Byte; FillColorBlack: Byte; Opacity: Single): Integer; safecall;
    function AddImageFromGdPictureImage(ImageID: Integer; ImageMask: WordBool; DrawImage: WordBool): WideString; safecall;
    function AddImageFromGdPictureImage_2(ImageID: Integer; 
                                          AvancedCompression: PdfAdvancedImageCompression): GdPictureStatus; safecall;
    function AddJpegImageFromFile(const FilePath: WideString): WideString; safecall;
    function AddJpegImageFromIStream(const Stream: IUnknown): WideString; safecall;
    function AddLineAnnotation(StartX: Single; StartY: Single; DstX: Single; DstY: Single; 
                               const Title: WideString; const Contents: WideString; 
                               StartCap: PdfAnnotationLineEndingStyle; 
                               EndCap: PdfAnnotationLineEndingStyle; ShowContent: WordBool; 
                               LineWidth: Single; LineStyle: PdfAnnotationBorderStyle; 
                               LineDashOn: Single; LineDashOff: Single; Opacity: Single; Red: Byte; 
                               Green: Byte; Blue: Byte): Integer; safecall;
    function AddLineToPath(DstX: Single; DstY: Single): GdPictureStatus; safecall;
    function AddLinkAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                               Borders: WordBool; Red: Byte; Green: Byte; Blue: Byte): Integer; safecall;
    function AddLinkAnnotation_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                 Borders: WordBool; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                 Black: Byte): Integer; safecall;
    function AddLinkToPageAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                                     PageNum: Integer; DstLeft: Single; DstTop: Single; 
                                     Borders: WordBool; Red: Byte; Green: Byte; Blue: Byte): Integer; safecall;
    function AddLinkToWebAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                                    const Uri: WideString; Borders: WordBool; Red: Byte; 
                                    Green: Byte; Blue: Byte): Integer; safecall;
    function AddListFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                              const FieldName: WideString; const FontResName: WideString; 
                              FontSize: Single; TextRed: Byte; TextGreen: Byte; TextBlue: Byte; 
                              Sorted: WordBool; Multiselect: WordBool): Integer; safecall;
    function AddListFormField_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                const FieldName: WideString; const FontResName: WideString; 
                                FontSize: Single; TextCyan: Byte; TextMagenta: Byte; 
                                TextYellow: Byte; TextBlack: Byte; Sorted: WordBool; 
                                Multiselect: WordBool): Integer; safecall;
    function AddPageLabelsRange(StartPage: Integer; Style: PdfPageLabelStyle; 
                                const Prefix: WideString; NumPortion: Integer): GdPictureStatus; safecall;
    function AddPageRotation(Angle: Integer): GdPictureStatus; safecall;
    function AddPushButtonFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                                    const FieldName: WideString; const Caption: WideString; 
                                    const FontResName: WideString; FontSize: Single; TextRed: Byte; 
                                    TextGreen: Byte; TextBlue: Byte): Integer; safecall;
    function AddPushButtonFormField_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                      const FieldName: WideString; const Caption: WideString; 
                                      const FontResName: WideString; FontSize: Single; 
                                      TextCyan: Byte; TextMagenta: Byte; TextYellow: Byte; 
                                      TextBlack: Byte): Integer; safecall;
    function AddRadioButtonFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                                     const GroupName: WideString; const FieldName: WideString; 
                                     Style: PdfCheckBoxStyle; CheckMarkRed: Byte; 
                                     CheckMarkGreen: Byte; CheckMarkBlue: Byte): Integer; safecall;
    function AddRadioButtonFormField_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                       const GroupName: WideString; const FieldName: WideString; 
                                       Style: PdfCheckBoxStyle; CheckMarkCyan: Byte; 
                                       CheckMarkMagenta: Byte; CheckMarkYellow: Byte; 
                                       CheckMarkBlack: Byte): Integer; safecall;
    function AddRotationAt(Angle: Single; AtX: Single; AtY: Single): GdPictureStatus; safecall;
    function AddSignatureFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                                   const FieldName: WideString): Integer; safecall;
    function AddSquareAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                                 const Title: WideString; const Contents: WideString; 
                                 LineWidth: Single; LineStyle: PdfAnnotationBorderStyle; 
                                 LineDashOn: Single; LineDashOff: Single; Opacity: Single; 
                                 Red: Byte; Green: Byte; Blue: Byte): Integer; safecall;
    function AddStampAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                                const Title: WideString; const Contents: WideString; 
                                StampStyle: PdfRubberStampAnnotationIcon; Opacity: Single; 
                                Red: Byte; Green: Byte; Blue: Byte): Integer; safecall;
    function AddStandardFont(StdFont: PdfStandardFont): WideString; safecall;
    function AddStickyNoteAnnotation(IconName: PdfStickyNoteAnnotationIcon; Left: Single; 
                                     Top: Single; const Author: WideString; 
                                     const Subject: WideString; const Contents: WideString; 
                                     Opacity: Single; OpenPopup: WordBool; Red: Byte; Green: Byte; 
                                     Blue: Byte; PopupLeft: Single; PopupTop: Single; 
                                     PopupWidth: Single; PopupHeight: Single): Integer; safecall;
    function AddTextFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                              const FieldName: WideString; const Text: WideString; 
                              MultiLines: WordBool; const FontResName: WideString; 
                              FontSize: Single; TextRed: Byte; TextGreen: Byte; TextBlue: Byte): Integer; safecall;
    function AddTextFormField_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                const FieldName: WideString; const Text: WideString; 
                                MultiLines: WordBool; const FontResName: WideString; 
                                FontSize: Single; TextCyan: Byte; TextMagenta: Byte; 
                                TextYellow: Byte; TextBlack: Byte): Integer; safecall;
    function AddTransformationMatrix(a: Single; b: Single; c: Single; d: Single; e: Single; 
                                     f: Single): GdPictureStatus; safecall;
    function AddTrueTypeFont(const FontName: WideString; Bold: WordBool; Italic: WordBool; 
                             Embedded: WordBool): WideString; safecall;
    function AddTrueTypeFontFromFile(const FilePath: WideString; Bold: WordBool; Italic: WordBool; 
                                     Embedded: WordBool): WideString; safecall;
    function AddTrueTypeFontFromFileU(const FilePath: WideString; const FileName: WideString; 
                                      Bold: WordBool; Italic: WordBool; EnableSubset: WordBool): WideString; safecall;
    function AddTrueTypeFontU(const FontName: WideString; CharSet: FontCharSet; Bold: WordBool; 
                              Italic: WordBool): WideString; safecall;
    function AddTrueTypeFontU_2(const FontName: WideString; Bold: WordBool; Italic: WordBool; 
                                EnableSubset: WordBool): WideString; safecall;
    function ApplySignature(const OutputFileName: WideString; SignatureMode: PdfSignatureMode; 
                            Linearization: WordBool): GdPictureStatus; safecall;
    function AttachTagToAnnotation(TagID: Integer; AnnotationIdx: Integer): GdPictureStatus; safecall;
    function AttachTagToFormField(TagID: Integer; FieldId: Integer): GdPictureStatus; safecall;
    function AutoDeskew(MaxAngleOfResearch: Single; Optimistic: WordBool): Single; safecall;
    function BeginMarkedContent(const StructType: WideString): GdPictureStatus; safecall;
    function BeginMarkedContentSequence(TagID: Integer; const StructType: WideString): GdPictureStatus; safecall;
    function BeginOCGMarkedContent(OCGId: Integer): GdPictureStatus; safecall;
    function BeginPath(DstX: Single; DstY: Single): GdPictureStatus; safecall;
    function BeginXObjectForm(Width: Single; Height: Single): WideString; safecall;
    function ClearPageContent: GdPictureStatus; safecall;
    function ClipPath: GdPictureStatus; safecall;
    function ClipPathOdd: GdPictureStatus; safecall;
    function ClonePage(PageNo: Integer): GdPictureStatus; safecall;
    function ClonePage_2(const FromPDF: IGdPicturePDF; PageNo: Integer): GdPictureStatus; safecall;
    function CloseAndFillAndStrokePath: GdPictureStatus; safecall;
    function CloseAndFillAndStrokePathOdd: GdPictureStatus; safecall;
    function CloseAndStrokePath: GdPictureStatus; safecall;
    function CloseDocument: GdPictureStatus; safecall;
    function ClosePath: GdPictureStatus; safecall;
    function ConvertToPDFA(const FilePath: WideString; Conformance: PdfConversionConformance; 
                           AllowVectorization: WordBool; AllowRasterization: WordBool): GdPictureStatus; safecall;
    function CreateFromText(Conformance: PdfConformance; PageWidth: Single; PageHeight: Single; 
                            MarginLeft: Single; MarginTop: Single; MarginRight: Single; 
                            MarginBottom: Single; TextAlignment: TextAlignment; 
                            const Text: WideString; TextSize: Single; const FontName: WideString; 
                            FontBold: WordBool; FontItalic: WordBool; Embedded: WordBool; 
                            UseFontBbox: WordBool): GdPictureStatus; safecall;
    function DeleteCustomPDFInformation(const Key: WideString): GdPictureStatus; safecall;
    function DeleteEmbeddedFile(FileIdx: Integer): GdPictureStatus; safecall;
    function DeleteFormFieldItem(FieldId: Integer; ItemIdx: Integer): GdPictureStatus; safecall;
    function DeleteImage(const ImageResName: WideString): GdPictureStatus; safecall;
    function DeleteOCG(OCGId: Integer): GdPictureStatus; safecall;
    function DeleteOCG_2(OCGId: Integer; RemoveContent: WordBool): GdPictureStatus; safecall;
    function DeletePage(PageNo: Integer): GdPictureStatus; safecall;
    function DeletePageLabels: GdPictureStatus; safecall;
    function DeletePageLabelsRange(LabelingRangeIdx: Integer): GdPictureStatus; safecall;
    function DeletePagePrivateTag(const Tag: WideString): GdPictureStatus; safecall;
    function DeletePageThumbnailImage: GdPictureStatus; safecall;
    procedure Dispose; safecall;
    function DrawArc(Left: Single; Top: Single; Radius: Single; StartAngle: Single; 
                     EndAngle: Single; Close: WordBool; Fill: WordBool; Stroke: WordBool): GdPictureStatus; safecall;
    function DrawBarcode1D(BarcodeType: Barcode1DWriterType; const Data: WideString; DstX: Single; 
                           DstY: Single; DstWidth: Single; DstHeight: Single; Red: Byte; 
                           Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function DrawBarcode1D_2(BarcodeType: Barcode1DWriterType; const Data: WideString; 
                             DstX: Single; DstY: Single; DstWidth: Single; DstHeight: Single; 
                             Cyan: Byte; Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; safecall;
    function DrawBarcodeAztec(const Data: WideString; Version: BarcodeAztecCodeVersion; 
                              EccPercent: Integer; QuietZone: Integer; ModuleSize: Integer; 
                              DstX: Single; DstY: Single; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function DrawBarcodeAztec_2(const Data: WideString; Version: BarcodeAztecCodeVersion; 
                                EccPercent: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                DstX: Single; DstY: Single; Cyan: Byte; Magenta: Byte; 
                                Yellow: Byte; Black: Byte): GdPictureStatus; safecall;
    function DrawBarcodeAztec_3(const Data: WideString; Version: BarcodeAztecCodeVersion; 
                                EccPercent: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                DstX: Single; DstY: Single; FillColorR: Byte; FillColorG: Byte; 
                                FillColorB: Byte; BackColorR: Byte; BackColorG: Byte; 
                                BackColorB: Byte): GdPictureStatus; safecall;
    function DrawBarcodeAztec_4(const Data: WideString; Version: BarcodeAztecCodeVersion; 
                                EccPercent: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                DstX: Single; DstY: Single; FillColorC: Byte; FillColorM: Byte; 
                                FillColorY: Byte; FillColorK: Byte; BackColorC: Byte; 
                                BackColorM: Byte; BackColorY: Byte; BackColorK: Byte): GdPictureStatus; safecall;
    function DrawBarcodeDataMatrix(const Data: WideString; 
                                   EncodingMode: BarcodeDataMatrixEncodingMode; 
                                   Version: BarcodeDataMatrixVersion; ModuleSize: Integer; 
                                   DstX: Single; DstY: Single; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function DrawBarcodeDataMatrix_2(const Data: WideString; 
                                     EncodingMode: BarcodeDataMatrixEncodingMode; 
                                     Version: BarcodeDataMatrixVersion; ModuleSize: Integer; 
                                     DstX: Single; DstY: Single; Cyan: Byte; Magenta: Byte; 
                                     Yellow: Byte; Black: Byte): GdPictureStatus; safecall;
    function DrawBarcodeDataMatrix_3(const Data: WideString; 
                                     EncodingMode: BarcodeDataMatrixEncodingMode; 
                                     Version: BarcodeDataMatrixVersion; QuietZone: Integer; 
                                     ModuleSize: Integer; DstX: Single; DstY: Single; 
                                     FillColorR: Byte; FillColorG: Byte; FillColorB: Byte; 
                                     BackColorR: Byte; BackColorG: Byte; BackColorB: Byte): GdPictureStatus; safecall;
    function DrawBarcodeDataMatrix_4(const Data: WideString; 
                                     EncodingMode: BarcodeDataMatrixEncodingMode; 
                                     Version: BarcodeDataMatrixVersion; QuietZone: Integer; 
                                     ModuleSize: Integer; DstX: Single; DstY: Single; 
                                     FillColorC: Byte; FillColorM: Byte; FillColorY: Byte; 
                                     FillColorK: Byte; BackColorC: Byte; BackColorM: Byte; 
                                     BackColorY: Byte; BackColorK: Byte): GdPictureStatus; safecall;
    function DrawBarcodeMicroMicroQrCode(const Data: WideString; 
                                         EncodingMode: BarcodeQREncodingMode; 
                                         ErrorCorrectionLevel: BarcodeMicroQRErrorCorrectionLevel; 
                                         Version: Integer; ModuleSize: Integer; DstX: Single; 
                                         DstY: Single; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function DrawBarcodeMicroMicroQrCode_2(const Data: WideString; 
                                           EncodingMode: BarcodeQREncodingMode; 
                                           ErrorCorrectionLevel: BarcodeMicroQRErrorCorrectionLevel; 
                                           Version: Integer; ModuleSize: Integer; DstX: Single; 
                                           DstY: Single; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                           Black: Byte): GdPictureStatus; safecall;
    function DrawBarcodeMicroMicroQrCode_3(const Data: WideString; 
                                           EncodingMode: BarcodeQREncodingMode; 
                                           ErrorCorrectionLevel: BarcodeMicroQRErrorCorrectionLevel; 
                                           Version: Integer; QuietZone: Integer; 
                                           ModuleSize: Integer; DstX: Single; DstY: Single; 
                                           FillColorR: Byte; FillColorG: Byte; FillColorB: Byte; 
                                           BackColorR: Byte; BackColorG: Byte; BackColorB: Byte): GdPictureStatus; safecall;
    function DrawBarcodeMicroMicroQrCode_4(const Data: WideString; 
                                           EncodingMode: BarcodeQREncodingMode; 
                                           ErrorCorrectionLevel: BarcodeMicroQRErrorCorrectionLevel; 
                                           Version: Integer; QuietZone: Integer; 
                                           ModuleSize: Integer; DstX: Single; DstY: Single; 
                                           FillColorC: Byte; FillColorM: Byte; FillColorY: Byte; 
                                           FillColorK: Byte; BackColorC: Byte; BackColorM: Byte; 
                                           BackColorY: Byte; BackColorK: Byte): GdPictureStatus; safecall;
    function DrawBarcodePDF417(const Data: WideString; EncodingMode: BarcodePDF417EncodingMode; 
                               ErrorCorrectionLevel: BarcodePDF417ErrorCorrectionLevel; 
                               Rows: Integer; Cols: Integer; ModuleWidth: Integer; 
                               RowHeight: Integer; DstX: Single; DstY: Single; Red: Byte; 
                               Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function DrawBarcodePDF417_2(const Data: WideString; EncodingMode: BarcodePDF417EncodingMode; 
                                 ErrorCorrectionLevel: BarcodePDF417ErrorCorrectionLevel; 
                                 Rows: Integer; Cols: Integer; ModuleWidth: Integer; 
                                 RowHeight: Integer; DstX: Single; DstY: Single; Cyan: Byte; 
                                 Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; safecall;
    function DrawBarcodePDF417_3(const Data: WideString; EncodingMode: BarcodePDF417EncodingMode; 
                                 ErrorCorrectionLevel: BarcodePDF417ErrorCorrectionLevel; 
                                 Rows: Integer; Cols: Integer; QuietZone: Integer; 
                                 ModuleWidth: Integer; RowHeight: Integer; DstX: Single; 
                                 DstY: Single; FillColorR: Byte; FillColorG: Byte; 
                                 FillColorB: Byte; BackColorR: Byte; BackColorG: Byte; 
                                 BackColorB: Byte): GdPictureStatus; safecall;
    function DrawBarcodePDF417_4(const Data: WideString; EncodingMode: BarcodePDF417EncodingMode; 
                                 ErrorCorrectionLevel: BarcodePDF417ErrorCorrectionLevel; 
                                 Rows: Integer; Cols: Integer; QuietZone: Integer; 
                                 ModuleWidth: Integer; RowHeight: Integer; DstX: Single; 
                                 DstY: Single; FillColorC: Byte; FillColorM: Byte; 
                                 FillColorY: Byte; FillColorK: Byte; BackColorC: Byte; 
                                 BackColorM: Byte; BackColorY: Byte; BackColorK: Byte): GdPictureStatus; safecall;
    function DrawBarcodeQrCode(const Data: WideString; EncodingMode: BarcodeQREncodingMode; 
                               ErrorCorrectionLevel: BarcodeQRErrorCorrectionLevel; 
                               Version: Integer; ModuleSize: Integer; DstX: Single; DstY: Single; 
                               Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function DrawBarcodeQrCode_2(const Data: WideString; EncodingMode: BarcodeQREncodingMode; 
                                 ErrorCorrectionLevel: BarcodeQRErrorCorrectionLevel; 
                                 Version: Integer; ModuleSize: Integer; DstX: Single; DstY: Single; 
                                 Cyan: Byte; Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; safecall;
    function DrawBarcodeQrCode_3(const Data: WideString; EncodingMode: BarcodeQREncodingMode; 
                                 ErrorCorrectionLevel: BarcodeQRErrorCorrectionLevel; 
                                 Version: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                 DstX: Single; DstY: Single; FillColorR: Byte; FillColorG: Byte; 
                                 FillColorB: Byte; BackColorR: Byte; BackColorG: Byte; 
                                 BackColorB: Byte): GdPictureStatus; safecall;
    function DrawBarcodeQrCode_4(const Data: WideString; EncodingMode: BarcodeQREncodingMode; 
                                 ErrorCorrectionLevel: BarcodeQRErrorCorrectionLevel; 
                                 Version: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                 DstX: Single; DstY: Single; FillColorC: Byte; FillColorM: Byte; 
                                 FillColorY: Byte; FillColorK: Byte; BackColorC: Byte; 
                                 BackColorM: Byte; BackColorY: Byte; BackColorK: Byte): GdPictureStatus; safecall;
    function DrawCircle(CenterX: Single; CenterY: Single; Radius: Single; Fill: WordBool; 
                        Stroke: WordBool): GdPictureStatus; safecall;
    function DrawEllipse(CenterX: Single; CenterY: Single; Width: Single; Height: Single; 
                         Fill: WordBool; Stroke: WordBool): GdPictureStatus; safecall;
    function DrawImage(const ImageResName: WideString; DstX: Single; DstY: Single; Width: Single; 
                       Height: Single): GdPictureStatus; safecall;
    function DrawLine(StartX: Single; StartY: Single; DstX: Single; DstY: Single): GdPictureStatus; safecall;
    function DrawPage(const SrcPDF: IGdPicturePDF; SrcPage: Integer; DstX: Single; DstY: Single; 
                      DstWidth: Single; DstHeight: Single): GdPictureStatus; safecall;
    function DrawPie(Left: Single; Top: Single; Radius: Single; StartAngle: Single; 
                     EndAngle: Single; Fill: WordBool; Stroke: WordBool): GdPictureStatus; safecall;
    function DrawRectangle(Left: Single; Top: Single; Width: Single; Height: Single; 
                           Fill: WordBool; Stroke: WordBool): GdPictureStatus; safecall;
    function DrawRotatedText(const FontResName: WideString; DstX: Single; DstY: Single; 
                             const Text: WideString; Angle: Single): GdPictureStatus; safecall;
    function DrawRoundedRectangle(Left: Single; Top: Single; Width: Single; Height: Single; 
                                  Radius: Single; Fill: WordBool; Stroke: WordBool): GdPictureStatus; safecall;
    function DrawText(const FontResName: WideString; DstX: Single; DstY: Single; 
                      const Text: WideString): GdPictureStatus; safecall;
    function DrawTextBox(const FontResName: WideString; Left: Single; Top: Single; Right: Single; 
                         Bottom: Single; HorizontalAlignment: TextAlignment; 
                         VerticalAlignment: TextAlignment; const Text: WideString): GdPictureStatus; safecall;
    function DrawTextBox_2(const FontResName: WideString; Left: Single; Top: Single; Right: Single; 
                           Bottom: Single; HorizontalAlignment: TextAlignment; 
                           VerticalAlignment: TextAlignment; const Text: WideString; 
                           UseFontBbox: WordBool): GdPictureStatus; safecall;
    function DrawWrappedText(const FontResName: WideString; Left: Single; Top: Single; 
                             Right: Single; Bottom: Single; HorizontalAlignment: TextAlignment; 
                             const Text: WideString; UseFontBbox: WordBool; var StartPos: Integer): GdPictureStatus; safecall;
    function DrawXObjectForm(const ResourceName: WideString; DstX: Single; DstY: Single; 
                             ScaleX: Single; ScaleY: Single): GdPictureStatus; safecall;
    function DuplicatePage(Count: Integer): GdPictureStatus; safecall;
    function EmbedFile(const FilePath: WideString; const Description: WideString): GdPictureStatus; safecall;
    function EmbedFile_2(const Stream: IUnknown; const FileTitle: WideString; 
                         const Description: WideString): GdPictureStatus; safecall;
    procedure EnableCompression(Compress: WordBool); safecall;
    function EndMarkedContent: GdPictureStatus; safecall;
    function EndOCGMarkedContent: GdPictureStatus; safecall;
    function EndPath: GdPictureStatus; safecall;
    function EndXObjectForm: GdPictureStatus; safecall;
    function ExtractEmbeddedFile(FileIdx: Integer; var Data: PSafeArray): GdPictureStatus; safecall;
    function ExtractPageImage(ImageNo: Integer): Integer; safecall;
    function FillAndStrokePath: GdPictureStatus; safecall;
    function FillAndStrokePathOdd: GdPictureStatus; safecall;
    function FillPath: GdPictureStatus; safecall;
    function FillPathOdd: GdPictureStatus; safecall;
    function FlattenFormFields: GdPictureStatus; safecall;
    function FlattenFormFields_2(PageNo: Integer): GdPictureStatus; safecall;
    function FlipPage(FlipX: WordBool; FlipY: WordBool): GdPictureStatus; safecall;
    function FormFieldHasBackgroundColor(FieldId: Integer): WordBool; safecall;
    function FormFieldHasBackgroundColor_2(FieldId: Integer; ChildIdx: Integer): WordBool; safecall;
    function FormFieldHasBorderColor(FieldId: Integer): WordBool; safecall;
    function FormFieldHasBorderColor_2(FieldId: Integer; ChildIdx: Integer): WordBool; safecall;
    function GetActionJavaScript(ActionID: Integer): WideString; safecall;
    function GetActionLaunchDestination(ActionID: Integer; var FileName: WideString; 
                                        var DefaultDirectory: WideString; 
                                        var Parameters: WideString; 
                                        var Operation: PdfActionLaunchOperation; 
                                        var NewWindow: WordBool): GdPictureStatus; safecall;
    function GetActionPageDestination(ActionID: Integer; var DestinationType: PdfDestinationType; 
                                      var Page: Integer; var Left: Single; var Bottom: Single; 
                                      var Right: Single; var Top: Single; var Zoom: Single): GdPictureStatus; safecall;
    function GetActionRemotePageDestination(ActionID: Integer; 
                                            var DestinationType: PdfDestinationType; 
                                            var FilePath: WideString; var NewWindow: WordBool; 
                                            var Page: Integer; var Left: Single; 
                                            var Bottom: Single; var Right: Single; var Top: Single; 
                                            var Zoom: Single): GdPictureStatus; safecall;
    function GetActionType(ActionID: Integer): PdfActionType; safecall;
    function GetActionURI(ActionID: Integer): WideString; safecall;
    function GetAnnotationActionID(AnnotationIdx: Integer): Integer; safecall;
    function GetAnnotationContents(AnnotationIdx: Integer): WideString; safecall;
    function GetAnnotationCount: Integer; safecall;
    function GetAnnotationFlags(AnnotationIdx: Integer): PdfAnnotationFlag; safecall;
    function GetAnnotationName(AnnotationIdx: Integer): WideString; safecall;
    function GetAnnotationOpacity(AnnotationIdx: Integer): Byte; safecall;
    function GetAnnotationRect(AnnotationIdx: Integer; var Left: Single; var Top: Single; 
                               var Width: Single; var Height: Single): GdPictureStatus; safecall;
    function GetAnnotationSubject(AnnotationIdx: Integer): WideString; safecall;
    function GetAnnotationSubType(AnnotationIdx: Integer): WideString; safecall;
    function GetAnnotationTitle(AnnotationIdx: Integer): WideString; safecall;
    function GetAnnotationType(AnnotationIdx: Integer): WideString; safecall;
    function GetAuthor: WideString; safecall;
    function GetBookmarkActionID(BookmarkID: Integer): Integer; safecall;
    function GetBookmarkChildCount(BookmarkID: Integer): Integer; safecall;
    function GetBookmarkCount: Integer; safecall;
    function GetBookmarkFirstChildID(BookmarkID: Integer): Integer; safecall;
    function GetBookmarkNextID(BookmarkID: Integer): Integer; safecall;
    function GetBookmarkParentID(BookmarkID: Integer): Integer; safecall;
    function GetBookmarkPrevID(BookmarkID: Integer): Integer; safecall;
    function GetBookmarkRootID: Integer; safecall;
    function GetBookmarkTextAttribute(BookmarkID: Integer): Integer; safecall;
    function GetBookmarkTitle(BookmarkID: Integer): WideString; safecall;
    function GetCreationDate: WideString; safecall;
    function GetCreator: WideString; safecall;
    function GetCurrentPage: Integer; safecall;
    function GetCustomPDFInformation(const Key: WideString): WideString; safecall;
    function GetCustomPDFInformationKeys(const Separator: WideString): WideString; safecall;
    function GetEmbeddedFileCount: Integer; safecall;
    function GetEmbeddedFileCreationDate(FileIdx: Integer): WideString; safecall;
    function GetEmbeddedFileDescription(FileIdx: Integer): WideString; safecall;
    function GetEmbeddedFileModificationDate(FileIdx: Integer): WideString; safecall;
    function GetEmbeddedFileName(FileIdx: Integer): WideString; safecall;
    function GetEmbeddedFileSize(FileIdx: Integer): Integer; safecall;
    function GetEmbeddedFileTitle(FileIdx: Integer): WideString; safecall;
    function GetEncryptionMode: PdfEncryptionMode; safecall;
    function GetEncryptionScheme: PdfEncryption; safecall;
    function GetFileAttachmentAnnotCreationDate(AnnotationIdx: Integer): WideString; safecall;
    function GetFileAttachmentAnnotFileDescription(AnnotationIdx: Integer): WideString; safecall;
    function GetFileAttachmentAnnotFileName(AnnotationIdx: Integer): WideString; safecall;
    function GetFileAttachmentAnnotFileSize(AnnotationIdx: Integer): Integer; safecall;
    function GetFileAttachmentAnnotModificationDate(AnnotationIdx: Integer): WideString; safecall;
    function GetFontCount: Integer; safecall;
    function GetFontEncoding(FontIdx: Integer): WideString; safecall;
    function GetFontName(FontIdx: Integer): WideString; safecall;
    function GetFontType(FontIdx: Integer): WideString; safecall;
    function GetFormFieldActionID(FieldId: Integer): Integer; safecall;
    function GetFormFieldAlternateTitle(FieldId: Integer): WideString; safecall;
    function GetFormFieldBorderStyle(FieldId: Integer; var BorderWidth: Single; 
                                     var BorderStyle: PdfAnnotationBorderStyle; var DashOn: Single; 
                                     var DashOff: Single): GdPictureStatus; safecall;
    function GetFormFieldBorderStyle_2(FieldId: Integer; ChildIdx: Integer; 
                                       var BorderWidth: Single; 
                                       var BorderStyle: PdfAnnotationBorderStyle; 
                                       var DashOn: Single; var DashOff: Single): GdPictureStatus; safecall;
    function GetFormFieldCheckBoxStyle(FieldId: Integer): PdfCheckBoxStyle; safecall;
    function GetFormFieldCheckBoxStyle_2(FieldId: Integer; ChildIdx: Integer): PdfCheckBoxStyle; safecall;
    function GetFormFieldChecked(FieldId: Integer): WordBool; safecall;
    function GetFormFieldChecked_2(FieldId: Integer; ChildIdx: Integer): WordBool; safecall;
    function GetFormFieldChildCount(FieldId: Integer): Integer; safecall;
    function GetFormFieldChildID(FieldId: Integer; FieldIdx: Integer): Integer; safecall;
    function GetFormFieldCloneNumber(FieldId: Integer): Integer; safecall;
    function GetFormFieldComb(FieldId: Integer): WordBool; safecall;
    function GetFormFieldDefaultChecked(FieldId: Integer): WordBool; safecall;
    function GetFormFieldDefaultChecked_2(FieldId: Integer; ChildIdx: Integer): WordBool; safecall;
    function GetFormFieldDefaultValue(FieldId: Integer): WideString; safecall;
    function GetFormFieldDoNotScroll(FieldId: Integer): WordBool; safecall;
    function GetFormFieldDoNotSpellCheck(FieldId: Integer): WordBool; safecall;
    function GetFormFieldFileSelect(FieldId: Integer): WordBool; safecall;
    function GetFormFieldFontName(FieldId: Integer): WideString; safecall;
    function GetFormFieldFontProperties(FieldId: Integer; var FontFamily: WideString; 
                                        var FontStyle: TrueTypeFontStyle; var IsStdFont: WordBool): GdPictureStatus; safecall;
    function GetFormFieldFontSize(FieldId: Integer): Single; safecall;
    function GetFormFieldFontSize_2(FieldId: Integer; ChildIdx: Integer): Single; safecall;
    function GetFormFieldFullTitle(FieldId: Integer): WideString; safecall;
    function GetFormFieldFullTitleWithCloneNumber(FieldId: Integer): WideString; safecall;
    function GetFormFieldId(FieldIdx: Integer): Integer; safecall;
    function GetFormFieldItemCommit(FieldId: Integer): WordBool; safecall;
    function GetFormFieldItemCount(FieldId: Integer): Integer; safecall;
    function GetFormFieldItemEdit(FieldId: Integer): WordBool; safecall;
    function GetFormFieldItemSort(FieldId: Integer): WordBool; safecall;
    function GetFormFieldItemText(FieldId: Integer; ItemIdx: Integer): WideString; safecall;
    function GetFormFieldItemValue(FieldId: Integer; ItemIdx: Integer): WideString; safecall;
    function GetFormFieldLocation(FieldId: Integer; var Left: Single; var Top: Single; 
                                  var Right: Single; var Bottom: Single): GdPictureStatus; safecall;
    function GetFormFieldMaxLen(FieldId: Integer): Integer; safecall;
    function GetFormFieldMultiLine(FieldId: Integer): WordBool; safecall;
    function GetFormFieldMultiSelect(FieldId: Integer): WordBool; safecall;
    function GetFormFieldNormalCaption(FieldId: Integer): WideString; safecall;
    function GetFormFieldOnStateName(FieldId: Integer): WideString; safecall;
    function GetFormFieldOnStateName_2(FieldId: Integer; ChildIdx: Integer): WideString; safecall;
    function GetFormFieldPage(FieldId: Integer): Integer; safecall;
    function GetFormFieldPassword(FieldId: Integer): WordBool; safecall;
    function GetFormFieldRadioInUnison(FieldId: Integer): WordBool; safecall;
    function GetFormFieldReadOnly(FieldId: Integer): WordBool; safecall;
    function GetFormFieldRequired(FieldId: Integer): WordBool; safecall;
    function GetFormFieldRichText(FieldId: Integer): WordBool; safecall;
    function GetFormFieldRotation(FieldId: Integer): Integer; safecall;
    function GetFormFieldsCount: Integer; safecall;
    function GetFormFieldsNeedAppearances: WordBool; safecall;
    function GetFormFieldTextAlignment(FieldId: Integer): TextAlignment; safecall;
    function GetFormFieldTitle(FieldId: Integer): WideString; safecall;
    function GetFormFieldType(FieldId: Integer): PdfFormFieldType; safecall;
    function GetFormFieldValue(FieldId: Integer): WideString; safecall;
    function GetFormFieldValue_2(FieldId: Integer; const Separator: WideString): WideString; safecall;
    function GetFormFieldVisibility(FieldId: Integer): PdfFormFieldVisibility; safecall;
    function GetInputFilePath: WideString; safecall;
    function GetKeywords: WideString; safecall;
    function GetMeasurementUnit: PdfMeasurementUnit; safecall;
    function GetMetadata: WideString; safecall;
    function GetModificationDate: WideString; safecall;
    function GetObjectInterop: OleVariant; safecall;
    function GetOCG(OCGIdx: Integer): Integer; safecall;
    function GetOCGCount: Integer; safecall;
    function GetOCGExportState(OCGId: Integer): PdfOcgState; safecall;
    function GetOCGIntentView(OCGId: Integer): WordBool; safecall;
    function GetOCGLockedState(OCGId: Integer): WordBool; safecall;
    function GetOCGPrintState(OCGId: Integer): PdfOcgState; safecall;
    function GetOCGTitle(OCGId: Integer): WideString; safecall;
    function GetOCGViewState(OCGId: Integer): PdfOcgState; safecall;
    function GetOCGZoomMax(OCGId: Integer): Double; safecall;
    function GetOCGZoomMin(OCGId: Integer): Double; safecall;
    function GetOrigin: PdfOrigin; safecall;
    function GetPageBox(PageBox: PdfPageBox; var Left: Single; var Top: Single; var Right: Single; 
                        var Bottom: Single): GdPictureStatus; safecall;
    function GetPageContent: WideString; safecall;
    function GetPageCount: Integer; safecall;
    function GetPageHeight: Single; safecall;
    function GetPageImageBitDepth(ImageIdx: Integer): Integer; safecall;
    function GetPageImageColorSpace(ImageIdx: Integer): PdfColorSpace; safecall;
    function GetPageImageCoordinates(ImageIdx: Integer; var x0: Single; var y0: Single; 
                                     var X1: Single; var Y1: Single; var X2: Single; var Y2: Single): GdPictureStatus; safecall;
    function GetPageImageCount: Integer; safecall;
    function GetPageImageFilters(ImageIdx: Integer): PSafeArray; safecall;
    function GetPageImageMaskMode(ImageIdx: Integer): PdfImageMaskType; safecall;
    function GetPageImageResName(ImageIdx: Integer): WideString; safecall;
    function GetPageImageResolution(ImageIdx: Integer; var HorizontalResolution: Single; 
                                    var VerticalResolution: Single): GdPictureStatus; safecall;
    function GetPageImageSize(ImageIdx: Integer; var Width: Integer; var Height: Integer): GdPictureStatus; safecall;
    function GetPageLabel(PageNo: Integer): WideString; safecall;
    function GetPageLabelsRange(LabelingRangeIdx: Integer; var StartPage: Integer; 
                                var Style: PdfPageLabelStyle; var Prefix: WideString; 
                                var NumPortion: Integer): GdPictureStatus; safecall;
    function GetPageLabelsRangeCount: Integer; safecall;
    function GetPageLinkAnnotationIdx(LinkIdx: Integer): Integer; safecall;
    function GetPageLinksCount: Integer; safecall;
    function GetPageMetadata: WideString; safecall;
    function GetPagePrivateTag(const Tag: WideString): WideString; safecall;
    function GetPageRotation: Integer; safecall;
    function GetPageText: WideString; safecall;
    function GetPageTextArea(Left: Single; Top: Single; Width: Single; Height: Single): WideString; safecall;
    function GetPageTextWithCoords(const FieldSeparator: WideString): WideString; safecall;
    function GetPageTextWithCoordsEx(const FieldSeparator: WideString): WideString; safecall;
    function GetPageThumbnail(Width: Integer; Height: Integer; Red: Byte; Green: Byte; Blue: Byte): Integer; safecall;
    function GetPageThumbnail_2(Width: Integer; Height: Integer; Red: Byte; Green: Byte; 
                                Blue: Byte; Alpha: Byte; FitToPageSize: WordBool): Integer; safecall;
    function GetPageUserUnit: Single; safecall;
    function GetPageWidth: Single; safecall;
    function GetPDFAConformance: PdfConformance; safecall;
    function GetProducer: WideString; safecall;
    function GetRight(Right: PdfRight): WordBool; safecall;
    function GetSignatureCount: Integer; safecall;
    function GetSignatureProperties(SignatureIdx: Integer; var SignatureName: WideString; 
                                    var SignatureReason: WideString; 
                                    var SignatureLocation: WideString; 
                                    var SignatureContactInfo: WideString; 
                                    var SignatureDate: WideString; var StampLeft: Single; 
                                    var StampTop: Single; var StampWidth: Single; 
                                    var StampHeight: Single; var StampPage: Integer; 
                                    var DocumentValid: WordBool; var CertificateValid: WordBool; 
                                    var CertificateFriendlyName: WideString; 
                                    var CertificateIssuer: WideString; 
                                    var CertificateNotBefore: TDateTime; 
                                    var CertificateNotAfter: TDateTime; 
                                    var CertificateSubject: WideString; 
                                    var CertificateVersion: Integer; var SigningTime: TDateTime; 
                                    var SignatureLevel: PdfSignatureCertificationLevel): GdPictureStatus; safecall;
    function GetStat: GdPictureStatus; safecall;
    function GetSubject: WideString; safecall;
    function GetTagRootID: Integer; safecall;
    function GetTextHeight(const FontResName: WideString; TextSize: Single): Single; safecall;
    function GetTextHeight_2(const FontResName: WideString; TextSize: Single; UseFontBox: WordBool): Single; safecall;
    function GetTextWidth(const FontResName: WideString; TextSize: Single; const Text: WideString): Single; safecall;
    function GetTitle: WideString; safecall;
    function GetVersion: WideString; safecall;
    function GetViewerLayoutMode: PdfViewerLayoutMode; safecall;
    function GetViewerNonFullScreenPageMode: PdfViewerNonFullScreenPageMode; safecall;
    function GetViewerOpenActionID: Integer; safecall;
    function GetViewerPageMode: PdfViewerPageMode; safecall;
    function GetViewerPreference(Preference: PdfViewerPreference): WordBool; safecall;
    function GetWrappedTextHeight(const FontResName: WideString; Left: Single; Top: Single; 
                                  Right: Single; Bottom: Single; 
                                  HorizontalAlignment: TextAlignment; const Text: WideString; 
                                  UseFontBbox: WordBool; var StartPos: Integer): Single; safecall;
    function GetWrappedTextLineCount(const FontResName: WideString; Width: Single; 
                                     HorizontalAlignment: TextAlignment; const Text: WideString; 
                                     UseFontBbox: WordBool): Integer; safecall;
    function GuessPageTextRotation: Integer; safecall;
    function HasXFAFormFields: WordBool; safecall;
    function IncreaseVersion(Version: Single): GdPictureStatus; safecall;
    function InsertPage(PageWidth: Single; PageHeight: Single; PageNo: Integer): GdPictureStatus; safecall;
    function InsertPage_2(PageSize: PdfPageSizes; PageNo: Integer): GdPictureStatus; safecall;
    function IsEncrypted: WordBool; safecall;
    function IsFontEmbedded(FontIdx: Integer): WordBool; safecall;
    function IsLinearized: WordBool; safecall;
    function IsOwnerPassword: WordBool; safecall;
    function IsPageImage: WordBool; safecall;
    function IsPageImage_2(var ImageID: Integer; AutoRotate: WordBool): WordBool; safecall;
    function IsPageImage_3(IgnoreHiddenText: WordBool): WordBool; safecall;
    function IsPortFolio(var Portfolio: WordBool; var FirstFileIdx: Integer; 
                         var ViewMode: PdfPortFolioType): GdPictureStatus; safecall;
    function LoadFromFile(const FilePath: WideString; LoadInMemory: WordBool): GdPictureStatus; safecall;
    function LoadFromFileEx(const FilePath: WideString; OpenReadWrite: WordBool): GdPictureStatus; safecall;
    function LoadFromIStream(const Stream: IUnknown): GdPictureStatus; safecall;
    function MapStructureType(const NewStructType: WideString; const ExistingStructType: WideString): GdPictureStatus; safecall;
    function Merge2Documents(const SrcDoc1: WideString; const SrcDoc2: WideString; 
                             const DstDoc: WideString): GdPictureStatus; safecall;
    function Merge2Documents_2(const SrcDoc1: IGdPicturePDF; const SrcDoc2: IGdPicturePDF): IGdPicturePDF; safecall;
    function MergeDocuments(var SrcDocPath: PSafeArray; const DstDoc: WideString): GdPictureStatus; safecall;
    function MergeDocuments_2(var SrcDoc: PSafeArray): IGdPicturePDF; safecall;
    function MergeDocuments_3(var SrcDoc: PSafeArray; Options: PdfDocumentMergingOptions): IGdPicturePDF; safecall;
    function MoveBookmark(BookmarkID: Integer; BookmarkDestID: Integer; Before: WordBool): GdPictureStatus; safecall;
    function MoveBookmarkDown(BookmarkID: Integer): GdPictureStatus; safecall;
    function MoveBookmarkUp(BookmarkID: Integer): GdPictureStatus; safecall;
    function MovePage(PageNo: Integer; Destination: Integer): GdPictureStatus; safecall;
    function NewActionGoTo(DestinationType: PdfDestinationType; Page: Integer; Left: Single; 
                           Right: Single; Bottom: Single; Top: Single; Zoom: Single): Integer; safecall;
    function NewActionGoToR(DestinationType: PdfDestinationType; const FilePath: WideString; 
                            NewWindow: WordBool; Page: Integer; Left: Single; Right: Single; 
                            Bottom: Single; Top: Single; Zoom: Single): Integer; safecall;
    function NewActionJavaScript(const JavaScript: WideString): Integer; safecall;
    function NewActionLaunch(const FileName: WideString; const DefaultDirectory: WideString; 
                             const Parameters: WideString; Operation: PdfActionLaunchOperation; 
                             NewWindow: WordBool): Integer; safecall;
    function NewActionNamed(Name: PdfActionNamed): Integer; safecall;
    function NewActionURI(const Uri: WideString; IsMap: WordBool): Integer; safecall;
    function NewBookmark(ParentBookmarkID: Integer; const Title: WideString): Integer; safecall;
    function NewOCG(const Title: WideString): Integer; safecall;
    function NewPage(PageWidth: Single; PageHeight: Single): GdPictureStatus; safecall;
    function NewPage_2(PageSize: PdfPageSizes): GdPictureStatus; safecall;
    function NewPDF: GdPictureStatus; safecall;
    function NewPDF_3(Conformance: PdfConformance): GdPictureStatus; safecall;
    function NewTag(ParentTagID: Integer; const StructType: WideString): Integer; safecall;
    function NormalizePage: GdPictureStatus; safecall;
    function OcrPage(const Dictionary: WideString; const DictionaryPath: WideString; 
                     const CharWhiteList: WideString; DPI: Single): GdPictureStatus; safecall;
    function OcrPages(const PageRange: WideString; ThreadCount: Integer; 
                      const Dictionary: WideString; const DictionaryPath: WideString; 
                      const CharWhiteList: WideString; DPI: Single): GdPictureStatus; safecall;
    function OcrPages_4(const PageRange: WideString; ThreadCount: Integer; 
                        const Dictionary: WideString; const DictionaryPath: WideString; 
                        const CharWhiteList: WideString; DPI: Single; OCRMode: OCRMode; 
                        TimeoutMillisec: Integer; Sync: WordBool): GdPictureStatus; safecall;
    function PackFonts: GdPictureStatus; safecall;
    function PageHasShape: WordBool; safecall;
    function PageHasText: WordBool; safecall;
    function PageHasText_2(IgnoreHiddenText: WordBool): WordBool; safecall;
    function PortFolioCreate(const FirstFileNameToShow: WideString; ViewMode: PdfPortFolioType): GdPictureStatus; safecall;
    function PortFolioCreate_2(FirstFileToShowIdx: Integer; ViewMode: PdfPortFolioType): GdPictureStatus; safecall;
    function PortFolioDelete: GdPictureStatus; safecall;
    function Print: GdPictureStatus; safecall;
    function PrintDialog: WordBool; safecall;
    function PrintDialogFit: WordBool; safecall;
    function PrintFit: GdPictureStatus; safecall;
    function PrintGetActivePrinter: WideString; safecall;
    function PrintGetAlignment: PrintAlignment; safecall;
    function PrintGetCollate: WordBool; safecall;
    function PrintGetColorMode: PrinterColorMode; safecall;
    function PrintGetCopies: Smallint; safecall;
    function PrintGetDocumentName: WideString; safecall;
    function PrintGetDuplexMode: Duplex; safecall;
    function PrintGetLastError: WideString; safecall;
    procedure PrintGetMargins(var LeftMargin: Single; var TopMargin: Single); safecall;
    function PrintGetOrientation: PrinterOrientation; safecall;
    function PrintGetPaperBin: Integer; safecall;
    function PrintGetPaperHeight: Single; safecall;
    function PrintGetPaperSize: Integer; safecall;
    function PrintGetPaperWidth: Single; safecall;
    function PrintGetPrinterName(PrinterNo: Integer): WideString; safecall;
    function PrintGetPrintersCount: Integer; safecall;
    function PrintGetQuality: PrintQuality; safecall;
    function PrintGetStat: GdPictureStatus; safecall;
    procedure PrintInterop; safecall;
    function PrintSetActivePrinter(const PrinterName: WideString): WordBool; safecall;
    function PrintSetAlignment(ImageAlignment: PrintAlignment): GdPictureStatus; safecall;
    function PrintSetAutoRotation(AutoRotation: WordBool): GdPictureStatus; safecall;
    function PrintSetCollate(Collate: WordBool): GdPictureStatus; safecall;
    function PrintSetColorMode(ColorMode: PrinterColorMode): GdPictureStatus; safecall;
    function PrintSetCopies(Copies: Smallint): GdPictureStatus; safecall;
    function PrintSetDocumentName(const DocumentName: WideString): GdPictureStatus; safecall;
    function PrintSetDuplexMode(DuplexMode: Duplex): GdPictureStatus; safecall;
    function PrintSetFromToPage(FromPage: Integer; ToPage: Integer): GdPictureStatus; safecall;
    function PrintSetOrientation(Orientation: PrinterOrientation): GdPictureStatus; safecall;
    function PrintSetPageSelection(const CustomRange: WideString): GdPictureStatus; safecall;
    function PrintSetPaperBin(PaperBin: Integer): WordBool; safecall;
    function PrintSetPreRasterization(PreRasterization: WordBool): GdPictureStatus; safecall;
    function PrintSetPreRasterizationDPI(DPI: Single): GdPictureStatus; safecall;
    function PrintSetQuality(Quality: PrintQuality): GdPictureStatus; safecall;
    function PrintSetShowPrintingProgress(Show: WordBool): GdPictureStatus; safecall;
    function PrintSetStdPaperSize(PaperSize: Integer): GdPictureStatus; safecall;
    function PrintSetUserPaperSize(PaperWidth: Single; PaperHeight: Single): GdPictureStatus; safecall;
    function PrintShowPrinterSettingsDialog(HANDLE: Integer): GdPictureStatus; safecall;
    function RemoveAnnotation(AnnotationIdx: Integer): GdPictureStatus; safecall;
    function RemoveBookmark(BookmarkID: Integer): GdPictureStatus; safecall;
    function RemoveBookmarks: GdPictureStatus; safecall;
    function RemoveFormField(FieldId: Integer): GdPictureStatus; safecall;
    function RemoveFormFields: GdPictureStatus; safecall;
    function RemoveJavaScript(Options: PdfRemoveJavaScriptOptions): GdPictureStatus; safecall;
    function RemovePageLink(LinkIdx: Integer): GdPictureStatus; safecall;
    function RemovePageLinks: GdPictureStatus; safecall;
    function RemoveSignature(SignatureIdx: Integer): GdPictureStatus; safecall;
    function RemoveUnusedResources: GdPictureStatus; safecall;
    function RenderPageToGdPictureImage(DPI: Single; RenderFormFields: WordBool): Integer; safecall;
    function RenderPageToGdPictureImageEx(DPI: Single; RenderFormFields: WordBool): Integer; safecall;
    function RenderPageToGdPictureImageEx_2(DPI: Single; RenderFormFields: WordBool; 
                                            PixelFormat: PixelFormat): Integer; safecall;
    function RenderPageToGdPictureImage_2(DPI: Single; RenderFormFields: WordBool; 
                                          PixelFormat: PixelFormat): Integer; safecall;
    function RenderPageToGdPictureImage_3(DPI: Single; RenderFormFields: WordBool; 
                                          KeepTransparency: WordBool): Integer; safecall;
    function ReplaceImage(const ImageResName: WideString; ImageID: Integer; ImageMask: WordBool): GdPictureStatus; safecall;
    function ReplaceImageMRC(const ImageResName: WideString; ImageID: Integer): GdPictureStatus; safecall;
    function ReplaceImage_2(const ImageResName: WideString; ImageID: Integer; ImageMask: WordBool; 
                            CheckSize: WordBool): GdPictureStatus; safecall;
    function ResetFormFieldCheckedState(FieldId: Integer): GdPictureStatus; safecall;
    function ResetFormFieldDefaultCheckedState(FieldId: Integer): GdPictureStatus; safecall;
    function ResetGraphicsState: GdPictureStatus; safecall;
    function ResizePage(NewPageWidth: Single; NewPageHeight: Single): GdPictureStatus; safecall;
    function RestoreGraphicsState: GdPictureStatus; safecall;
    function RotatePage(Rotation: Integer): GdPictureStatus; safecall;
    function RotatePageEx(Angle: Single): GdPictureStatus; safecall;
    function RotatePages(Rotation: Integer): GdPictureStatus; safecall;
    function SaveGraphicsState: GdPictureStatus; safecall;
    function SaveToFile(const FilePath: WideString): GdPictureStatus; safecall;
    function SaveToFileInc(const FilePath: WideString): GdPictureStatus; safecall;
    function SaveToFile_2(const FilePath: WideString; PackDocument: WordBool): GdPictureStatus; safecall;
    function SaveToFile_3(const FilePath: WideString; PackDocument: WordBool; Linearize: WordBool): GdPictureStatus; safecall;
    function SaveToFile_4(const FilePath: WideString; EncryptionScheme: PdfEncryption; 
                          const UserPass: WideString; const OwnerPass: WideString; 
                          CanPrint: WordBool; CanCopy: WordBool; CanModify: WordBool; 
                          CanAddNotes: WordBool; CanFillFields: WordBool; CanCopyAccess: WordBool; 
                          CanAssemble: WordBool; CanPrintFull: WordBool): GdPictureStatus; safecall;
    function SaveToIStream(const Stream: IUnknown; PackDocument: WordBool): GdPictureStatus; safecall;
    function SaveToIStreamInc(const Stream: IUnknown): GdPictureStatus; safecall;
    function SaveToIStream_2(const Stream: IUnknown; EncryptionScheme: PdfEncryption; 
                             const UserPass: WideString; const OwnerPass: WideString; 
                             CanPrint: WordBool; CanCopy: WordBool; CanModify: WordBool; 
                             CanAddNotes: WordBool; CanFillFields: WordBool; 
                             CanCopyAccess: WordBool; CanAssemble: WordBool; CanPrintFull: WordBool): GdPictureStatus; safecall;
    function ScalePage(ScaleX: Single; ScaleY: Single): GdPictureStatus; safecall;
    function SearchText(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                        WholeWords: WordBool; var Left: Single; var Top: Single; var Width: Single; 
                        var Height: Single): WordBool; safecall;
    function SearchText_2(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool; OrdinalComparison: WordBool; var Left: Single; 
                          var Top: Single; var Width: Single; var Height: Single): WordBool; safecall;
    function SelectPage(PageNo: Integer): GdPictureStatus; safecall;
    function SetAnnotationAction(AnnotationIdx: Integer; ActionID: Integer): GdPictureStatus; safecall;
    function SetAnnotationColor(AnnotationIdx: Integer; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function SetAnnotationColor_2(AnnotationIdx: Integer; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                  Black: Byte): GdPictureStatus; safecall;
    function SetAnnotationContents(AnnotationIdx: Integer; const Contents: WideString): GdPictureStatus; safecall;
    function SetAnnotationFillColor(AnnotationIdx: Integer; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function SetAnnotationFillColor_2(AnnotationIdx: Integer; Cyan: Byte; Magenta: Byte; 
                                      Yellow: Byte; Black: Byte): GdPictureStatus; safecall;
    function SetAnnotationFlags(AnnotationIdx: Integer; Flags: PdfAnnotationFlag): GdPictureStatus; safecall;
    function SetAnnotationName(AnnotationIdx: Integer; const Name: WideString): GdPictureStatus; safecall;
    function SetAnnotationOpacity(AnnotationIdx: Integer; Opacity: Byte): GdPictureStatus; safecall;
    function SetAnnotationRect(AnnotationIdx: Integer; Left: Single; Top: Single; Width: Single; 
                               Height: Single): GdPictureStatus; safecall;
    function SetAnnotationSubject(AnnotationIdx: Integer; const Subject: WideString): GdPictureStatus; safecall;
    function SetAnnotationTitle(AnnotationIdx: Integer; const Title: WideString): GdPictureStatus; safecall;
    procedure SetAuthor(const Author: WideString); safecall;
    function SetBlendMode(BlendMode: PdfBlendMode): GdPictureStatus; safecall;
    function SetBookmarkAction(BookmarkID: Integer; ActionID: Integer): GdPictureStatus; safecall;
    function SetBookmarkColor(BookmarkID: Integer; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function SetBookmarkColor_2(BookmarkID: Integer; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                Black: Byte): GdPictureStatus; safecall;
    function SetBookmarkTextAttribute(BookmarkID: Integer; Attribute: Integer): GdPictureStatus; safecall;
    function SetBookmarkTitle(BookmarkID: Integer; const Title: WideString): GdPictureStatus; safecall;
    function SetCertificate(const CertPath: WideString; const PFXPassword: WideString): GdPictureStatus; safecall;
    procedure SetCompressionForBitonalImage(Compression: PdfCompression); safecall;
    procedure SetCompressionForColorImage(Compression: PdfCompression); safecall;
    procedure SetCreator(const Creator: WideString); safecall;
    function SetCustomPDFInformation(const Key: WideString; const Value: WideString): GdPictureStatus; safecall;
    function SetFillAlpha(Alpha: Byte): GdPictureStatus; safecall;
    function SetFillColor(Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function SetFillColor_2(Cyan: Byte; Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; safecall;
    function SetFormFieldAction(FieldId: Integer; ActionID: Integer): GdPictureStatus; safecall;
    function SetFormFieldAlternateTitle(FieldId: Integer; const AlternateTitle: WideString): GdPictureStatus; safecall;
    function SetFormFieldBackgroundColor(FieldId: Integer; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function SetFormFieldBackgroundColor_2(FieldId: Integer; Cyan: Byte; Magenta: Byte; 
                                           Yellow: Byte; Black: Byte): GdPictureStatus; safecall;
    function SetFormFieldBackgroundColor_3(FieldId: Integer; ChildIdx: Integer; Red: Byte; 
                                           Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function SetFormFieldBackgroundColor_4(FieldId: Integer; ChildIdx: Integer; Cyan: Byte; 
                                           Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; safecall;
    function SetFormFieldBorderColor(FieldId: Integer; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function SetFormFieldBorderColor_2(FieldId: Integer; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                       Black: Byte): GdPictureStatus; safecall;
    function SetFormFieldBorderColor_3(FieldId: Integer; ChildIdx: Integer; Red: Byte; Green: Byte; 
                                       Blue: Byte): GdPictureStatus; safecall;
    function SetFormFieldBorderColor_4(FieldId: Integer; ChildIdx: Integer; Cyan: Byte; 
                                       Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; safecall;
    function SetFormFieldBorderStyle(FieldId: Integer; BorderWidth: Single; 
                                     BorderStyle: PdfAnnotationBorderStyle; DashOn: Single; 
                                     DashOff: Single): GdPictureStatus; safecall;
    function SetFormFieldBorderStyle_2(FieldId: Integer; ChildIdx: Integer; BorderWidth: Single; 
                                       BorderStyle: PdfAnnotationBorderStyle; DashOn: Single; 
                                       DashOff: Single): GdPictureStatus; safecall;
    function SetFormFieldCheckBoxStyle(FieldId: Integer; CheckStyle: PdfCheckBoxStyle): GdPictureStatus; safecall;
    function SetFormFieldCheckBoxStyle_2(FieldId: Integer; ChildIdx: Integer; 
                                         CheckStyle: PdfCheckBoxStyle): GdPictureStatus; safecall;
    function SetFormFieldChecked(FieldId: Integer; Checked: WordBool): GdPictureStatus; safecall;
    function SetFormFieldChecked_2(FieldId: Integer; ChildIdx: Integer): GdPictureStatus; safecall;
    function SetFormFieldComb(FieldId: Integer; Comb: WordBool): GdPictureStatus; safecall;
    function SetFormFieldDefaultChecked(FieldId: Integer; Checked: WordBool): GdPictureStatus; safecall;
    function SetFormFieldDefaultChecked_2(FieldId: Integer; ChildIdx: Integer): GdPictureStatus; safecall;
    function SetFormFieldDefaultValue(FieldId: Integer; const DefaultValue: WideString): GdPictureStatus; safecall;
    function SetFormFieldDoNotScroll(FieldId: Integer; DoNotScroll: WordBool): GdPictureStatus; safecall;
    function SetFormFieldDoNotSpellCheck(FieldId: Integer; SpellCheck: WordBool): GdPictureStatus; safecall;
    function SetFormFieldFileSelect(FieldId: Integer; FileSelect: WordBool): GdPictureStatus; safecall;
    function SetFormFieldFontColor(FieldId: Integer; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function SetFormFieldFontColor_2(FieldId: Integer; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                     Black: Byte): GdPictureStatus; safecall;
    function SetFormFieldFontColor_3(FieldId: Integer; ChildIdx: Integer; Red: Byte; Green: Byte; 
                                     Blue: Byte): GdPictureStatus; safecall;
    function SetFormFieldFontColor_4(FieldId: Integer; ChildIdx: Integer; Cyan: Byte; 
                                     Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; safecall;
    function SetFormFieldFontResName(FieldId: Integer; const FontResName: WideString): GdPictureStatus; safecall;
    function SetFormFieldFontSize(FieldId: Integer; FontSize: Single): GdPictureStatus; safecall;
    function SetFormFieldFontSize_2(FieldId: Integer; ChildIdx: Integer; FontSize: Single): GdPictureStatus; safecall;
    function SetFormFieldItemCommit(FieldId: Integer; Commit: WordBool): GdPictureStatus; safecall;
    function SetFormFieldItemEdit(FieldId: Integer; Editable: WordBool): GdPictureStatus; safecall;
    function SetFormFieldItemSort(FieldId: Integer; Sorted: WordBool): GdPictureStatus; safecall;
    function SetFormFieldLocation(FieldId: Integer; Left: Single; Top: Single; Right: Single; 
                                  Bottom: Single): GdPictureStatus; safecall;
    function SetFormFieldMaxLen(FieldId: Integer; MaxLen: Integer): GdPictureStatus; safecall;
    function SetFormFieldMultiLine(FieldId: Integer; MultiLine: WordBool): GdPictureStatus; safecall;
    function SetFormFieldMultiSelect(FieldId: Integer; Multiselect: WordBool): GdPictureStatus; safecall;
    function SetFormFieldNoBackgroundColor(FieldId: Integer): GdPictureStatus; safecall;
    function SetFormFieldNoBackgroundColor_2(FieldId: Integer; ChildIdx: Integer): GdPictureStatus; safecall;
    function SetFormFieldNoBorderColor(FieldId: Integer): GdPictureStatus; safecall;
    function SetFormFieldNoBorderColor_2(FieldId: Integer; ChildIdx: Integer): GdPictureStatus; safecall;
    function SetFormFieldNormalCaption(FieldId: Integer; const NormalCaption: WideString): GdPictureStatus; safecall;
    function SetFormFieldOnStateName(FieldId: Integer; const OnStateName: WideString): GdPictureStatus; safecall;
    function SetFormFieldOnStateName_2(FieldId: Integer; ChildIdx: Integer; 
                                       const OnStateName: WideString): GdPictureStatus; safecall;
    function SetFormFieldOptional(FieldId: Integer; OCGId: Integer): GdPictureStatus; safecall;
    function SetFormFieldPassword(FieldId: Integer; Password: WordBool): GdPictureStatus; safecall;
    function SetFormFieldRadioInUnison(FieldId: Integer; Unison: WordBool): GdPictureStatus; safecall;
    function SetFormFieldReadOnly(FieldId: Integer; ROnly: WordBool): GdPictureStatus; safecall;
    function SetFormFieldRequired(FieldId: Integer; Required: WordBool): GdPictureStatus; safecall;
    function SetFormFieldRichText(FieldId: Integer; RichText: WordBool): GdPictureStatus; safecall;
    function SetFormFieldRotation(FieldId: Integer; Rotation: Integer): GdPictureStatus; safecall;
    function SetFormFieldsNeedAppearances(NeedAppearances: WordBool): GdPictureStatus; safecall;
    function SetFormFieldTextAlignment(FieldId: Integer; TextAlign: TextAlignment): GdPictureStatus; safecall;
    function SetFormFieldTitle(FieldId: Integer; const Title: WideString): GdPictureStatus; safecall;
    function SetFormFieldValue(FieldId: Integer; const Value: WideString): GdPictureStatus; safecall;
    function SetFormFieldValue_2(FieldId: Integer; const Value: WideString; 
                                 const Separator: WideString): GdPictureStatus; safecall;
    function SetFormFieldVisibility(FieldId: Integer; Visibility: PdfFormFieldVisibility): GdPictureStatus; safecall;
    function SetImageOptional(const ImageResName: WideString; OCGId: Integer): GdPictureStatus; safecall;
    procedure SetJpeg2000Quality(Quality: Integer); safecall;
    procedure SetJpegQuality(Quality: Integer); safecall;
    procedure SetKeywords(const Keywords: WideString); safecall;
    function SetLanguage(const Language: WideString): GdPictureStatus; safecall;
    function SetLineAlpha(Alpha: Byte): GdPictureStatus; safecall;
    function SetLineCapStyle(LineCap: PdfLineCapStyle): GdPictureStatus; safecall;
    function SetLineColor(Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function SetLineColor_2(Cyan: Byte; Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; safecall;
    function SetLineDash(DashOn: Single; DashOff: Single): GdPictureStatus; safecall;
    function SetLineDash_2(var DashPattern: PSafeArray): GdPictureStatus; safecall;
    function SetLineJoinStyle(LineJoin: PdfLineJoinStyle): GdPictureStatus; safecall;
    function SetLineNoDash: GdPictureStatus; safecall;
    function SetLineWidth(LineWidth: Single): GdPictureStatus; safecall;
    procedure SetMeasurementUnit(UnitMode: PdfMeasurementUnit); safecall;
    function SetMetadata(const XMP: WideString): GdPictureStatus; safecall;
    procedure SetMRCImageBackgroundResolution(Resolution: Single); safecall;
    procedure SetMRCPreserveSmoothing(PreserveSmoothing: WordBool); safecall;
    function SetOCGExportState(OCGId: Integer; ExportState: PdfOcgState): GdPictureStatus; safecall;
    function SetOCGLockedState(OCGId: Integer; Locked: WordBool): GdPictureStatus; safecall;
    function SetOCGPrintState(OCGId: Integer; PrintState: PdfOcgState): GdPictureStatus; safecall;
    function SetOCGTitle(OCGId: Integer; const Title: WideString): GdPictureStatus; safecall;
    function SetOCGViewState(OCGId: Integer; ViewState: PdfOcgState): GdPictureStatus; safecall;
    function SetOCGZoomMax(OCGId: Integer; ZoomMax: Single): GdPictureStatus; safecall;
    function SetOCGZoomMin(OCGId: Integer; ZoomMin: Single): GdPictureStatus; safecall;
    procedure SetOrigin(Origin: PdfOrigin); safecall;
    function SetPageBox(PageBox: PdfPageBox; Left: Single; Top: Single; Right: Single; 
                        Bottom: Single): GdPictureStatus; safecall;
    function SetPageContent(const Content: WideString): GdPictureStatus; safecall;
    function SetPageLabelsRangeNumPortion(LabelingRangeIdx: Integer; NumPortion: Integer): GdPictureStatus; safecall;
    function SetPageLabelsRangePrefix(LabelingRangeIdx: Integer; const Prefix: WideString): GdPictureStatus; safecall;
    function SetPageLabelsRangeStartPage(LabelingRangeIdx: Integer; StartPage: Integer): GdPictureStatus; safecall;
    function SetPageLabelsRangeStyle(LabelingRangeIdx: Integer; Style: PdfPageLabelStyle): GdPictureStatus; safecall;
    function SetPageMetadata(const XMP: WideString): GdPictureStatus; safecall;
    function SetPagePrivateTag(const Tag: WideString; const Content: WideString): GdPictureStatus; safecall;
    procedure SetPageUserUnit(UserUnit: Single); safecall;
    function SetPassword(const Password: WideString): GdPictureStatus; safecall;
    function SetPrependContentMode(Enable: WordBool): GdPictureStatus; safecall;
    procedure SetProducer(const Producer: WideString); safecall;
    function SetSignatureCertificateFromP12(const CertPath: WideString; 
                                            const PFXPassword: WideString): GdPictureStatus; safecall;
    function SetSignatureCertificateFromSmartCard(const ProviderName: WideString; 
                                                  const KeyContainerName: WideString; 
                                                  const PinCode: WideString): GdPictureStatus; safecall;
    function SetSignatureCertificateFromSmartCardBySerialNumber(const SerialNumber: WideString; 
                                                                const PinCode: WideString): GdPictureStatus; safecall;
    function SetSignatureCertificateFromStore(const SerialNumber: WideString): GdPictureStatus; safecall;
    function SetSignatureCertificationLevel(Level: PdfSignatureCertificationLevel): GdPictureStatus; safecall;
    function SetSignatureHash(hashAlg: PdfSignatureHash): GdPictureStatus; safecall;
    function SetSignatureInfo(const Name: WideString; const Reason: WideString; 
                              const Location: WideString; const ContactInfo: WideString): GdPictureStatus; safecall;
    function SetSignaturePos(StampLeft: Single; StampBottom: Single; StampWidth: Single; 
                             StampHeight: Single): GdPictureStatus; safecall;
    function SetSignaturePosFromPlaceHolder(SignatureIdx: Integer): GdPictureStatus; safecall;
    function SetSignaturePosFromPlaceHolder_2(const SignatureName: WideString): GdPictureStatus; safecall;
    function SetSignatureStampImage(const StampResName: WideString): GdPictureStatus; safecall;
    function SetSignatureText(const Text: WideString; const FontResName: WideString; 
                              FontSize: Single; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                              Black: Byte; AlignHorz: TextAlignment; AlignVert: TextAlignment; 
                              ShowText: WordBool): GdPictureStatus; safecall;
    function SetSignatureText_2(const Text: WideString; const FontResName: WideString; 
                                FontSize: Single; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                Black: Byte; AlignHorz: TextAlignment; AlignVert: TextAlignment; 
                                TextDecorationStyle: PdfTextDecorationStyle; ShowText: WordBool): GdPictureStatus; safecall;
    function SetSignatureTimestampInfo(const TSURL: WideString; const TSUsername: WideString; 
                                       const TSUserpass: WideString): GdPictureStatus; safecall;
    function SetSignatureValidationMark(ShowValidationMark: WordBool): GdPictureStatus; safecall;
    procedure SetSubject(const Subject: WideString); safecall;
    function SetTagActualText(TagID: Integer; const ActualText: WideString): GdPictureStatus; safecall;
    function SetTagAlternateDescription(TagID: Integer; const AlternateDescription: WideString): GdPictureStatus; safecall;
    function SetTagAttribute(TagID: Integer; const Key: WideString; const Value: WideString): GdPictureStatus; safecall;
    function SetTagAttribute_2(TagID: Integer; const Key: WideString; var Value: PSafeArray): GdPictureStatus; safecall;
    function SetTagAttribute_3(TagID: Integer; const Key: WideString; Value: Double): GdPictureStatus; safecall;
    function SetTagAttribute_4(TagID: Integer; const Key: WideString; var Value: PSafeArray): GdPictureStatus; safecall;
    function SetTagLanguage(TagID: Integer; const Language: WideString): GdPictureStatus; safecall;
    function SetTagTitle(TagID: Integer; const Title: WideString): GdPictureStatus; safecall;
    function SetTextCharSpacing(CharSpacing: Single): GdPictureStatus; safecall;
    procedure SetTextExtractionOptions(Options: TextExtractionOptions); safecall;
    function SetTextMode(TextMode: PdfTextMode): GdPictureStatus; safecall;
    function SetTextRise(Rise: Single): GdPictureStatus; safecall;
    function SetTextScaling(Scaling: Single): GdPictureStatus; safecall;
    function SetTextSize(TextSize: Single): GdPictureStatus; safecall;
    function SetTextWordSpacing(WordSpacing: Single): GdPictureStatus; safecall;
    procedure SetTitle(const Title: WideString); safecall;
    function SetViewerLayoutMode(LayoutMode: PdfViewerLayoutMode): GdPictureStatus; safecall;
    function SetViewerNonFullScreenPageMode(NonFullScreenPageMode: PdfViewerNonFullScreenPageMode): GdPictureStatus; safecall;
    function SetViewerOpenAction(ActionID: Integer): GdPictureStatus; safecall;
    function SetViewerPageMode(PageMode: PdfViewerPageMode): GdPictureStatus; safecall;
    function SetViewerPreference(Preference: PdfViewerPreference; Enable: WordBool): GdPictureStatus; safecall;
    function StrokePath: GdPictureStatus; safecall;
    function SwapPages(Page1: Integer; Page2: Integer): GdPictureStatus; safecall;
    function FlattenAnnotation(AnnotationIdx: Integer): GdPictureStatus; safecall;
    procedure ReleaseEventsTarget; safecall;
    function MergePages(var Pages: PSafeArray; RemovePages: WordBool): GdPictureStatus; safecall;
    procedure SetOverrideOcrEngine(Override: WordBool); safecall;
    function GetOverrideOcrEngine: WordBool; safecall;
    procedure SetOcrPageOrientationDetection(Enabled: WordBool); safecall;
    function AddRedactionRegion(Left: Single; Top: Single; Width: Single; Height: Single): GdPictureStatus; safecall;
    function AddRedactionRegion_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                  Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function AddRedactionRegion_3(Left: Single; Top: Single; Width: Single; Height: Single; 
                                  Red: Byte; Green: Byte; Blue: Byte; Alpha: Byte): GdPictureStatus; safecall;
    function ApplyRedaction: GdPictureStatus; safecall;
    procedure ClearRedactionRegions; safecall;
    function Repair: GdPictureStatus; safecall;
    function RemoveHiddenText: GdPictureStatus; safecall;
    function ClearCachedResources: GdPictureStatus; safecall;
    function DeletePagePieceInfo: GdPictureStatus; safecall;
    function HasInvisibleText: WordBool; safecall;
    function RemoveAllText: GdPictureStatus; safecall;
    function SetTextDecorationStyle(TextDecorationStyle: PdfTextDecorationStyle): GdPictureStatus; safecall;
    function SetTextUnderlineWidth(TextDecorationLineWidth: Single): GdPictureStatus; safecall;
    function SetTextUnderlineColor(Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; safecall;
    function SetTextUnderlineStyle(TextUnderlineStyle: PdfTextUnderlineStyle): GdPictureStatus; safecall;
    function SetTextUnderlineDistance(TextUnderlineDistance: Single): GdPictureStatus; safecall;
    function RemoveTextArea(Left: Single; Top: Single; Width: Single; Height: Single): GdPictureStatus; safecall;
    function GetPageTextWithCoords_2(const FieldSeparator: WideString; 
                                     Options: TextExtractionOutputInfo): WideString; safecall;
    function FlattenVisibleOCGs: GdPictureStatus; safecall;
    function ClonePages(const FromPDF: IGdPicturePDF; const PageRange: WideString): GdPictureStatus; safecall;
    function SearchText_3(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool; OrdinalComparison: WordBool; 
                          var BoundingBoxes: PSafeArray): WordBool; safecall;
    function RemovePageBox(PageBox: PdfPageBox): GdPictureStatus; safecall;
    function IsTagged: WordBool; safecall;
    function UnembedFont(FontIdx: Integer): GdPictureStatus; safecall;
    function AddFileAttachmentAnnot(Left: Single; Top: Single; Width: Single; Height: Single; 
                                    var Data: PSafeArray; const FileName: WideString; 
                                    const Title: WideString; const Description: WideString; 
                                    Red: Byte; Green: Byte; Blue: Byte; Opacity: Single; 
                                    AnnotIcon: PdfFileAttachmentAnnotIcon): Integer; safecall;
    function AddFileAttachmentAnnot_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                      var Data: PSafeArray; const FileName: WideString; 
                                      const Title: WideString; const Description: WideString; 
                                      Cyan: Byte; Magenta: Byte; Yellow: Byte; Black: Byte; 
                                      Opacity: Single; AnnotIcon: PdfFileAttachmentAnnotIcon): Integer; safecall;
    function RemoveXFAFormFieldsData: GdPictureStatus; safecall;
    function SearchTextRegex(const Pattern: WideString; Occurrence: Integer; 
                             CaseSensitive: WordBool; var BoundingBoxes: PSafeArray): WordBool; safecall;
    function IsValidPDFA: WordBool; safecall;
    function IsValidPDFA_2(var DetailedXMLOutput: WideString): WordBool; safecall;
    function IsValidPDFA_3(var DetailedXMLOutput: WideString; 
                           var VerifiedConformance: PdfValidationConformance): WordBool; safecall;
    function CheckPDFAConformance(Conformance: PdfValidationConformance; 
                                  var DetailedXMLOutput: WideString): WordBool; safecall;
    function GetPageImageICCProfile(ImageIdx: Integer; var Data: PSafeArray): GdPictureStatus; safecall;
    function ConvertToGrayscale(Text: WordBool; Graphics: WordBool; Images: WordBool; 
                                Annotations: WordBool; FormFields: WordBool): GdPictureStatus; safecall;
    function SearchText_4(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool; AnyWord: WordBool; OrdinalComparison: WordBool; 
                          var Left: Single; var Top: Single; var Width: Single; var Height: Single): WordBool; safecall;
    function SearchText_5(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool; AnyWord: WordBool; OrdinalComparison: WordBool; 
                          var BoundingBoxes: PSafeArray): WordBool; safecall;
    procedure SetForceRasterizerInterpolation(Forced: WordBool); safecall;
    function OverlayPage(PageNo: Integer; DstX: Single; DstY: Single; ScaleX: Single; ScaleY: Single): GdPictureStatus; safecall;
    function OverlayPage_2(const FromPDF: IGdPicturePDF; PageNo: Integer; DstX: Single; 
                           DstY: Single; ScaleX: Single; ScaleY: Single): GdPictureStatus; safecall;
    function AutoCropPage(MarginLeft: Single; MarginTop: Single; MarginRight: Single; 
                          MarginBottom: Single): GdPictureStatus; safecall;
    function SearchAndHighlight(const Pattern: WideString; CaseSensitive: WordBool; Red: Byte; 
                                Green: Byte; Blue: Byte; Alpha: Byte; var Occurrences: Integer): GdPictureStatus; safecall;
    function ConvertToGrayscale_2(Text: WordBool; Graphics: WordBool; Images: WordBool; 
                                  Annotations: WordBool; FormFields: WordBool; 
                                  RemoveUnusedResources: WordBool): GdPictureStatus; safecall;
    function DropPDFASupport: GdPictureStatus; safecall;
    procedure SetJBIG2PMSThreshold(Threshold: Single); safecall;
    function HasJavaScript: WordBool; safecall;
    function RemoveAnnotationAction(AnnotationIdx: Integer): GdPictureStatus; safecall;
    function IsSignatureFieldSigned(SignatureIdx: Integer): WordBool; safecall;
    function GridSplit(RowCount: Integer; ColumnCount: Integer; Ordering: PdfGridSplitOrdering): GdPictureStatus; safecall;
    function GridSplit_2(var RowStops: PSafeArray; var ColStops: PSafeArray; 
                         Ordering: PdfGridSplitOrdering): GdPictureStatus; safecall;
    function PageIsBlank: WordBool; safecall;
    function AutoCropPage_2(MarginLeft: Single; MarginTop: Single; MarginRight: Single; 
                            MarginBottom: Single; IgnoreWhiteRectangles: WordBool): GdPictureStatus; safecall;
    function NewActionGoTo_2(DestinationType: PdfDestinationType; Page: Integer; Left: Single; 
                             Right: Single; Bottom: Single; Top: Single; Zoom: Single; 
                             RetainLeft: WordBool; RetainTop: WordBool): Integer; safecall;
    function NewActionGoToR_2(DestinationType: PdfDestinationType; const FilePath: WideString; 
                              NewWindow: WordBool; Page: Integer; Left: Single; Right: Single; 
                              Bottom: Single; Top: Single; Zoom: Single; RetainLeft: WordBool; 
                              RetainTop: WordBool): Integer; safecall;
    function SmartRedaction(const Options: ISmartRedactionOptions): GdPictureStatus; safecall;
    procedure SetSearchTextFuzzyMatch(EnableFuzzyMatch: WordBool); safecall;
    function SearchAndAddRedactionRegions(const Pattern: WideString; CaseSensitive: WordBool; 
                                          Red: Byte; Green: Byte; Blue: Byte; Alpha: Byte; 
                                          var Occurrences: Integer): GdPictureStatus; safecall;
    function SetSignatureAlternateTitle(const AlternateTitle: WideString): GdPictureStatus; safecall;
    function ImportXFDFDataFromIStream(const Stream: IUnknown; ImportFormFields: WordBool; 
                                       ImportAnnotations: WordBool): GdPictureStatus; safecall;
    function ImportXFDFDataFromFile(const FilePath: WideString; ImportFormFields: WordBool; 
                                    ImportAnnotations: WordBool): GdPictureStatus; safecall;
    function GetAnnotationQuadPoints(AnnotationIdx: Integer; var QuadPoints: PSafeArray): GdPictureStatus; safecall;
  end;

// *********************************************************************//
// DispIntf:  IGdPicturePDFDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4862F192-136A-4700-9F1D-0B6164A36B99}
// *********************************************************************//
  IGdPicturePDFDisp = dispinterface
    ['{4862F192-136A-4700-9F1D-0B6164A36B99}']
    function AddCheckBoxFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                                  const FieldName: WideString; Style: PdfCheckBoxStyle; 
                                  Checked: WordBool; CheckMarkRed: Byte; CheckMarkGreen: Byte; 
                                  CheckMarkBlue: Byte): Integer; dispid 1;
    function AddCheckBoxFormField_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                    const FieldName: WideString; Style: PdfCheckBoxStyle; 
                                    Checked: WordBool; CheckMarkCyan: Byte; CheckMarkMagenta: Byte; 
                                    CheckMarkYellow: Byte; CheckMarkBlack: Byte): Integer; dispid 2;
    function AddCircleAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                                 const Title: WideString; const Contents: WideString; 
                                 LineWidth: Single; LineStyle: PdfAnnotationBorderStyle; 
                                 LineDashOn: Single; LineDashOff: Single; Opacity: Single; 
                                 Red: Byte; Green: Byte; Blue: Byte): Integer; dispid 3;
    function AddComboFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                               const FieldName: WideString; const FontResName: WideString; 
                               FontSize: Single; TextRed: Byte; TextGreen: Byte; TextBlue: Byte; 
                               Sorted: WordBool): Integer; dispid 4;
    function AddComboFormField_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                 const FieldName: WideString; const FontResName: WideString; 
                                 FontSize: Single; TextCyan: Byte; TextMagenta: Byte; 
                                 TextYellow: Byte; TextBlack: Byte; Sorted: WordBool): Integer; dispid 5;
    function AddCurveToPath1(X1: Single; Y1: Single; X3: Single; Y3: Single): GdPictureStatus; dispid 6;
    function AddCurveToPath2(X2: Single; Y2: Single; X3: Single; Y3: Single): GdPictureStatus; dispid 7;
    function AddCurveToPath3(X1: Single; Y1: Single; X2: Single; Y2: Single; X3: Single; Y3: Single): GdPictureStatus; dispid 8;
    function AddEllipseToPath(CenterX: Single; CenterY: Single; Width: Single; Height: Single): GdPictureStatus; dispid 9;
    function AddFontFromFileU(const FilePath: WideString; const FontName: WideString; 
                              CharSet: FontCharSet; Bold: WordBool; Italic: WordBool): WideString; dispid 10;
    function AddFormFieldItem(FieldId: Integer; const Text: WideString): GdPictureStatus; dispid 11;
    function AddFormFieldItem_2(FieldId: Integer; const Text: WideString; const Value: WideString): GdPictureStatus; dispid 12;
    function AddFreeTextAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                                   Borders: WordBool; const Title: WideString; 
                                   const Subject: WideString; const Contents: WideString; 
                                   const FontResName: WideString; FontSize: Single; 
                                   FontColorRed: Byte; FontColorGreen: Byte; FontColorBlue: Byte; 
                                   FillColorRed: Byte; FillColorGreen: Byte; FillColorBlue: Byte; 
                                   Opacity: Single): Integer; dispid 13;
    function AddFreeTextAnnotation_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                     Borders: WordBool; const Title: WideString; 
                                     const Subject: WideString; const Contents: WideString; 
                                     const FontResName: WideString; FontSize: Single; 
                                     FontColorCyan: Byte; FontColorMagenta: Byte; 
                                     FontColorYellow: Byte; FontColorBlack: Byte; 
                                     FillColorCyan: Byte; FillColorMagenta: Byte; 
                                     FillColorYellow: Byte; FillColorBlack: Byte; Opacity: Single): Integer; dispid 14;
    function AddImageFromGdPictureImage(ImageID: Integer; ImageMask: WordBool; DrawImage: WordBool): WideString; dispid 16;
    function AddImageFromGdPictureImage_2(ImageID: Integer; 
                                          AvancedCompression: PdfAdvancedImageCompression): GdPictureStatus; dispid 17;
    function AddJpegImageFromFile(const FilePath: WideString): WideString; dispid 18;
    function AddJpegImageFromIStream(const Stream: IUnknown): WideString; dispid 19;
    function AddLineAnnotation(StartX: Single; StartY: Single; DstX: Single; DstY: Single; 
                               const Title: WideString; const Contents: WideString; 
                               StartCap: PdfAnnotationLineEndingStyle; 
                               EndCap: PdfAnnotationLineEndingStyle; ShowContent: WordBool; 
                               LineWidth: Single; LineStyle: PdfAnnotationBorderStyle; 
                               LineDashOn: Single; LineDashOff: Single; Opacity: Single; Red: Byte; 
                               Green: Byte; Blue: Byte): Integer; dispid 20;
    function AddLineToPath(DstX: Single; DstY: Single): GdPictureStatus; dispid 21;
    function AddLinkAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                               Borders: WordBool; Red: Byte; Green: Byte; Blue: Byte): Integer; dispid 22;
    function AddLinkAnnotation_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                 Borders: WordBool; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                 Black: Byte): Integer; dispid 23;
    function AddLinkToPageAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                                     PageNum: Integer; DstLeft: Single; DstTop: Single; 
                                     Borders: WordBool; Red: Byte; Green: Byte; Blue: Byte): Integer; dispid 24;
    function AddLinkToWebAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                                    const Uri: WideString; Borders: WordBool; Red: Byte; 
                                    Green: Byte; Blue: Byte): Integer; dispid 25;
    function AddListFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                              const FieldName: WideString; const FontResName: WideString; 
                              FontSize: Single; TextRed: Byte; TextGreen: Byte; TextBlue: Byte; 
                              Sorted: WordBool; Multiselect: WordBool): Integer; dispid 26;
    function AddListFormField_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                const FieldName: WideString; const FontResName: WideString; 
                                FontSize: Single; TextCyan: Byte; TextMagenta: Byte; 
                                TextYellow: Byte; TextBlack: Byte; Sorted: WordBool; 
                                Multiselect: WordBool): Integer; dispid 27;
    function AddPageLabelsRange(StartPage: Integer; Style: PdfPageLabelStyle; 
                                const Prefix: WideString; NumPortion: Integer): GdPictureStatus; dispid 28;
    function AddPageRotation(Angle: Integer): GdPictureStatus; dispid 29;
    function AddPushButtonFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                                    const FieldName: WideString; const Caption: WideString; 
                                    const FontResName: WideString; FontSize: Single; TextRed: Byte; 
                                    TextGreen: Byte; TextBlue: Byte): Integer; dispid 30;
    function AddPushButtonFormField_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                      const FieldName: WideString; const Caption: WideString; 
                                      const FontResName: WideString; FontSize: Single; 
                                      TextCyan: Byte; TextMagenta: Byte; TextYellow: Byte; 
                                      TextBlack: Byte): Integer; dispid 31;
    function AddRadioButtonFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                                     const GroupName: WideString; const FieldName: WideString; 
                                     Style: PdfCheckBoxStyle; CheckMarkRed: Byte; 
                                     CheckMarkGreen: Byte; CheckMarkBlue: Byte): Integer; dispid 32;
    function AddRadioButtonFormField_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                       const GroupName: WideString; const FieldName: WideString; 
                                       Style: PdfCheckBoxStyle; CheckMarkCyan: Byte; 
                                       CheckMarkMagenta: Byte; CheckMarkYellow: Byte; 
                                       CheckMarkBlack: Byte): Integer; dispid 33;
    function AddRotationAt(Angle: Single; AtX: Single; AtY: Single): GdPictureStatus; dispid 34;
    function AddSignatureFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                                   const FieldName: WideString): Integer; dispid 35;
    function AddSquareAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                                 const Title: WideString; const Contents: WideString; 
                                 LineWidth: Single; LineStyle: PdfAnnotationBorderStyle; 
                                 LineDashOn: Single; LineDashOff: Single; Opacity: Single; 
                                 Red: Byte; Green: Byte; Blue: Byte): Integer; dispid 36;
    function AddStampAnnotation(Left: Single; Top: Single; Width: Single; Height: Single; 
                                const Title: WideString; const Contents: WideString; 
                                StampStyle: PdfRubberStampAnnotationIcon; Opacity: Single; 
                                Red: Byte; Green: Byte; Blue: Byte): Integer; dispid 37;
    function AddStandardFont(StdFont: PdfStandardFont): WideString; dispid 38;
    function AddStickyNoteAnnotation(IconName: PdfStickyNoteAnnotationIcon; Left: Single; 
                                     Top: Single; const Author: WideString; 
                                     const Subject: WideString; const Contents: WideString; 
                                     Opacity: Single; OpenPopup: WordBool; Red: Byte; Green: Byte; 
                                     Blue: Byte; PopupLeft: Single; PopupTop: Single; 
                                     PopupWidth: Single; PopupHeight: Single): Integer; dispid 39;
    function AddTextFormField(Left: Single; Top: Single; Width: Single; Height: Single; 
                              const FieldName: WideString; const Text: WideString; 
                              MultiLines: WordBool; const FontResName: WideString; 
                              FontSize: Single; TextRed: Byte; TextGreen: Byte; TextBlue: Byte): Integer; dispid 40;
    function AddTextFormField_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                const FieldName: WideString; const Text: WideString; 
                                MultiLines: WordBool; const FontResName: WideString; 
                                FontSize: Single; TextCyan: Byte; TextMagenta: Byte; 
                                TextYellow: Byte; TextBlack: Byte): Integer; dispid 41;
    function AddTransformationMatrix(a: Single; b: Single; c: Single; d: Single; e: Single; 
                                     f: Single): GdPictureStatus; dispid 42;
    function AddTrueTypeFont(const FontName: WideString; Bold: WordBool; Italic: WordBool; 
                             Embedded: WordBool): WideString; dispid 43;
    function AddTrueTypeFontFromFile(const FilePath: WideString; Bold: WordBool; Italic: WordBool; 
                                     Embedded: WordBool): WideString; dispid 44;
    function AddTrueTypeFontFromFileU(const FilePath: WideString; const FileName: WideString; 
                                      Bold: WordBool; Italic: WordBool; EnableSubset: WordBool): WideString; dispid 45;
    function AddTrueTypeFontU(const FontName: WideString; CharSet: FontCharSet; Bold: WordBool; 
                              Italic: WordBool): WideString; dispid 46;
    function AddTrueTypeFontU_2(const FontName: WideString; Bold: WordBool; Italic: WordBool; 
                                EnableSubset: WordBool): WideString; dispid 47;
    function ApplySignature(const OutputFileName: WideString; SignatureMode: PdfSignatureMode; 
                            Linearization: WordBool): GdPictureStatus; dispid 48;
    function AttachTagToAnnotation(TagID: Integer; AnnotationIdx: Integer): GdPictureStatus; dispid 49;
    function AttachTagToFormField(TagID: Integer; FieldId: Integer): GdPictureStatus; dispid 50;
    function AutoDeskew(MaxAngleOfResearch: Single; Optimistic: WordBool): Single; dispid 51;
    function BeginMarkedContent(const StructType: WideString): GdPictureStatus; dispid 52;
    function BeginMarkedContentSequence(TagID: Integer; const StructType: WideString): GdPictureStatus; dispid 53;
    function BeginOCGMarkedContent(OCGId: Integer): GdPictureStatus; dispid 54;
    function BeginPath(DstX: Single; DstY: Single): GdPictureStatus; dispid 55;
    function BeginXObjectForm(Width: Single; Height: Single): WideString; dispid 56;
    function ClearPageContent: GdPictureStatus; dispid 57;
    function ClipPath: GdPictureStatus; dispid 58;
    function ClipPathOdd: GdPictureStatus; dispid 59;
    function ClonePage(PageNo: Integer): GdPictureStatus; dispid 60;
    function ClonePage_2(const FromPDF: IGdPicturePDF; PageNo: Integer): GdPictureStatus; dispid 61;
    function CloseAndFillAndStrokePath: GdPictureStatus; dispid 62;
    function CloseAndFillAndStrokePathOdd: GdPictureStatus; dispid 63;
    function CloseAndStrokePath: GdPictureStatus; dispid 64;
    function CloseDocument: GdPictureStatus; dispid 65;
    function ClosePath: GdPictureStatus; dispid 66;
    function ConvertToPDFA(const FilePath: WideString; Conformance: PdfConversionConformance; 
                           AllowVectorization: WordBool; AllowRasterization: WordBool): GdPictureStatus; dispid 67;
    function CreateFromText(Conformance: PdfConformance; PageWidth: Single; PageHeight: Single; 
                            MarginLeft: Single; MarginTop: Single; MarginRight: Single; 
                            MarginBottom: Single; TextAlignment: TextAlignment; 
                            const Text: WideString; TextSize: Single; const FontName: WideString; 
                            FontBold: WordBool; FontItalic: WordBool; Embedded: WordBool; 
                            UseFontBbox: WordBool): GdPictureStatus; dispid 68;
    function DeleteCustomPDFInformation(const Key: WideString): GdPictureStatus; dispid 69;
    function DeleteEmbeddedFile(FileIdx: Integer): GdPictureStatus; dispid 70;
    function DeleteFormFieldItem(FieldId: Integer; ItemIdx: Integer): GdPictureStatus; dispid 71;
    function DeleteImage(const ImageResName: WideString): GdPictureStatus; dispid 72;
    function DeleteOCG(OCGId: Integer): GdPictureStatus; dispid 73;
    function DeleteOCG_2(OCGId: Integer; RemoveContent: WordBool): GdPictureStatus; dispid 618;
    function DeletePage(PageNo: Integer): GdPictureStatus; dispid 74;
    function DeletePageLabels: GdPictureStatus; dispid 75;
    function DeletePageLabelsRange(LabelingRangeIdx: Integer): GdPictureStatus; dispid 76;
    function DeletePagePrivateTag(const Tag: WideString): GdPictureStatus; dispid 77;
    function DeletePageThumbnailImage: GdPictureStatus; dispid 78;
    procedure Dispose; dispid 79;
    function DrawArc(Left: Single; Top: Single; Radius: Single; StartAngle: Single; 
                     EndAngle: Single; Close: WordBool; Fill: WordBool; Stroke: WordBool): GdPictureStatus; dispid 81;
    function DrawBarcode1D(BarcodeType: Barcode1DWriterType; const Data: WideString; DstX: Single; 
                           DstY: Single; DstWidth: Single; DstHeight: Single; Red: Byte; 
                           Green: Byte; Blue: Byte): GdPictureStatus; dispid 82;
    function DrawBarcode1D_2(BarcodeType: Barcode1DWriterType; const Data: WideString; 
                             DstX: Single; DstY: Single; DstWidth: Single; DstHeight: Single; 
                             Cyan: Byte; Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; dispid 83;
    function DrawBarcodeAztec(const Data: WideString; Version: BarcodeAztecCodeVersion; 
                              EccPercent: Integer; QuietZone: Integer; ModuleSize: Integer; 
                              DstX: Single; DstY: Single; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 84;
    function DrawBarcodeAztec_2(const Data: WideString; Version: BarcodeAztecCodeVersion; 
                                EccPercent: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                DstX: Single; DstY: Single; Cyan: Byte; Magenta: Byte; 
                                Yellow: Byte; Black: Byte): GdPictureStatus; dispid 85;
    function DrawBarcodeAztec_3(const Data: WideString; Version: BarcodeAztecCodeVersion; 
                                EccPercent: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                DstX: Single; DstY: Single; FillColorR: Byte; FillColorG: Byte; 
                                FillColorB: Byte; BackColorR: Byte; BackColorG: Byte; 
                                BackColorB: Byte): GdPictureStatus; dispid 86;
    function DrawBarcodeAztec_4(const Data: WideString; Version: BarcodeAztecCodeVersion; 
                                EccPercent: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                DstX: Single; DstY: Single; FillColorC: Byte; FillColorM: Byte; 
                                FillColorY: Byte; FillColorK: Byte; BackColorC: Byte; 
                                BackColorM: Byte; BackColorY: Byte; BackColorK: Byte): GdPictureStatus; dispid 87;
    function DrawBarcodeDataMatrix(const Data: WideString; 
                                   EncodingMode: BarcodeDataMatrixEncodingMode; 
                                   Version: BarcodeDataMatrixVersion; ModuleSize: Integer; 
                                   DstX: Single; DstY: Single; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 88;
    function DrawBarcodeDataMatrix_2(const Data: WideString; 
                                     EncodingMode: BarcodeDataMatrixEncodingMode; 
                                     Version: BarcodeDataMatrixVersion; ModuleSize: Integer; 
                                     DstX: Single; DstY: Single; Cyan: Byte; Magenta: Byte; 
                                     Yellow: Byte; Black: Byte): GdPictureStatus; dispid 89;
    function DrawBarcodeDataMatrix_3(const Data: WideString; 
                                     EncodingMode: BarcodeDataMatrixEncodingMode; 
                                     Version: BarcodeDataMatrixVersion; QuietZone: Integer; 
                                     ModuleSize: Integer; DstX: Single; DstY: Single; 
                                     FillColorR: Byte; FillColorG: Byte; FillColorB: Byte; 
                                     BackColorR: Byte; BackColorG: Byte; BackColorB: Byte): GdPictureStatus; dispid 90;
    function DrawBarcodeDataMatrix_4(const Data: WideString; 
                                     EncodingMode: BarcodeDataMatrixEncodingMode; 
                                     Version: BarcodeDataMatrixVersion; QuietZone: Integer; 
                                     ModuleSize: Integer; DstX: Single; DstY: Single; 
                                     FillColorC: Byte; FillColorM: Byte; FillColorY: Byte; 
                                     FillColorK: Byte; BackColorC: Byte; BackColorM: Byte; 
                                     BackColorY: Byte; BackColorK: Byte): GdPictureStatus; dispid 91;
    function DrawBarcodeMicroMicroQrCode(const Data: WideString; 
                                         EncodingMode: BarcodeQREncodingMode; 
                                         ErrorCorrectionLevel: BarcodeMicroQRErrorCorrectionLevel; 
                                         Version: Integer; ModuleSize: Integer; DstX: Single; 
                                         DstY: Single; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 92;
    function DrawBarcodeMicroMicroQrCode_2(const Data: WideString; 
                                           EncodingMode: BarcodeQREncodingMode; 
                                           ErrorCorrectionLevel: BarcodeMicroQRErrorCorrectionLevel; 
                                           Version: Integer; ModuleSize: Integer; DstX: Single; 
                                           DstY: Single; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                           Black: Byte): GdPictureStatus; dispid 93;
    function DrawBarcodeMicroMicroQrCode_3(const Data: WideString; 
                                           EncodingMode: BarcodeQREncodingMode; 
                                           ErrorCorrectionLevel: BarcodeMicroQRErrorCorrectionLevel; 
                                           Version: Integer; QuietZone: Integer; 
                                           ModuleSize: Integer; DstX: Single; DstY: Single; 
                                           FillColorR: Byte; FillColorG: Byte; FillColorB: Byte; 
                                           BackColorR: Byte; BackColorG: Byte; BackColorB: Byte): GdPictureStatus; dispid 94;
    function DrawBarcodeMicroMicroQrCode_4(const Data: WideString; 
                                           EncodingMode: BarcodeQREncodingMode; 
                                           ErrorCorrectionLevel: BarcodeMicroQRErrorCorrectionLevel; 
                                           Version: Integer; QuietZone: Integer; 
                                           ModuleSize: Integer; DstX: Single; DstY: Single; 
                                           FillColorC: Byte; FillColorM: Byte; FillColorY: Byte; 
                                           FillColorK: Byte; BackColorC: Byte; BackColorM: Byte; 
                                           BackColorY: Byte; BackColorK: Byte): GdPictureStatus; dispid 95;
    function DrawBarcodePDF417(const Data: WideString; EncodingMode: BarcodePDF417EncodingMode; 
                               ErrorCorrectionLevel: BarcodePDF417ErrorCorrectionLevel; 
                               Rows: Integer; Cols: Integer; ModuleWidth: Integer; 
                               RowHeight: Integer; DstX: Single; DstY: Single; Red: Byte; 
                               Green: Byte; Blue: Byte): GdPictureStatus; dispid 96;
    function DrawBarcodePDF417_2(const Data: WideString; EncodingMode: BarcodePDF417EncodingMode; 
                                 ErrorCorrectionLevel: BarcodePDF417ErrorCorrectionLevel; 
                                 Rows: Integer; Cols: Integer; ModuleWidth: Integer; 
                                 RowHeight: Integer; DstX: Single; DstY: Single; Cyan: Byte; 
                                 Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; dispid 97;
    function DrawBarcodePDF417_3(const Data: WideString; EncodingMode: BarcodePDF417EncodingMode; 
                                 ErrorCorrectionLevel: BarcodePDF417ErrorCorrectionLevel; 
                                 Rows: Integer; Cols: Integer; QuietZone: Integer; 
                                 ModuleWidth: Integer; RowHeight: Integer; DstX: Single; 
                                 DstY: Single; FillColorR: Byte; FillColorG: Byte; 
                                 FillColorB: Byte; BackColorR: Byte; BackColorG: Byte; 
                                 BackColorB: Byte): GdPictureStatus; dispid 98;
    function DrawBarcodePDF417_4(const Data: WideString; EncodingMode: BarcodePDF417EncodingMode; 
                                 ErrorCorrectionLevel: BarcodePDF417ErrorCorrectionLevel; 
                                 Rows: Integer; Cols: Integer; QuietZone: Integer; 
                                 ModuleWidth: Integer; RowHeight: Integer; DstX: Single; 
                                 DstY: Single; FillColorC: Byte; FillColorM: Byte; 
                                 FillColorY: Byte; FillColorK: Byte; BackColorC: Byte; 
                                 BackColorM: Byte; BackColorY: Byte; BackColorK: Byte): GdPictureStatus; dispid 99;
    function DrawBarcodeQrCode(const Data: WideString; EncodingMode: BarcodeQREncodingMode; 
                               ErrorCorrectionLevel: BarcodeQRErrorCorrectionLevel; 
                               Version: Integer; ModuleSize: Integer; DstX: Single; DstY: Single; 
                               Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 100;
    function DrawBarcodeQrCode_2(const Data: WideString; EncodingMode: BarcodeQREncodingMode; 
                                 ErrorCorrectionLevel: BarcodeQRErrorCorrectionLevel; 
                                 Version: Integer; ModuleSize: Integer; DstX: Single; DstY: Single; 
                                 Cyan: Byte; Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; dispid 101;
    function DrawBarcodeQrCode_3(const Data: WideString; EncodingMode: BarcodeQREncodingMode; 
                                 ErrorCorrectionLevel: BarcodeQRErrorCorrectionLevel; 
                                 Version: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                 DstX: Single; DstY: Single; FillColorR: Byte; FillColorG: Byte; 
                                 FillColorB: Byte; BackColorR: Byte; BackColorG: Byte; 
                                 BackColorB: Byte): GdPictureStatus; dispid 102;
    function DrawBarcodeQrCode_4(const Data: WideString; EncodingMode: BarcodeQREncodingMode; 
                                 ErrorCorrectionLevel: BarcodeQRErrorCorrectionLevel; 
                                 Version: Integer; QuietZone: Integer; ModuleSize: Integer; 
                                 DstX: Single; DstY: Single; FillColorC: Byte; FillColorM: Byte; 
                                 FillColorY: Byte; FillColorK: Byte; BackColorC: Byte; 
                                 BackColorM: Byte; BackColorY: Byte; BackColorK: Byte): GdPictureStatus; dispid 103;
    function DrawCircle(CenterX: Single; CenterY: Single; Radius: Single; Fill: WordBool; 
                        Stroke: WordBool): GdPictureStatus; dispid 104;
    function DrawEllipse(CenterX: Single; CenterY: Single; Width: Single; Height: Single; 
                         Fill: WordBool; Stroke: WordBool): GdPictureStatus; dispid 105;
    function DrawImage(const ImageResName: WideString; DstX: Single; DstY: Single; Width: Single; 
                       Height: Single): GdPictureStatus; dispid 106;
    function DrawLine(StartX: Single; StartY: Single; DstX: Single; DstY: Single): GdPictureStatus; dispid 107;
    function DrawPage(const SrcPDF: IGdPicturePDF; SrcPage: Integer; DstX: Single; DstY: Single; 
                      DstWidth: Single; DstHeight: Single): GdPictureStatus; dispid 108;
    function DrawPie(Left: Single; Top: Single; Radius: Single; StartAngle: Single; 
                     EndAngle: Single; Fill: WordBool; Stroke: WordBool): GdPictureStatus; dispid 109;
    function DrawRectangle(Left: Single; Top: Single; Width: Single; Height: Single; 
                           Fill: WordBool; Stroke: WordBool): GdPictureStatus; dispid 110;
    function DrawRotatedText(const FontResName: WideString; DstX: Single; DstY: Single; 
                             const Text: WideString; Angle: Single): GdPictureStatus; dispid 111;
    function DrawRoundedRectangle(Left: Single; Top: Single; Width: Single; Height: Single; 
                                  Radius: Single; Fill: WordBool; Stroke: WordBool): GdPictureStatus; dispid 112;
    function DrawText(const FontResName: WideString; DstX: Single; DstY: Single; 
                      const Text: WideString): GdPictureStatus; dispid 113;
    function DrawTextBox(const FontResName: WideString; Left: Single; Top: Single; Right: Single; 
                         Bottom: Single; HorizontalAlignment: TextAlignment; 
                         VerticalAlignment: TextAlignment; const Text: WideString): GdPictureStatus; dispid 114;
    function DrawTextBox_2(const FontResName: WideString; Left: Single; Top: Single; Right: Single; 
                           Bottom: Single; HorizontalAlignment: TextAlignment; 
                           VerticalAlignment: TextAlignment; const Text: WideString; 
                           UseFontBbox: WordBool): GdPictureStatus; dispid 115;
    function DrawWrappedText(const FontResName: WideString; Left: Single; Top: Single; 
                             Right: Single; Bottom: Single; HorizontalAlignment: TextAlignment; 
                             const Text: WideString; UseFontBbox: WordBool; var StartPos: Integer): GdPictureStatus; dispid 117;
    function DrawXObjectForm(const ResourceName: WideString; DstX: Single; DstY: Single; 
                             ScaleX: Single; ScaleY: Single): GdPictureStatus; dispid 118;
    function DuplicatePage(Count: Integer): GdPictureStatus; dispid 119;
    function EmbedFile(const FilePath: WideString; const Description: WideString): GdPictureStatus; dispid 120;
    function EmbedFile_2(const Stream: IUnknown; const FileTitle: WideString; 
                         const Description: WideString): GdPictureStatus; dispid 614;
    procedure EnableCompression(Compress: WordBool); dispid 121;
    function EndMarkedContent: GdPictureStatus; dispid 122;
    function EndOCGMarkedContent: GdPictureStatus; dispid 123;
    function EndPath: GdPictureStatus; dispid 124;
    function EndXObjectForm: GdPictureStatus; dispid 125;
    function ExtractEmbeddedFile(FileIdx: Integer; var Data: {??PSafeArray}OleVariant): GdPictureStatus; dispid 126;
    function ExtractPageImage(ImageNo: Integer): Integer; dispid 127;
    function FillAndStrokePath: GdPictureStatus; dispid 128;
    function FillAndStrokePathOdd: GdPictureStatus; dispid 129;
    function FillPath: GdPictureStatus; dispid 130;
    function FillPathOdd: GdPictureStatus; dispid 131;
    function FlattenFormFields: GdPictureStatus; dispid 132;
    function FlattenFormFields_2(PageNo: Integer): GdPictureStatus; dispid 615;
    function FlipPage(FlipX: WordBool; FlipY: WordBool): GdPictureStatus; dispid 133;
    function FormFieldHasBackgroundColor(FieldId: Integer): WordBool; dispid 134;
    function FormFieldHasBackgroundColor_2(FieldId: Integer; ChildIdx: Integer): WordBool; dispid 135;
    function FormFieldHasBorderColor(FieldId: Integer): WordBool; dispid 136;
    function FormFieldHasBorderColor_2(FieldId: Integer; ChildIdx: Integer): WordBool; dispid 137;
    function GetActionJavaScript(ActionID: Integer): WideString; dispid 138;
    function GetActionLaunchDestination(ActionID: Integer; var FileName: WideString; 
                                        var DefaultDirectory: WideString; 
                                        var Parameters: WideString; 
                                        var Operation: PdfActionLaunchOperation; 
                                        var NewWindow: WordBool): GdPictureStatus; dispid 139;
    function GetActionPageDestination(ActionID: Integer; var DestinationType: PdfDestinationType; 
                                      var Page: Integer; var Left: Single; var Bottom: Single; 
                                      var Right: Single; var Top: Single; var Zoom: Single): GdPictureStatus; dispid 140;
    function GetActionRemotePageDestination(ActionID: Integer; 
                                            var DestinationType: PdfDestinationType; 
                                            var FilePath: WideString; var NewWindow: WordBool; 
                                            var Page: Integer; var Left: Single; 
                                            var Bottom: Single; var Right: Single; var Top: Single; 
                                            var Zoom: Single): GdPictureStatus; dispid 141;
    function GetActionType(ActionID: Integer): PdfActionType; dispid 142;
    function GetActionURI(ActionID: Integer): WideString; dispid 143;
    function GetAnnotationActionID(AnnotationIdx: Integer): Integer; dispid 144;
    function GetAnnotationContents(AnnotationIdx: Integer): WideString; dispid 145;
    function GetAnnotationCount: Integer; dispid 146;
    function GetAnnotationFlags(AnnotationIdx: Integer): PdfAnnotationFlag; dispid 147;
    function GetAnnotationName(AnnotationIdx: Integer): WideString; dispid 148;
    function GetAnnotationOpacity(AnnotationIdx: Integer): Byte; dispid 149;
    function GetAnnotationRect(AnnotationIdx: Integer; var Left: Single; var Top: Single; 
                               var Width: Single; var Height: Single): GdPictureStatus; dispid 150;
    function GetAnnotationSubject(AnnotationIdx: Integer): WideString; dispid 151;
    function GetAnnotationSubType(AnnotationIdx: Integer): WideString; dispid 152;
    function GetAnnotationTitle(AnnotationIdx: Integer): WideString; dispid 153;
    function GetAnnotationType(AnnotationIdx: Integer): WideString; dispid 154;
    function GetAuthor: WideString; dispid 155;
    function GetBookmarkActionID(BookmarkID: Integer): Integer; dispid 156;
    function GetBookmarkChildCount(BookmarkID: Integer): Integer; dispid 157;
    function GetBookmarkCount: Integer; dispid 158;
    function GetBookmarkFirstChildID(BookmarkID: Integer): Integer; dispid 159;
    function GetBookmarkNextID(BookmarkID: Integer): Integer; dispid 160;
    function GetBookmarkParentID(BookmarkID: Integer): Integer; dispid 161;
    function GetBookmarkPrevID(BookmarkID: Integer): Integer; dispid 162;
    function GetBookmarkRootID: Integer; dispid 163;
    function GetBookmarkTextAttribute(BookmarkID: Integer): Integer; dispid 164;
    function GetBookmarkTitle(BookmarkID: Integer): WideString; dispid 165;
    function GetCreationDate: WideString; dispid 166;
    function GetCreator: WideString; dispid 167;
    function GetCurrentPage: Integer; dispid 168;
    function GetCustomPDFInformation(const Key: WideString): WideString; dispid 169;
    function GetCustomPDFInformationKeys(const Separator: WideString): WideString; dispid 170;
    function GetEmbeddedFileCount: Integer; dispid 171;
    function GetEmbeddedFileCreationDate(FileIdx: Integer): WideString; dispid 172;
    function GetEmbeddedFileDescription(FileIdx: Integer): WideString; dispid 173;
    function GetEmbeddedFileModificationDate(FileIdx: Integer): WideString; dispid 174;
    function GetEmbeddedFileName(FileIdx: Integer): WideString; dispid 175;
    function GetEmbeddedFileSize(FileIdx: Integer): Integer; dispid 176;
    function GetEmbeddedFileTitle(FileIdx: Integer): WideString; dispid 177;
    function GetEncryptionMode: PdfEncryptionMode; dispid 178;
    function GetEncryptionScheme: PdfEncryption; dispid 179;
    function GetFileAttachmentAnnotCreationDate(AnnotationIdx: Integer): WideString; dispid 180;
    function GetFileAttachmentAnnotFileDescription(AnnotationIdx: Integer): WideString; dispid 181;
    function GetFileAttachmentAnnotFileName(AnnotationIdx: Integer): WideString; dispid 182;
    function GetFileAttachmentAnnotFileSize(AnnotationIdx: Integer): Integer; dispid 183;
    function GetFileAttachmentAnnotModificationDate(AnnotationIdx: Integer): WideString; dispid 184;
    function GetFontCount: Integer; dispid 185;
    function GetFontEncoding(FontIdx: Integer): WideString; dispid 186;
    function GetFontName(FontIdx: Integer): WideString; dispid 187;
    function GetFontType(FontIdx: Integer): WideString; dispid 188;
    function GetFormFieldActionID(FieldId: Integer): Integer; dispid 189;
    function GetFormFieldAlternateTitle(FieldId: Integer): WideString; dispid 190;
    function GetFormFieldBorderStyle(FieldId: Integer; var BorderWidth: Single; 
                                     var BorderStyle: PdfAnnotationBorderStyle; var DashOn: Single; 
                                     var DashOff: Single): GdPictureStatus; dispid 191;
    function GetFormFieldBorderStyle_2(FieldId: Integer; ChildIdx: Integer; 
                                       var BorderWidth: Single; 
                                       var BorderStyle: PdfAnnotationBorderStyle; 
                                       var DashOn: Single; var DashOff: Single): GdPictureStatus; dispid 192;
    function GetFormFieldCheckBoxStyle(FieldId: Integer): PdfCheckBoxStyle; dispid 193;
    function GetFormFieldCheckBoxStyle_2(FieldId: Integer; ChildIdx: Integer): PdfCheckBoxStyle; dispid 194;
    function GetFormFieldChecked(FieldId: Integer): WordBool; dispid 195;
    function GetFormFieldChecked_2(FieldId: Integer; ChildIdx: Integer): WordBool; dispid 196;
    function GetFormFieldChildCount(FieldId: Integer): Integer; dispid 197;
    function GetFormFieldChildID(FieldId: Integer; FieldIdx: Integer): Integer; dispid 198;
    function GetFormFieldCloneNumber(FieldId: Integer): Integer; dispid 199;
    function GetFormFieldComb(FieldId: Integer): WordBool; dispid 200;
    function GetFormFieldDefaultChecked(FieldId: Integer): WordBool; dispid 201;
    function GetFormFieldDefaultChecked_2(FieldId: Integer; ChildIdx: Integer): WordBool; dispid 202;
    function GetFormFieldDefaultValue(FieldId: Integer): WideString; dispid 203;
    function GetFormFieldDoNotScroll(FieldId: Integer): WordBool; dispid 204;
    function GetFormFieldDoNotSpellCheck(FieldId: Integer): WordBool; dispid 205;
    function GetFormFieldFileSelect(FieldId: Integer): WordBool; dispid 206;
    function GetFormFieldFontName(FieldId: Integer): WideString; dispid 207;
    function GetFormFieldFontProperties(FieldId: Integer; var FontFamily: WideString; 
                                        var FontStyle: TrueTypeFontStyle; var IsStdFont: WordBool): GdPictureStatus; dispid 208;
    function GetFormFieldFontSize(FieldId: Integer): Single; dispid 209;
    function GetFormFieldFontSize_2(FieldId: Integer; ChildIdx: Integer): Single; dispid 210;
    function GetFormFieldFullTitle(FieldId: Integer): WideString; dispid 211;
    function GetFormFieldFullTitleWithCloneNumber(FieldId: Integer): WideString; dispid 212;
    function GetFormFieldId(FieldIdx: Integer): Integer; dispid 213;
    function GetFormFieldItemCommit(FieldId: Integer): WordBool; dispid 214;
    function GetFormFieldItemCount(FieldId: Integer): Integer; dispid 215;
    function GetFormFieldItemEdit(FieldId: Integer): WordBool; dispid 216;
    function GetFormFieldItemSort(FieldId: Integer): WordBool; dispid 217;
    function GetFormFieldItemText(FieldId: Integer; ItemIdx: Integer): WideString; dispid 218;
    function GetFormFieldItemValue(FieldId: Integer; ItemIdx: Integer): WideString; dispid 219;
    function GetFormFieldLocation(FieldId: Integer; var Left: Single; var Top: Single; 
                                  var Right: Single; var Bottom: Single): GdPictureStatus; dispid 220;
    function GetFormFieldMaxLen(FieldId: Integer): Integer; dispid 221;
    function GetFormFieldMultiLine(FieldId: Integer): WordBool; dispid 222;
    function GetFormFieldMultiSelect(FieldId: Integer): WordBool; dispid 223;
    function GetFormFieldNormalCaption(FieldId: Integer): WideString; dispid 224;
    function GetFormFieldOnStateName(FieldId: Integer): WideString; dispid 225;
    function GetFormFieldOnStateName_2(FieldId: Integer; ChildIdx: Integer): WideString; dispid 226;
    function GetFormFieldPage(FieldId: Integer): Integer; dispid 227;
    function GetFormFieldPassword(FieldId: Integer): WordBool; dispid 228;
    function GetFormFieldRadioInUnison(FieldId: Integer): WordBool; dispid 229;
    function GetFormFieldReadOnly(FieldId: Integer): WordBool; dispid 230;
    function GetFormFieldRequired(FieldId: Integer): WordBool; dispid 231;
    function GetFormFieldRichText(FieldId: Integer): WordBool; dispid 232;
    function GetFormFieldRotation(FieldId: Integer): Integer; dispid 233;
    function GetFormFieldsCount: Integer; dispid 234;
    function GetFormFieldsNeedAppearances: WordBool; dispid 235;
    function GetFormFieldTextAlignment(FieldId: Integer): TextAlignment; dispid 236;
    function GetFormFieldTitle(FieldId: Integer): WideString; dispid 237;
    function GetFormFieldType(FieldId: Integer): PdfFormFieldType; dispid 238;
    function GetFormFieldValue(FieldId: Integer): WideString; dispid 239;
    function GetFormFieldValue_2(FieldId: Integer; const Separator: WideString): WideString; dispid 240;
    function GetFormFieldVisibility(FieldId: Integer): PdfFormFieldVisibility; dispid 241;
    function GetInputFilePath: WideString; dispid 242;
    function GetKeywords: WideString; dispid 243;
    function GetMeasurementUnit: PdfMeasurementUnit; dispid 248;
    function GetMetadata: WideString; dispid 249;
    function GetModificationDate: WideString; dispid 250;
    function GetObjectInterop: OleVariant; dispid 252;
    function GetOCG(OCGIdx: Integer): Integer; dispid 253;
    function GetOCGCount: Integer; dispid 254;
    function GetOCGExportState(OCGId: Integer): PdfOcgState; dispid 255;
    function GetOCGIntentView(OCGId: Integer): WordBool; dispid 256;
    function GetOCGLockedState(OCGId: Integer): WordBool; dispid 257;
    function GetOCGPrintState(OCGId: Integer): PdfOcgState; dispid 258;
    function GetOCGTitle(OCGId: Integer): WideString; dispid 259;
    function GetOCGViewState(OCGId: Integer): PdfOcgState; dispid 260;
    function GetOCGZoomMax(OCGId: Integer): Double; dispid 261;
    function GetOCGZoomMin(OCGId: Integer): Double; dispid 262;
    function GetOrigin: PdfOrigin; dispid 263;
    function GetPageBox(PageBox: PdfPageBox; var Left: Single; var Top: Single; var Right: Single; 
                        var Bottom: Single): GdPictureStatus; dispid 264;
    function GetPageContent: WideString; dispid 265;
    function GetPageCount: Integer; dispid 266;
    function GetPageHeight: Single; dispid 267;
    function GetPageImageBitDepth(ImageIdx: Integer): Integer; dispid 268;
    function GetPageImageColorSpace(ImageIdx: Integer): PdfColorSpace; dispid 269;
    function GetPageImageCoordinates(ImageIdx: Integer; var x0: Single; var y0: Single; 
                                     var X1: Single; var Y1: Single; var X2: Single; var Y2: Single): GdPictureStatus; dispid 270;
    function GetPageImageCount: Integer; dispid 271;
    function GetPageImageFilters(ImageIdx: Integer): {??PSafeArray}OleVariant; dispid 272;
    function GetPageImageMaskMode(ImageIdx: Integer): PdfImageMaskType; dispid 273;
    function GetPageImageResName(ImageIdx: Integer): WideString; dispid 274;
    function GetPageImageResolution(ImageIdx: Integer; var HorizontalResolution: Single; 
                                    var VerticalResolution: Single): GdPictureStatus; dispid 275;
    function GetPageImageSize(ImageIdx: Integer; var Width: Integer; var Height: Integer): GdPictureStatus; dispid 276;
    function GetPageLabel(PageNo: Integer): WideString; dispid 277;
    function GetPageLabelsRange(LabelingRangeIdx: Integer; var StartPage: Integer; 
                                var Style: PdfPageLabelStyle; var Prefix: WideString; 
                                var NumPortion: Integer): GdPictureStatus; dispid 278;
    function GetPageLabelsRangeCount: Integer; dispid 279;
    function GetPageLinkAnnotationIdx(LinkIdx: Integer): Integer; dispid 280;
    function GetPageLinksCount: Integer; dispid 281;
    function GetPageMetadata: WideString; dispid 282;
    function GetPagePrivateTag(const Tag: WideString): WideString; dispid 283;
    function GetPageRotation: Integer; dispid 284;
    function GetPageText: WideString; dispid 285;
    function GetPageTextArea(Left: Single; Top: Single; Width: Single; Height: Single): WideString; dispid 286;
    function GetPageTextWithCoords(const FieldSeparator: WideString): WideString; dispid 287;
    function GetPageTextWithCoordsEx(const FieldSeparator: WideString): WideString; dispid 288;
    function GetPageThumbnail(Width: Integer; Height: Integer; Red: Byte; Green: Byte; Blue: Byte): Integer; dispid 289;
    function GetPageThumbnail_2(Width: Integer; Height: Integer; Red: Byte; Green: Byte; 
                                Blue: Byte; Alpha: Byte; FitToPageSize: WordBool): Integer; dispid 678;
    function GetPageUserUnit: Single; dispid 291;
    function GetPageWidth: Single; dispid 292;
    function GetPDFAConformance: PdfConformance; dispid 293;
    function GetProducer: WideString; dispid 294;
    function GetRight(Right: PdfRight): WordBool; dispid 295;
    function GetSignatureCount: Integer; dispid 296;
    function GetSignatureProperties(SignatureIdx: Integer; var SignatureName: WideString; 
                                    var SignatureReason: WideString; 
                                    var SignatureLocation: WideString; 
                                    var SignatureContactInfo: WideString; 
                                    var SignatureDate: WideString; var StampLeft: Single; 
                                    var StampTop: Single; var StampWidth: Single; 
                                    var StampHeight: Single; var StampPage: Integer; 
                                    var DocumentValid: WordBool; var CertificateValid: WordBool; 
                                    var CertificateFriendlyName: WideString; 
                                    var CertificateIssuer: WideString; 
                                    var CertificateNotBefore: TDateTime; 
                                    var CertificateNotAfter: TDateTime; 
                                    var CertificateSubject: WideString; 
                                    var CertificateVersion: Integer; var SigningTime: TDateTime; 
                                    var SignatureLevel: PdfSignatureCertificationLevel): GdPictureStatus; dispid 297;
    function GetStat: GdPictureStatus; dispid 298;
    function GetSubject: WideString; dispid 299;
    function GetTagRootID: Integer; dispid 300;
    function GetTextHeight(const FontResName: WideString; TextSize: Single): Single; dispid 301;
    function GetTextHeight_2(const FontResName: WideString; TextSize: Single; UseFontBox: WordBool): Single; dispid 302;
    function GetTextWidth(const FontResName: WideString; TextSize: Single; const Text: WideString): Single; dispid 303;
    function GetTitle: WideString; dispid 304;
    function GetVersion: WideString; dispid 305;
    function GetViewerLayoutMode: PdfViewerLayoutMode; dispid 306;
    function GetViewerNonFullScreenPageMode: PdfViewerNonFullScreenPageMode; dispid 307;
    function GetViewerOpenActionID: Integer; dispid 308;
    function GetViewerPageMode: PdfViewerPageMode; dispid 309;
    function GetViewerPreference(Preference: PdfViewerPreference): WordBool; dispid 310;
    function GetWrappedTextHeight(const FontResName: WideString; Left: Single; Top: Single; 
                                  Right: Single; Bottom: Single; 
                                  HorizontalAlignment: TextAlignment; const Text: WideString; 
                                  UseFontBbox: WordBool; var StartPos: Integer): Single; dispid 311;
    function GetWrappedTextLineCount(const FontResName: WideString; Width: Single; 
                                     HorizontalAlignment: TextAlignment; const Text: WideString; 
                                     UseFontBbox: WordBool): Integer; dispid 312;
    function GuessPageTextRotation: Integer; dispid 313;
    function HasXFAFormFields: WordBool; dispid 314;
    function IncreaseVersion(Version: Single): GdPictureStatus; dispid 315;
    function InsertPage(PageWidth: Single; PageHeight: Single; PageNo: Integer): GdPictureStatus; dispid 320;
    function InsertPage_2(PageSize: PdfPageSizes; PageNo: Integer): GdPictureStatus; dispid 321;
    function IsEncrypted: WordBool; dispid 322;
    function IsFontEmbedded(FontIdx: Integer): WordBool; dispid 323;
    function IsLinearized: WordBool; dispid 324;
    function IsOwnerPassword: WordBool; dispid 325;
    function IsPageImage: WordBool; dispid 326;
    function IsPageImage_2(var ImageID: Integer; AutoRotate: WordBool): WordBool; dispid 327;
    function IsPageImage_3(IgnoreHiddenText: WordBool): WordBool; dispid 328;
    function IsPortFolio(var Portfolio: WordBool; var FirstFileIdx: Integer; 
                         var ViewMode: PdfPortFolioType): GdPictureStatus; dispid 329;
    function LoadFromFile(const FilePath: WideString; LoadInMemory: WordBool): GdPictureStatus; dispid 330;
    function LoadFromFileEx(const FilePath: WideString; OpenReadWrite: WordBool): GdPictureStatus; dispid 331;
    function LoadFromIStream(const Stream: IUnknown): GdPictureStatus; dispid 332;
    function MapStructureType(const NewStructType: WideString; const ExistingStructType: WideString): GdPictureStatus; dispid 333;
    function Merge2Documents(const SrcDoc1: WideString; const SrcDoc2: WideString; 
                             const DstDoc: WideString): GdPictureStatus; dispid 334;
    function Merge2Documents_2(const SrcDoc1: IGdPicturePDF; const SrcDoc2: IGdPicturePDF): IGdPicturePDF; dispid 335;
    function MergeDocuments(var SrcDocPath: {??PSafeArray}OleVariant; const DstDoc: WideString): GdPictureStatus; dispid 336;
    function MergeDocuments_2(var SrcDoc: {??PSafeArray}OleVariant): IGdPicturePDF; dispid 337;
    function MergeDocuments_3(var SrcDoc: {??PSafeArray}OleVariant; 
                              Options: PdfDocumentMergingOptions): IGdPicturePDF; dispid 338;
    function MoveBookmark(BookmarkID: Integer; BookmarkDestID: Integer; Before: WordBool): GdPictureStatus; dispid 339;
    function MoveBookmarkDown(BookmarkID: Integer): GdPictureStatus; dispid 340;
    function MoveBookmarkUp(BookmarkID: Integer): GdPictureStatus; dispid 341;
    function MovePage(PageNo: Integer; Destination: Integer): GdPictureStatus; dispid 342;
    function NewActionGoTo(DestinationType: PdfDestinationType; Page: Integer; Left: Single; 
                           Right: Single; Bottom: Single; Top: Single; Zoom: Single): Integer; dispid 343;
    function NewActionGoToR(DestinationType: PdfDestinationType; const FilePath: WideString; 
                            NewWindow: WordBool; Page: Integer; Left: Single; Right: Single; 
                            Bottom: Single; Top: Single; Zoom: Single): Integer; dispid 344;
    function NewActionJavaScript(const JavaScript: WideString): Integer; dispid 345;
    function NewActionLaunch(const FileName: WideString; const DefaultDirectory: WideString; 
                             const Parameters: WideString; Operation: PdfActionLaunchOperation; 
                             NewWindow: WordBool): Integer; dispid 346;
    function NewActionNamed(Name: PdfActionNamed): Integer; dispid 347;
    function NewActionURI(const Uri: WideString; IsMap: WordBool): Integer; dispid 348;
    function NewBookmark(ParentBookmarkID: Integer; const Title: WideString): Integer; dispid 349;
    function NewOCG(const Title: WideString): Integer; dispid 350;
    function NewPage(PageWidth: Single; PageHeight: Single): GdPictureStatus; dispid 351;
    function NewPage_2(PageSize: PdfPageSizes): GdPictureStatus; dispid 352;
    function NewPDF: GdPictureStatus; dispid 353;
    function NewPDF_3(Conformance: PdfConformance): GdPictureStatus; dispid 354;
    function NewTag(ParentTagID: Integer; const StructType: WideString): Integer; dispid 355;
    function NormalizePage: GdPictureStatus; dispid 356;
    function OcrPage(const Dictionary: WideString; const DictionaryPath: WideString; 
                     const CharWhiteList: WideString; DPI: Single): GdPictureStatus; dispid 357;
    function OcrPages(const PageRange: WideString; ThreadCount: Integer; 
                      const Dictionary: WideString; const DictionaryPath: WideString; 
                      const CharWhiteList: WideString; DPI: Single): GdPictureStatus; dispid 358;
    function OcrPages_4(const PageRange: WideString; ThreadCount: Integer; 
                        const Dictionary: WideString; const DictionaryPath: WideString; 
                        const CharWhiteList: WideString; DPI: Single; OCRMode: OCRMode; 
                        TimeoutMillisec: Integer; Sync: WordBool): GdPictureStatus; dispid 361;
    function PackFonts: GdPictureStatus; dispid 363;
    function PageHasShape: WordBool; dispid 364;
    function PageHasText: WordBool; dispid 365;
    function PageHasText_2(IgnoreHiddenText: WordBool): WordBool; dispid 366;
    function PortFolioCreate(const FirstFileNameToShow: WideString; ViewMode: PdfPortFolioType): GdPictureStatus; dispid 367;
    function PortFolioCreate_2(FirstFileToShowIdx: Integer; ViewMode: PdfPortFolioType): GdPictureStatus; dispid 368;
    function PortFolioDelete: GdPictureStatus; dispid 369;
    function Print: GdPictureStatus; dispid 370;
    function PrintDialog: WordBool; dispid 371;
    function PrintDialogFit: WordBool; dispid 372;
    function PrintFit: GdPictureStatus; dispid 373;
    function PrintGetActivePrinter: WideString; dispid 374;
    function PrintGetAlignment: PrintAlignment; dispid 375;
    function PrintGetCollate: WordBool; dispid 376;
    function PrintGetColorMode: PrinterColorMode; dispid 377;
    function PrintGetCopies: Smallint; dispid 378;
    function PrintGetDocumentName: WideString; dispid 379;
    function PrintGetDuplexMode: Duplex; dispid 380;
    function PrintGetLastError: WideString; dispid 381;
    procedure PrintGetMargins(var LeftMargin: Single; var TopMargin: Single); dispid 382;
    function PrintGetOrientation: PrinterOrientation; dispid 383;
    function PrintGetPaperBin: Integer; dispid 384;
    function PrintGetPaperHeight: Single; dispid 385;
    function PrintGetPaperSize: Integer; dispid 386;
    function PrintGetPaperWidth: Single; dispid 387;
    function PrintGetPrinterName(PrinterNo: Integer): WideString; dispid 388;
    function PrintGetPrintersCount: Integer; dispid 389;
    function PrintGetQuality: PrintQuality; dispid 391;
    function PrintGetStat: GdPictureStatus; dispid 392;
    procedure PrintInterop; dispid 393;
    function PrintSetActivePrinter(const PrinterName: WideString): WordBool; dispid 394;
    function PrintSetAlignment(ImageAlignment: PrintAlignment): GdPictureStatus; dispid 395;
    function PrintSetAutoRotation(AutoRotation: WordBool): GdPictureStatus; dispid 396;
    function PrintSetCollate(Collate: WordBool): GdPictureStatus; dispid 397;
    function PrintSetColorMode(ColorMode: PrinterColorMode): GdPictureStatus; dispid 398;
    function PrintSetCopies(Copies: Smallint): GdPictureStatus; dispid 399;
    function PrintSetDocumentName(const DocumentName: WideString): GdPictureStatus; dispid 400;
    function PrintSetDuplexMode(DuplexMode: Duplex): GdPictureStatus; dispid 401;
    function PrintSetFromToPage(FromPage: Integer; ToPage: Integer): GdPictureStatus; dispid 402;
    function PrintSetOrientation(Orientation: PrinterOrientation): GdPictureStatus; dispid 403;
    function PrintSetPageSelection(const CustomRange: WideString): GdPictureStatus; dispid 404;
    function PrintSetPaperBin(PaperBin: Integer): WordBool; dispid 405;
    function PrintSetPreRasterization(PreRasterization: WordBool): GdPictureStatus; dispid 407;
    function PrintSetPreRasterizationDPI(DPI: Single): GdPictureStatus; dispid 613;
    function PrintSetQuality(Quality: PrintQuality): GdPictureStatus; dispid 409;
    function PrintSetShowPrintingProgress(Show: WordBool): GdPictureStatus; dispid 410;
    function PrintSetStdPaperSize(PaperSize: Integer): GdPictureStatus; dispid 411;
    function PrintSetUserPaperSize(PaperWidth: Single; PaperHeight: Single): GdPictureStatus; dispid 412;
    function PrintShowPrinterSettingsDialog(HANDLE: Integer): GdPictureStatus; dispid 413;
    function RemoveAnnotation(AnnotationIdx: Integer): GdPictureStatus; dispid 414;
    function RemoveBookmark(BookmarkID: Integer): GdPictureStatus; dispid 415;
    function RemoveBookmarks: GdPictureStatus; dispid 416;
    function RemoveFormField(FieldId: Integer): GdPictureStatus; dispid 417;
    function RemoveFormFields: GdPictureStatus; dispid 418;
    function RemoveJavaScript(Options: PdfRemoveJavaScriptOptions): GdPictureStatus; dispid 419;
    function RemovePageLink(LinkIdx: Integer): GdPictureStatus; dispid 420;
    function RemovePageLinks: GdPictureStatus; dispid 421;
    function RemoveSignature(SignatureIdx: Integer): GdPictureStatus; dispid 422;
    function RemoveUnusedResources: GdPictureStatus; dispid 423;
    function RenderPageToGdPictureImage(DPI: Single; RenderFormFields: WordBool): Integer; dispid 424;
    function RenderPageToGdPictureImageEx(DPI: Single; RenderFormFields: WordBool): Integer; dispid 425;
    function RenderPageToGdPictureImageEx_2(DPI: Single; RenderFormFields: WordBool; 
                                            PixelFormat: PixelFormat): Integer; dispid 426;
    function RenderPageToGdPictureImage_2(DPI: Single; RenderFormFields: WordBool; 
                                          PixelFormat: PixelFormat): Integer; dispid 427;
    function RenderPageToGdPictureImage_3(DPI: Single; RenderFormFields: WordBool; 
                                          KeepTransparency: WordBool): Integer; dispid 428;
    function ReplaceImage(const ImageResName: WideString; ImageID: Integer; ImageMask: WordBool): GdPictureStatus; dispid 429;
    function ReplaceImageMRC(const ImageResName: WideString; ImageID: Integer): GdPictureStatus; dispid 430;
    function ReplaceImage_2(const ImageResName: WideString; ImageID: Integer; ImageMask: WordBool; 
                            CheckSize: WordBool): GdPictureStatus; dispid 431;
    function ResetFormFieldCheckedState(FieldId: Integer): GdPictureStatus; dispid 432;
    function ResetFormFieldDefaultCheckedState(FieldId: Integer): GdPictureStatus; dispid 433;
    function ResetGraphicsState: GdPictureStatus; dispid 434;
    function ResizePage(NewPageWidth: Single; NewPageHeight: Single): GdPictureStatus; dispid 435;
    function RestoreGraphicsState: GdPictureStatus; dispid 436;
    function RotatePage(Rotation: Integer): GdPictureStatus; dispid 437;
    function RotatePageEx(Angle: Single): GdPictureStatus; dispid 438;
    function RotatePages(Rotation: Integer): GdPictureStatus; dispid 439;
    function SaveGraphicsState: GdPictureStatus; dispid 440;
    function SaveToFile(const FilePath: WideString): GdPictureStatus; dispid 441;
    function SaveToFileInc(const FilePath: WideString): GdPictureStatus; dispid 442;
    function SaveToFile_2(const FilePath: WideString; PackDocument: WordBool): GdPictureStatus; dispid 443;
    function SaveToFile_3(const FilePath: WideString; PackDocument: WordBool; Linearize: WordBool): GdPictureStatus; dispid 444;
    function SaveToFile_4(const FilePath: WideString; EncryptionScheme: PdfEncryption; 
                          const UserPass: WideString; const OwnerPass: WideString; 
                          CanPrint: WordBool; CanCopy: WordBool; CanModify: WordBool; 
                          CanAddNotes: WordBool; CanFillFields: WordBool; CanCopyAccess: WordBool; 
                          CanAssemble: WordBool; CanPrintFull: WordBool): GdPictureStatus; dispid 445;
    function SaveToIStream(const Stream: IUnknown; PackDocument: WordBool): GdPictureStatus; dispid 446;
    function SaveToIStreamInc(const Stream: IUnknown): GdPictureStatus; dispid 447;
    function SaveToIStream_2(const Stream: IUnknown; EncryptionScheme: PdfEncryption; 
                             const UserPass: WideString; const OwnerPass: WideString; 
                             CanPrint: WordBool; CanCopy: WordBool; CanModify: WordBool; 
                             CanAddNotes: WordBool; CanFillFields: WordBool; 
                             CanCopyAccess: WordBool; CanAssemble: WordBool; CanPrintFull: WordBool): GdPictureStatus; dispid 448;
    function ScalePage(ScaleX: Single; ScaleY: Single): GdPictureStatus; dispid 449;
    function SearchText(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                        WholeWords: WordBool; var Left: Single; var Top: Single; var Width: Single; 
                        var Height: Single): WordBool; dispid 450;
    function SearchText_2(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool; OrdinalComparison: WordBool; var Left: Single; 
                          var Top: Single; var Width: Single; var Height: Single): WordBool; dispid 451;
    function SelectPage(PageNo: Integer): GdPictureStatus; dispid 452;
    function SetAnnotationAction(AnnotationIdx: Integer; ActionID: Integer): GdPictureStatus; dispid 453;
    function SetAnnotationColor(AnnotationIdx: Integer; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 454;
    function SetAnnotationColor_2(AnnotationIdx: Integer; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                  Black: Byte): GdPictureStatus; dispid 455;
    function SetAnnotationContents(AnnotationIdx: Integer; const Contents: WideString): GdPictureStatus; dispid 456;
    function SetAnnotationFillColor(AnnotationIdx: Integer; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 457;
    function SetAnnotationFillColor_2(AnnotationIdx: Integer; Cyan: Byte; Magenta: Byte; 
                                      Yellow: Byte; Black: Byte): GdPictureStatus; dispid 458;
    function SetAnnotationFlags(AnnotationIdx: Integer; Flags: PdfAnnotationFlag): GdPictureStatus; dispid 459;
    function SetAnnotationName(AnnotationIdx: Integer; const Name: WideString): GdPictureStatus; dispid 460;
    function SetAnnotationOpacity(AnnotationIdx: Integer; Opacity: Byte): GdPictureStatus; dispid 461;
    function SetAnnotationRect(AnnotationIdx: Integer; Left: Single; Top: Single; Width: Single; 
                               Height: Single): GdPictureStatus; dispid 462;
    function SetAnnotationSubject(AnnotationIdx: Integer; const Subject: WideString): GdPictureStatus; dispid 463;
    function SetAnnotationTitle(AnnotationIdx: Integer; const Title: WideString): GdPictureStatus; dispid 464;
    procedure SetAuthor(const Author: WideString); dispid 465;
    function SetBlendMode(BlendMode: PdfBlendMode): GdPictureStatus; dispid 466;
    function SetBookmarkAction(BookmarkID: Integer; ActionID: Integer): GdPictureStatus; dispid 467;
    function SetBookmarkColor(BookmarkID: Integer; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 468;
    function SetBookmarkColor_2(BookmarkID: Integer; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                Black: Byte): GdPictureStatus; dispid 469;
    function SetBookmarkTextAttribute(BookmarkID: Integer; Attribute: Integer): GdPictureStatus; dispid 470;
    function SetBookmarkTitle(BookmarkID: Integer; const Title: WideString): GdPictureStatus; dispid 471;
    function SetCertificate(const CertPath: WideString; const PFXPassword: WideString): GdPictureStatus; dispid 472;
    procedure SetCompressionForBitonalImage(Compression: PdfCompression); dispid 473;
    procedure SetCompressionForColorImage(Compression: PdfCompression); dispid 474;
    procedure SetCreator(const Creator: WideString); dispid 475;
    function SetCustomPDFInformation(const Key: WideString; const Value: WideString): GdPictureStatus; dispid 476;
    function SetFillAlpha(Alpha: Byte): GdPictureStatus; dispid 477;
    function SetFillColor(Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 478;
    function SetFillColor_2(Cyan: Byte; Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; dispid 479;
    function SetFormFieldAction(FieldId: Integer; ActionID: Integer): GdPictureStatus; dispid 480;
    function SetFormFieldAlternateTitle(FieldId: Integer; const AlternateTitle: WideString): GdPictureStatus; dispid 481;
    function SetFormFieldBackgroundColor(FieldId: Integer; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 482;
    function SetFormFieldBackgroundColor_2(FieldId: Integer; Cyan: Byte; Magenta: Byte; 
                                           Yellow: Byte; Black: Byte): GdPictureStatus; dispid 483;
    function SetFormFieldBackgroundColor_3(FieldId: Integer; ChildIdx: Integer; Red: Byte; 
                                           Green: Byte; Blue: Byte): GdPictureStatus; dispid 484;
    function SetFormFieldBackgroundColor_4(FieldId: Integer; ChildIdx: Integer; Cyan: Byte; 
                                           Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; dispid 485;
    function SetFormFieldBorderColor(FieldId: Integer; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 486;
    function SetFormFieldBorderColor_2(FieldId: Integer; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                       Black: Byte): GdPictureStatus; dispid 487;
    function SetFormFieldBorderColor_3(FieldId: Integer; ChildIdx: Integer; Red: Byte; Green: Byte; 
                                       Blue: Byte): GdPictureStatus; dispid 488;
    function SetFormFieldBorderColor_4(FieldId: Integer; ChildIdx: Integer; Cyan: Byte; 
                                       Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; dispid 489;
    function SetFormFieldBorderStyle(FieldId: Integer; BorderWidth: Single; 
                                     BorderStyle: PdfAnnotationBorderStyle; DashOn: Single; 
                                     DashOff: Single): GdPictureStatus; dispid 490;
    function SetFormFieldBorderStyle_2(FieldId: Integer; ChildIdx: Integer; BorderWidth: Single; 
                                       BorderStyle: PdfAnnotationBorderStyle; DashOn: Single; 
                                       DashOff: Single): GdPictureStatus; dispid 491;
    function SetFormFieldCheckBoxStyle(FieldId: Integer; CheckStyle: PdfCheckBoxStyle): GdPictureStatus; dispid 492;
    function SetFormFieldCheckBoxStyle_2(FieldId: Integer; ChildIdx: Integer; 
                                         CheckStyle: PdfCheckBoxStyle): GdPictureStatus; dispid 493;
    function SetFormFieldChecked(FieldId: Integer; Checked: WordBool): GdPictureStatus; dispid 494;
    function SetFormFieldChecked_2(FieldId: Integer; ChildIdx: Integer): GdPictureStatus; dispid 495;
    function SetFormFieldComb(FieldId: Integer; Comb: WordBool): GdPictureStatus; dispid 496;
    function SetFormFieldDefaultChecked(FieldId: Integer; Checked: WordBool): GdPictureStatus; dispid 497;
    function SetFormFieldDefaultChecked_2(FieldId: Integer; ChildIdx: Integer): GdPictureStatus; dispid 498;
    function SetFormFieldDefaultValue(FieldId: Integer; const DefaultValue: WideString): GdPictureStatus; dispid 499;
    function SetFormFieldDoNotScroll(FieldId: Integer; DoNotScroll: WordBool): GdPictureStatus; dispid 500;
    function SetFormFieldDoNotSpellCheck(FieldId: Integer; SpellCheck: WordBool): GdPictureStatus; dispid 501;
    function SetFormFieldFileSelect(FieldId: Integer; FileSelect: WordBool): GdPictureStatus; dispid 502;
    function SetFormFieldFontColor(FieldId: Integer; Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 503;
    function SetFormFieldFontColor_2(FieldId: Integer; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                     Black: Byte): GdPictureStatus; dispid 504;
    function SetFormFieldFontColor_3(FieldId: Integer; ChildIdx: Integer; Red: Byte; Green: Byte; 
                                     Blue: Byte): GdPictureStatus; dispid 505;
    function SetFormFieldFontColor_4(FieldId: Integer; ChildIdx: Integer; Cyan: Byte; 
                                     Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; dispid 506;
    function SetFormFieldFontResName(FieldId: Integer; const FontResName: WideString): GdPictureStatus; dispid 507;
    function SetFormFieldFontSize(FieldId: Integer; FontSize: Single): GdPictureStatus; dispid 508;
    function SetFormFieldFontSize_2(FieldId: Integer; ChildIdx: Integer; FontSize: Single): GdPictureStatus; dispid 509;
    function SetFormFieldItemCommit(FieldId: Integer; Commit: WordBool): GdPictureStatus; dispid 510;
    function SetFormFieldItemEdit(FieldId: Integer; Editable: WordBool): GdPictureStatus; dispid 511;
    function SetFormFieldItemSort(FieldId: Integer; Sorted: WordBool): GdPictureStatus; dispid 512;
    function SetFormFieldLocation(FieldId: Integer; Left: Single; Top: Single; Right: Single; 
                                  Bottom: Single): GdPictureStatus; dispid 513;
    function SetFormFieldMaxLen(FieldId: Integer; MaxLen: Integer): GdPictureStatus; dispid 514;
    function SetFormFieldMultiLine(FieldId: Integer; MultiLine: WordBool): GdPictureStatus; dispid 515;
    function SetFormFieldMultiSelect(FieldId: Integer; Multiselect: WordBool): GdPictureStatus; dispid 516;
    function SetFormFieldNoBackgroundColor(FieldId: Integer): GdPictureStatus; dispid 517;
    function SetFormFieldNoBackgroundColor_2(FieldId: Integer; ChildIdx: Integer): GdPictureStatus; dispid 518;
    function SetFormFieldNoBorderColor(FieldId: Integer): GdPictureStatus; dispid 519;
    function SetFormFieldNoBorderColor_2(FieldId: Integer; ChildIdx: Integer): GdPictureStatus; dispid 520;
    function SetFormFieldNormalCaption(FieldId: Integer; const NormalCaption: WideString): GdPictureStatus; dispid 521;
    function SetFormFieldOnStateName(FieldId: Integer; const OnStateName: WideString): GdPictureStatus; dispid 522;
    function SetFormFieldOnStateName_2(FieldId: Integer; ChildIdx: Integer; 
                                       const OnStateName: WideString): GdPictureStatus; dispid 523;
    function SetFormFieldOptional(FieldId: Integer; OCGId: Integer): GdPictureStatus; dispid 524;
    function SetFormFieldPassword(FieldId: Integer; Password: WordBool): GdPictureStatus; dispid 525;
    function SetFormFieldRadioInUnison(FieldId: Integer; Unison: WordBool): GdPictureStatus; dispid 526;
    function SetFormFieldReadOnly(FieldId: Integer; ROnly: WordBool): GdPictureStatus; dispid 527;
    function SetFormFieldRequired(FieldId: Integer; Required: WordBool): GdPictureStatus; dispid 528;
    function SetFormFieldRichText(FieldId: Integer; RichText: WordBool): GdPictureStatus; dispid 529;
    function SetFormFieldRotation(FieldId: Integer; Rotation: Integer): GdPictureStatus; dispid 530;
    function SetFormFieldsNeedAppearances(NeedAppearances: WordBool): GdPictureStatus; dispid 531;
    function SetFormFieldTextAlignment(FieldId: Integer; TextAlign: TextAlignment): GdPictureStatus; dispid 532;
    function SetFormFieldTitle(FieldId: Integer; const Title: WideString): GdPictureStatus; dispid 533;
    function SetFormFieldValue(FieldId: Integer; const Value: WideString): GdPictureStatus; dispid 534;
    function SetFormFieldValue_2(FieldId: Integer; const Value: WideString; 
                                 const Separator: WideString): GdPictureStatus; dispid 535;
    function SetFormFieldVisibility(FieldId: Integer; Visibility: PdfFormFieldVisibility): GdPictureStatus; dispid 536;
    function SetImageOptional(const ImageResName: WideString; OCGId: Integer): GdPictureStatus; dispid 537;
    procedure SetJpeg2000Quality(Quality: Integer); dispid 538;
    procedure SetJpegQuality(Quality: Integer); dispid 539;
    procedure SetKeywords(const Keywords: WideString); dispid 540;
    function SetLanguage(const Language: WideString): GdPictureStatus; dispid 541;
    function SetLineAlpha(Alpha: Byte): GdPictureStatus; dispid 542;
    function SetLineCapStyle(LineCap: PdfLineCapStyle): GdPictureStatus; dispid 543;
    function SetLineColor(Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 544;
    function SetLineColor_2(Cyan: Byte; Magenta: Byte; Yellow: Byte; Black: Byte): GdPictureStatus; dispid 545;
    function SetLineDash(DashOn: Single; DashOff: Single): GdPictureStatus; dispid 546;
    function SetLineDash_2(var DashPattern: {??PSafeArray}OleVariant): GdPictureStatus; dispid 547;
    function SetLineJoinStyle(LineJoin: PdfLineJoinStyle): GdPictureStatus; dispid 548;
    function SetLineNoDash: GdPictureStatus; dispid 549;
    function SetLineWidth(LineWidth: Single): GdPictureStatus; dispid 550;
    procedure SetMeasurementUnit(UnitMode: PdfMeasurementUnit); dispid 551;
    function SetMetadata(const XMP: WideString): GdPictureStatus; dispid 552;
    procedure SetMRCImageBackgroundResolution(Resolution: Single); dispid 553;
    procedure SetMRCPreserveSmoothing(PreserveSmoothing: WordBool); dispid 554;
    function SetOCGExportState(OCGId: Integer; ExportState: PdfOcgState): GdPictureStatus; dispid 555;
    function SetOCGLockedState(OCGId: Integer; Locked: WordBool): GdPictureStatus; dispid 556;
    function SetOCGPrintState(OCGId: Integer; PrintState: PdfOcgState): GdPictureStatus; dispid 557;
    function SetOCGTitle(OCGId: Integer; const Title: WideString): GdPictureStatus; dispid 558;
    function SetOCGViewState(OCGId: Integer; ViewState: PdfOcgState): GdPictureStatus; dispid 559;
    function SetOCGZoomMax(OCGId: Integer; ZoomMax: Single): GdPictureStatus; dispid 560;
    function SetOCGZoomMin(OCGId: Integer; ZoomMin: Single): GdPictureStatus; dispid 561;
    procedure SetOrigin(Origin: PdfOrigin); dispid 562;
    function SetPageBox(PageBox: PdfPageBox; Left: Single; Top: Single; Right: Single; 
                        Bottom: Single): GdPictureStatus; dispid 563;
    function SetPageContent(const Content: WideString): GdPictureStatus; dispid 564;
    function SetPageLabelsRangeNumPortion(LabelingRangeIdx: Integer; NumPortion: Integer): GdPictureStatus; dispid 565;
    function SetPageLabelsRangePrefix(LabelingRangeIdx: Integer; const Prefix: WideString): GdPictureStatus; dispid 566;
    function SetPageLabelsRangeStartPage(LabelingRangeIdx: Integer; StartPage: Integer): GdPictureStatus; dispid 567;
    function SetPageLabelsRangeStyle(LabelingRangeIdx: Integer; Style: PdfPageLabelStyle): GdPictureStatus; dispid 568;
    function SetPageMetadata(const XMP: WideString): GdPictureStatus; dispid 569;
    function SetPagePrivateTag(const Tag: WideString; const Content: WideString): GdPictureStatus; dispid 570;
    procedure SetPageUserUnit(UserUnit: Single); dispid 571;
    function SetPassword(const Password: WideString): GdPictureStatus; dispid 572;
    function SetPrependContentMode(Enable: WordBool): GdPictureStatus; dispid 573;
    procedure SetProducer(const Producer: WideString); dispid 574;
    function SetSignatureCertificateFromP12(const CertPath: WideString; 
                                            const PFXPassword: WideString): GdPictureStatus; dispid 575;
    function SetSignatureCertificateFromSmartCard(const ProviderName: WideString; 
                                                  const KeyContainerName: WideString; 
                                                  const PinCode: WideString): GdPictureStatus; dispid 576;
    function SetSignatureCertificateFromSmartCardBySerialNumber(const SerialNumber: WideString; 
                                                                const PinCode: WideString): GdPictureStatus; dispid 577;
    function SetSignatureCertificateFromStore(const SerialNumber: WideString): GdPictureStatus; dispid 578;
    function SetSignatureCertificationLevel(Level: PdfSignatureCertificationLevel): GdPictureStatus; dispid 579;
    function SetSignatureHash(hashAlg: PdfSignatureHash): GdPictureStatus; dispid 580;
    function SetSignatureInfo(const Name: WideString; const Reason: WideString; 
                              const Location: WideString; const ContactInfo: WideString): GdPictureStatus; dispid 581;
    function SetSignaturePos(StampLeft: Single; StampBottom: Single; StampWidth: Single; 
                             StampHeight: Single): GdPictureStatus; dispid 582;
    function SetSignaturePosFromPlaceHolder(SignatureIdx: Integer): GdPictureStatus; dispid 583;
    function SetSignaturePosFromPlaceHolder_2(const SignatureName: WideString): GdPictureStatus; dispid 584;
    function SetSignatureStampImage(const StampResName: WideString): GdPictureStatus; dispid 585;
    function SetSignatureText(const Text: WideString; const FontResName: WideString; 
                              FontSize: Single; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                              Black: Byte; AlignHorz: TextAlignment; AlignVert: TextAlignment; 
                              ShowText: WordBool): GdPictureStatus; dispid 586;
    function SetSignatureText_2(const Text: WideString; const FontResName: WideString; 
                                FontSize: Single; Cyan: Byte; Magenta: Byte; Yellow: Byte; 
                                Black: Byte; AlignHorz: TextAlignment; AlignVert: TextAlignment; 
                                TextDecorationStyle: PdfTextDecorationStyle; ShowText: WordBool): GdPictureStatus; dispid 637;
    function SetSignatureTimestampInfo(const TSURL: WideString; const TSUsername: WideString; 
                                       const TSUserpass: WideString): GdPictureStatus; dispid 587;
    function SetSignatureValidationMark(ShowValidationMark: WordBool): GdPictureStatus; dispid 588;
    procedure SetSubject(const Subject: WideString); dispid 589;
    function SetTagActualText(TagID: Integer; const ActualText: WideString): GdPictureStatus; dispid 590;
    function SetTagAlternateDescription(TagID: Integer; const AlternateDescription: WideString): GdPictureStatus; dispid 591;
    function SetTagAttribute(TagID: Integer; const Key: WideString; const Value: WideString): GdPictureStatus; dispid 592;
    function SetTagAttribute_2(TagID: Integer; const Key: WideString; 
                               var Value: {??PSafeArray}OleVariant): GdPictureStatus; dispid 593;
    function SetTagAttribute_3(TagID: Integer; const Key: WideString; Value: Double): GdPictureStatus; dispid 594;
    function SetTagAttribute_4(TagID: Integer; const Key: WideString; 
                               var Value: {??PSafeArray}OleVariant): GdPictureStatus; dispid 595;
    function SetTagLanguage(TagID: Integer; const Language: WideString): GdPictureStatus; dispid 596;
    function SetTagTitle(TagID: Integer; const Title: WideString): GdPictureStatus; dispid 597;
    function SetTextCharSpacing(CharSpacing: Single): GdPictureStatus; dispid 598;
    procedure SetTextExtractionOptions(Options: TextExtractionOptions); dispid 599;
    function SetTextMode(TextMode: PdfTextMode): GdPictureStatus; dispid 600;
    function SetTextRise(Rise: Single): GdPictureStatus; dispid 601;
    function SetTextScaling(Scaling: Single): GdPictureStatus; dispid 602;
    function SetTextSize(TextSize: Single): GdPictureStatus; dispid 603;
    function SetTextWordSpacing(WordSpacing: Single): GdPictureStatus; dispid 604;
    procedure SetTitle(const Title: WideString); dispid 605;
    function SetViewerLayoutMode(LayoutMode: PdfViewerLayoutMode): GdPictureStatus; dispid 606;
    function SetViewerNonFullScreenPageMode(NonFullScreenPageMode: PdfViewerNonFullScreenPageMode): GdPictureStatus; dispid 607;
    function SetViewerOpenAction(ActionID: Integer): GdPictureStatus; dispid 608;
    function SetViewerPageMode(PageMode: PdfViewerPageMode): GdPictureStatus; dispid 609;
    function SetViewerPreference(Preference: PdfViewerPreference; Enable: WordBool): GdPictureStatus; dispid 610;
    function StrokePath: GdPictureStatus; dispid 611;
    function SwapPages(Page1: Integer; Page2: Integer): GdPictureStatus; dispid 612;
    function FlattenAnnotation(AnnotationIdx: Integer): GdPictureStatus; dispid 616;
    procedure ReleaseEventsTarget; dispid 617;
    function MergePages(var Pages: {??PSafeArray}OleVariant; RemovePages: WordBool): GdPictureStatus; dispid 619;
    procedure SetOverrideOcrEngine(Override: WordBool); dispid 620;
    function GetOverrideOcrEngine: WordBool; dispid 621;
    procedure SetOcrPageOrientationDetection(Enabled: WordBool); dispid 622;
    function AddRedactionRegion(Left: Single; Top: Single; Width: Single; Height: Single): GdPictureStatus; dispid 623;
    function AddRedactionRegion_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                  Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 629;
    function AddRedactionRegion_3(Left: Single; Top: Single; Width: Single; Height: Single; 
                                  Red: Byte; Green: Byte; Blue: Byte; Alpha: Byte): GdPictureStatus; dispid 630;
    function ApplyRedaction: GdPictureStatus; dispid 624;
    procedure ClearRedactionRegions; dispid 625;
    function Repair: GdPictureStatus; dispid 626;
    function RemoveHiddenText: GdPictureStatus; dispid 627;
    function ClearCachedResources: GdPictureStatus; dispid 628;
    function DeletePagePieceInfo: GdPictureStatus; dispid 631;
    function HasInvisibleText: WordBool; dispid 632;
    function RemoveAllText: GdPictureStatus; dispid 633;
    function SetTextDecorationStyle(TextDecorationStyle: PdfTextDecorationStyle): GdPictureStatus; dispid 634;
    function SetTextUnderlineWidth(TextDecorationLineWidth: Single): GdPictureStatus; dispid 635;
    function SetTextUnderlineColor(Red: Byte; Green: Byte; Blue: Byte): GdPictureStatus; dispid 636;
    function SetTextUnderlineStyle(TextUnderlineStyle: PdfTextUnderlineStyle): GdPictureStatus; dispid 638;
    function SetTextUnderlineDistance(TextUnderlineDistance: Single): GdPictureStatus; dispid 639;
    function RemoveTextArea(Left: Single; Top: Single; Width: Single; Height: Single): GdPictureStatus; dispid 640;
    function GetPageTextWithCoords_2(const FieldSeparator: WideString; 
                                     Options: TextExtractionOutputInfo): WideString; dispid 641;
    function FlattenVisibleOCGs: GdPictureStatus; dispid 642;
    function ClonePages(const FromPDF: IGdPicturePDF; const PageRange: WideString): GdPictureStatus; dispid 643;
    function SearchText_3(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool; OrdinalComparison: WordBool; 
                          var BoundingBoxes: {??PSafeArray}OleVariant): WordBool; dispid 644;
    function RemovePageBox(PageBox: PdfPageBox): GdPictureStatus; dispid 645;
    function IsTagged: WordBool; dispid 646;
    function UnembedFont(FontIdx: Integer): GdPictureStatus; dispid 647;
    function AddFileAttachmentAnnot(Left: Single; Top: Single; Width: Single; Height: Single; 
                                    var Data: {??PSafeArray}OleVariant; const FileName: WideString; 
                                    const Title: WideString; const Description: WideString; 
                                    Red: Byte; Green: Byte; Blue: Byte; Opacity: Single; 
                                    AnnotIcon: PdfFileAttachmentAnnotIcon): Integer; dispid 648;
    function AddFileAttachmentAnnot_2(Left: Single; Top: Single; Width: Single; Height: Single; 
                                      var Data: {??PSafeArray}OleVariant; 
                                      const FileName: WideString; const Title: WideString; 
                                      const Description: WideString; Cyan: Byte; Magenta: Byte; 
                                      Yellow: Byte; Black: Byte; Opacity: Single; 
                                      AnnotIcon: PdfFileAttachmentAnnotIcon): Integer; dispid 649;
    function RemoveXFAFormFieldsData: GdPictureStatus; dispid 650;
    function SearchTextRegex(const Pattern: WideString; Occurrence: Integer; 
                             CaseSensitive: WordBool; var BoundingBoxes: {??PSafeArray}OleVariant): WordBool; dispid 651;
    function IsValidPDFA: WordBool; dispid 652;
    function IsValidPDFA_2(var DetailedXMLOutput: WideString): WordBool; dispid 653;
    function IsValidPDFA_3(var DetailedXMLOutput: WideString; 
                           var VerifiedConformance: PdfValidationConformance): WordBool; dispid 654;
    function CheckPDFAConformance(Conformance: PdfValidationConformance; 
                                  var DetailedXMLOutput: WideString): WordBool; dispid 655;
    function GetPageImageICCProfile(ImageIdx: Integer; var Data: {??PSafeArray}OleVariant): GdPictureStatus; dispid 656;
    function ConvertToGrayscale(Text: WordBool; Graphics: WordBool; Images: WordBool; 
                                Annotations: WordBool; FormFields: WordBool): GdPictureStatus; dispid 657;
    function SearchText_4(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool; AnyWord: WordBool; OrdinalComparison: WordBool; 
                          var Left: Single; var Top: Single; var Width: Single; var Height: Single): WordBool; dispid 658;
    function SearchText_5(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool; AnyWord: WordBool; OrdinalComparison: WordBool; 
                          var BoundingBoxes: {??PSafeArray}OleVariant): WordBool; dispid 659;
    procedure SetForceRasterizerInterpolation(Forced: WordBool); dispid 660;
    function OverlayPage(PageNo: Integer; DstX: Single; DstY: Single; ScaleX: Single; ScaleY: Single): GdPictureStatus; dispid 661;
    function OverlayPage_2(const FromPDF: IGdPicturePDF; PageNo: Integer; DstX: Single; 
                           DstY: Single; ScaleX: Single; ScaleY: Single): GdPictureStatus; dispid 662;
    function AutoCropPage(MarginLeft: Single; MarginTop: Single; MarginRight: Single; 
                          MarginBottom: Single): GdPictureStatus; dispid 663;
    function SearchAndHighlight(const Pattern: WideString; CaseSensitive: WordBool; Red: Byte; 
                                Green: Byte; Blue: Byte; Alpha: Byte; var Occurrences: Integer): GdPictureStatus; dispid 664;
    function ConvertToGrayscale_2(Text: WordBool; Graphics: WordBool; Images: WordBool; 
                                  Annotations: WordBool; FormFields: WordBool; 
                                  RemoveUnusedResources: WordBool): GdPictureStatus; dispid 665;
    function DropPDFASupport: GdPictureStatus; dispid 666;
    procedure SetJBIG2PMSThreshold(Threshold: Single); dispid 667;
    function HasJavaScript: WordBool; dispid 668;
    function RemoveAnnotationAction(AnnotationIdx: Integer): GdPictureStatus; dispid 669;
    function IsSignatureFieldSigned(SignatureIdx: Integer): WordBool; dispid 670;
    function GridSplit(RowCount: Integer; ColumnCount: Integer; Ordering: PdfGridSplitOrdering): GdPictureStatus; dispid 671;
    function GridSplit_2(var RowStops: {??PSafeArray}OleVariant; 
                         var ColStops: {??PSafeArray}OleVariant; Ordering: PdfGridSplitOrdering): GdPictureStatus; dispid 672;
    function PageIsBlank: WordBool; dispid 673;
    function AutoCropPage_2(MarginLeft: Single; MarginTop: Single; MarginRight: Single; 
                            MarginBottom: Single; IgnoreWhiteRectangles: WordBool): GdPictureStatus; dispid 674;
    function NewActionGoTo_2(DestinationType: PdfDestinationType; Page: Integer; Left: Single; 
                             Right: Single; Bottom: Single; Top: Single; Zoom: Single; 
                             RetainLeft: WordBool; RetainTop: WordBool): Integer; dispid 675;
    function NewActionGoToR_2(DestinationType: PdfDestinationType; const FilePath: WideString; 
                              NewWindow: WordBool; Page: Integer; Left: Single; Right: Single; 
                              Bottom: Single; Top: Single; Zoom: Single; RetainLeft: WordBool; 
                              RetainTop: WordBool): Integer; dispid 676;
    function SmartRedaction(const Options: ISmartRedactionOptions): GdPictureStatus; dispid 677;
    procedure SetSearchTextFuzzyMatch(EnableFuzzyMatch: WordBool); dispid 679;
    function SearchAndAddRedactionRegions(const Pattern: WideString; CaseSensitive: WordBool; 
                                          Red: Byte; Green: Byte; Blue: Byte; Alpha: Byte; 
                                          var Occurrences: Integer): GdPictureStatus; dispid 680;
    function SetSignatureAlternateTitle(const AlternateTitle: WideString): GdPictureStatus; dispid 681;
    function ImportXFDFDataFromIStream(const Stream: IUnknown; ImportFormFields: WordBool; 
                                       ImportAnnotations: WordBool): GdPictureStatus; dispid 682;
    function ImportXFDFDataFromFile(const FilePath: WideString; ImportFormFields: WordBool; 
                                    ImportAnnotations: WordBool): GdPictureStatus; dispid 683;
    function GetAnnotationQuadPoints(AnnotationIdx: Integer; 
                                     var QuadPoints: {??PSafeArray}OleVariant): GdPictureStatus; dispid 684;
  end;

// *********************************************************************//
// DispIntf:  __GdPicturePDF
// Flags:     (4096) Dispatchable
// GUID:      {75738A39-DE0A-3278-A2A6-44414D88375A}
// *********************************************************************//
  __GdPicturePDF = dispinterface
    ['{75738A39-DE0A-3278-A2A6-44414D88375A}']
    procedure OcrPagesProgress(status: GdPictureStatus; PageNo: Integer; processed: Integer; 
                               Count: Integer; var cancel: WordBool); dispid 1;
    procedure BeforePageOcr(PageNo: Integer; var cancel: WordBool); dispid 2;
    procedure PageBitmapOcrReady(PageNo: Integer; ImageID: Integer); dispid 3;
    procedure OcrPagesDone(status: GdPictureStatus); dispid 4;
    procedure ExternalOcrPageRequest(ImageID: Integer; const PdfOcrOptions: IPdfOcrOptions; 
                                     out status: GdPictureStatus; out ResultEncoding: WideString; 
                                     out OcrResult: WideString); dispid 5;
    procedure BeforePdfPrintPage(Page: Integer; PageLeft: Integer; var cancel: WordBool); dispid 6;
    procedure AfterPdfPrintPage(Page: Integer; PageLeft: Integer; var cancel: WordBool); dispid 7;
  end;

// *********************************************************************//
// Interface: _BeforePdfPrintPageEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0425FA11-3762-3F0D-B044-833385D423F5}
// *********************************************************************//
  _BeforePdfPrintPageEventHandler = interface(IDispatch)
    ['{0425FA11-3762-3F0D-B044-833385D423F5}']
  end;

// *********************************************************************//
// DispIntf:  _BeforePdfPrintPageEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0425FA11-3762-3F0D-B044-833385D423F5}
// *********************************************************************//
  _BeforePdfPrintPageEventHandlerDisp = dispinterface
    ['{0425FA11-3762-3F0D-B044-833385D423F5}']
  end;

// *********************************************************************//
// Interface: _AfterPdfPrintPageEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BE4EB426-7321-3D5B-A255-694F9D887551}
// *********************************************************************//
  _AfterPdfPrintPageEventHandler = interface(IDispatch)
    ['{BE4EB426-7321-3D5B-A255-694F9D887551}']
  end;

// *********************************************************************//
// DispIntf:  _AfterPdfPrintPageEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BE4EB426-7321-3D5B-A255-694F9D887551}
// *********************************************************************//
  _AfterPdfPrintPageEventHandlerDisp = dispinterface
    ['{BE4EB426-7321-3D5B-A255-694F9D887551}']
  end;

// *********************************************************************//
// Interface: _ExternalOcrPageRequestEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {49423ABA-6AC6-3259-BF41-09893EEE9A32}
// *********************************************************************//
  _ExternalOcrPageRequestEventHandler = interface(IDispatch)
    ['{49423ABA-6AC6-3259-BF41-09893EEE9A32}']
  end;

// *********************************************************************//
// DispIntf:  _ExternalOcrPageRequestEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {49423ABA-6AC6-3259-BF41-09893EEE9A32}
// *********************************************************************//
  _ExternalOcrPageRequestEventHandlerDisp = dispinterface
    ['{49423ABA-6AC6-3259-BF41-09893EEE9A32}']
  end;

// *********************************************************************//
// Interface: _OcrPagesProgressEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AEF95872-5108-3B21-945F-2AC999C690F9}
// *********************************************************************//
  _OcrPagesProgressEventHandler = interface(IDispatch)
    ['{AEF95872-5108-3B21-945F-2AC999C690F9}']
  end;

// *********************************************************************//
// DispIntf:  _OcrPagesProgressEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AEF95872-5108-3B21-945F-2AC999C690F9}
// *********************************************************************//
  _OcrPagesProgressEventHandlerDisp = dispinterface
    ['{AEF95872-5108-3B21-945F-2AC999C690F9}']
  end;

// *********************************************************************//
// Interface: _BeforePageOcrEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A12D321-718B-3588-A18A-F7F236C6CB46}
// *********************************************************************//
  _BeforePageOcrEventHandler = interface(IDispatch)
    ['{3A12D321-718B-3588-A18A-F7F236C6CB46}']
  end;

// *********************************************************************//
// DispIntf:  _BeforePageOcrEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A12D321-718B-3588-A18A-F7F236C6CB46}
// *********************************************************************//
  _BeforePageOcrEventHandlerDisp = dispinterface
    ['{3A12D321-718B-3588-A18A-F7F236C6CB46}']
  end;

// *********************************************************************//
// Interface: _PageBitmapOcrReadyEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E09B1C3C-4818-319E-8C07-BCEAB34C5DF6}
// *********************************************************************//
  _PageBitmapOcrReadyEventHandler = interface(IDispatch)
    ['{E09B1C3C-4818-319E-8C07-BCEAB34C5DF6}']
  end;

// *********************************************************************//
// DispIntf:  _PageBitmapOcrReadyEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E09B1C3C-4818-319E-8C07-BCEAB34C5DF6}
// *********************************************************************//
  _PageBitmapOcrReadyEventHandlerDisp = dispinterface
    ['{E09B1C3C-4818-319E-8C07-BCEAB34C5DF6}']
  end;

// *********************************************************************//
// Interface: _OcrPagesDoneEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {12A9C2C4-700D-3621-BF41-CA4109FB648A}
// *********************************************************************//
  _OcrPagesDoneEventHandler = interface(IDispatch)
    ['{12A9C2C4-700D-3621-BF41-CA4109FB648A}']
  end;

// *********************************************************************//
// DispIntf:  _OcrPagesDoneEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {12A9C2C4-700D-3621-BF41-CA4109FB648A}
// *********************************************************************//
  _OcrPagesDoneEventHandlerDisp = dispinterface
    ['{12A9C2C4-700D-3621-BF41-CA4109FB648A}']
  end;

// *********************************************************************//
// Interface: IPdfOcrOptions
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D63F369-74F5-4C4B-A203-B68374F6A35A}
// *********************************************************************//
  IPdfOcrOptions = interface(IDispatch)
    ['{3D63F369-74F5-4C4B-A203-B68374F6A35A}']
    function Get_DetectOrientation: WordBool; safecall;
    procedure Set_DetectOrientation(pRetVal: WordBool); safecall;
    function Get_DetectSkew: WordBool; safecall;
    procedure Set_DetectSkew(pRetVal: WordBool); safecall;
    function Get_OCRMode: OCRMode; safecall;
    procedure Set_OCRMode(pRetVal: OCRMode); safecall;
    function Get_ResourcePath: WideString; safecall;
    procedure Set_ResourcePath(const pRetVal: WideString); safecall;
    function Get_Dictionary: WideString; safecall;
    procedure Set_Dictionary(const pRetVal: WideString); safecall;
    function Get_CharWhiteList: WideString; safecall;
    procedure Set_CharWhiteList(const pRetVal: WideString); safecall;
    function Get_TimeoutMillisec: Integer; safecall;
    procedure Set_TimeoutMillisec(pRetVal: Integer); safecall;
    function Get_PageNo: Integer; safecall;
    procedure Set_PageNo(pRetVal: Integer); safecall;
    function Get_EnablePreprocessing: WordBool; safecall;
    procedure Set_EnablePreprocessing(pRetVal: WordBool); safecall;
    function Get_RemoveExistingText: WordBool; safecall;
    procedure Set_RemoveExistingText(pRetVal: WordBool); safecall;
    property DetectOrientation: WordBool read Get_DetectOrientation write Set_DetectOrientation;
    property DetectSkew: WordBool read Get_DetectSkew write Set_DetectSkew;
    property OCRMode: OCRMode read Get_OCRMode write Set_OCRMode;
    property ResourcePath: WideString read Get_ResourcePath write Set_ResourcePath;
    property Dictionary: WideString read Get_Dictionary write Set_Dictionary;
    property CharWhiteList: WideString read Get_CharWhiteList write Set_CharWhiteList;
    property TimeoutMillisec: Integer read Get_TimeoutMillisec write Set_TimeoutMillisec;
    property PageNo: Integer read Get_PageNo write Set_PageNo;
    property EnablePreprocessing: WordBool read Get_EnablePreprocessing write Set_EnablePreprocessing;
    property RemoveExistingText: WordBool read Get_RemoveExistingText write Set_RemoveExistingText;
  end;

// *********************************************************************//
// DispIntf:  IPdfOcrOptionsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D63F369-74F5-4C4B-A203-B68374F6A35A}
// *********************************************************************//
  IPdfOcrOptionsDisp = dispinterface
    ['{3D63F369-74F5-4C4B-A203-B68374F6A35A}']
    property DetectOrientation: WordBool dispid 1;
    property DetectSkew: WordBool dispid 2;
    property OCRMode: OCRMode dispid 3;
    property ResourcePath: WideString dispid 4;
    property Dictionary: WideString dispid 5;
    property CharWhiteList: WideString dispid 6;
    property TimeoutMillisec: Integer dispid 7;
    property PageNo: Integer dispid 8;
    property EnablePreprocessing: WordBool dispid 9;
    property RemoveExistingText: WordBool dispid 10;
  end;

// *********************************************************************//
// Interface: ISmartRedactionOptions
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {14587E1E-35FA-4716-AE19-A18E355EFA17}
// *********************************************************************//
  ISmartRedactionOptions = interface(IDispatch)
    ['{14587E1E-35FA-4716-AE19-A18E355EFA17}']
    function Get_PageRange: WideString; safecall;
    procedure Set_PageRange(const pRetVal: WideString); safecall;
    function Get_Immediate: WordBool; safecall;
    procedure Set_Immediate(pRetVal: WordBool); safecall;
    function Get_RedactEmailAddresses: WordBool; safecall;
    procedure Set_RedactEmailAddresses(pRetVal: WordBool); safecall;
    function Get_RedactPostalAddresses: WordBool; safecall;
    procedure Set_RedactPostalAddresses(pRetVal: WordBool); safecall;
    function Get_RedactURIs: WordBool; safecall;
    procedure Set_RedactURIs(pRetVal: WordBool); safecall;
    function Get_RedactPhoneNumbers: WordBool; safecall;
    procedure Set_RedactPhoneNumbers(pRetVal: WordBool); safecall;
    function Get_RedactVatIDs: WordBool; safecall;
    procedure Set_RedactVatIDs(pRetVal: WordBool); safecall;
    function Get_RedactCreditCardNumbers: WordBool; safecall;
    procedure Set_RedactCreditCardNumbers(pRetVal: WordBool); safecall;
    function Get_DetectOrientation: WordBool; safecall;
    procedure Set_DetectOrientation(pRetVal: WordBool); safecall;
    function Get_ResourcePath: WideString; safecall;
    procedure Set_ResourcePath(const pRetVal: WideString); safecall;
    function Get_Dictionary: WideString; safecall;
    procedure Set_Dictionary(const pRetVal: WideString); safecall;
    function Get_TimeoutMillisec: Integer; safecall;
    procedure Set_TimeoutMillisec(pRetVal: Integer); safecall;
    function Get_ThreadCount: Integer; safecall;
    procedure Set_ThreadCount(pRetVal: Integer); safecall;
    function Get_RedactSocialSecurityNumbers: WordBool; safecall;
    procedure Set_RedactSocialSecurityNumbers(pRetVal: WordBool); safecall;
    property PageRange: WideString read Get_PageRange write Set_PageRange;
    property Immediate: WordBool read Get_Immediate write Set_Immediate;
    property RedactEmailAddresses: WordBool read Get_RedactEmailAddresses write Set_RedactEmailAddresses;
    property RedactPostalAddresses: WordBool read Get_RedactPostalAddresses write Set_RedactPostalAddresses;
    property RedactURIs: WordBool read Get_RedactURIs write Set_RedactURIs;
    property RedactPhoneNumbers: WordBool read Get_RedactPhoneNumbers write Set_RedactPhoneNumbers;
    property RedactVatIDs: WordBool read Get_RedactVatIDs write Set_RedactVatIDs;
    property RedactCreditCardNumbers: WordBool read Get_RedactCreditCardNumbers write Set_RedactCreditCardNumbers;
    property DetectOrientation: WordBool read Get_DetectOrientation write Set_DetectOrientation;
    property ResourcePath: WideString read Get_ResourcePath write Set_ResourcePath;
    property Dictionary: WideString read Get_Dictionary write Set_Dictionary;
    property TimeoutMillisec: Integer read Get_TimeoutMillisec write Set_TimeoutMillisec;
    property ThreadCount: Integer read Get_ThreadCount write Set_ThreadCount;
    property RedactSocialSecurityNumbers: WordBool read Get_RedactSocialSecurityNumbers write Set_RedactSocialSecurityNumbers;
  end;

// *********************************************************************//
// DispIntf:  ISmartRedactionOptionsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {14587E1E-35FA-4716-AE19-A18E355EFA17}
// *********************************************************************//
  ISmartRedactionOptionsDisp = dispinterface
    ['{14587E1E-35FA-4716-AE19-A18E355EFA17}']
    property PageRange: WideString dispid 1;
    property Immediate: WordBool dispid 2;
    property RedactEmailAddresses: WordBool dispid 3;
    property RedactPostalAddresses: WordBool dispid 14;
    property RedactURIs: WordBool dispid 4;
    property RedactPhoneNumbers: WordBool dispid 5;
    property RedactVatIDs: WordBool dispid 6;
    property RedactCreditCardNumbers: WordBool dispid 7;
    property DetectOrientation: WordBool dispid 8;
    property ResourcePath: WideString dispid 9;
    property Dictionary: WideString dispid 10;
    property TimeoutMillisec: Integer dispid 11;
    property ThreadCount: Integer dispid 12;
    property RedactSocialSecurityNumbers: WordBool dispid 13;
  end;

// *********************************************************************//
// Interface: IGdPicturePDFReducer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {426B5317-D5C9-411D-A518-E026C137E3F0}
// *********************************************************************//
  IGdPicturePDFReducer = interface(IDispatch)
    ['{426B5317-D5C9-411D-A518-E026C137E3F0}']
    function Get_PDFReducerConfiguration: IPDFReducerConfiguration; safecall;
    procedure _Set_PDFReducerConfiguration(const pRetVal: IPDFReducerConfiguration); safecall;
    function ProcessDocument(const InputPath: WideString; const OutputPath: WideString): GdPictureStatus; safecall;
    function GetStat: GdPictureStatus; safecall;
    function GetReducerStat: PDFReducerErrorStatus; safecall;
    function GetReducerErrorPageNumber: Integer; safecall;
    function GetWarningCount: Integer; safecall;
    function GetReducerWarningStat(WarningStatIdx: Integer): PDFReducerWarningStatus; safecall;
    function GetReducerWarningPageNumber(WarningStatIdx: Integer): Integer; safecall;
    function ProcessDocument_2(const InputStream: IUnknown; const OutputStream: IUnknown): GdPictureStatus; safecall;
    property PDFReducerConfiguration: IPDFReducerConfiguration read Get_PDFReducerConfiguration write _Set_PDFReducerConfiguration;
  end;

// *********************************************************************//
// DispIntf:  IGdPicturePDFReducerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {426B5317-D5C9-411D-A518-E026C137E3F0}
// *********************************************************************//
  IGdPicturePDFReducerDisp = dispinterface
    ['{426B5317-D5C9-411D-A518-E026C137E3F0}']
    property PDFReducerConfiguration: IPDFReducerConfiguration dispid 1;
    function ProcessDocument(const InputPath: WideString; const OutputPath: WideString): GdPictureStatus; dispid 2;
    function GetStat: GdPictureStatus; dispid 3;
    function GetReducerStat: PDFReducerErrorStatus; dispid 4;
    function GetReducerErrorPageNumber: Integer; dispid 5;
    function GetWarningCount: Integer; dispid 6;
    function GetReducerWarningStat(WarningStatIdx: Integer): PDFReducerWarningStatus; dispid 7;
    function GetReducerWarningPageNumber(WarningStatIdx: Integer): Integer; dispid 8;
    function ProcessDocument_2(const InputStream: IUnknown; const OutputStream: IUnknown): GdPictureStatus; dispid 9;
  end;

// *********************************************************************//
// Interface: IGdPictureSegmenter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {96AAC88F-80CA-43E8-8576-8221FA5608B2}
// *********************************************************************//
  IGdPictureSegmenter = interface(IDispatch)
    ['{96AAC88F-80CA-43E8-8576-8221FA5608B2}']
    function Get_SegmentationMode: SegmentationMode; safecall;
    procedure Set_SegmentationMode(pRetVal: SegmentationMode); safecall;
    function Get_InputValue: WideString; safecall;
    procedure Set_InputValue(const pRetVal: WideString); safecall;
    procedure Dispose; safecall;
    function GetBlockBottom(const SegmentationResultID: WideString; BlockIdx: Integer): Integer; safecall;
    function GetBlockCount(const SegmentationResultID: WideString): Integer; safecall;
    function GetBlockFirstParagraphIndex(const SegmentationResultID: WideString; BlockIdx: Integer): Integer; safecall;
    function GetBlockLeft(const SegmentationResultID: WideString; BlockIdx: Integer): Integer; safecall;
    function GetBlockParagraphCount(const SegmentationResultID: WideString; BlockIdx: Integer): Integer; safecall;
    function GetBlockRight(const SegmentationResultID: WideString; BlockIdx: Integer): Integer; safecall;
    function GetBlockTop(const SegmentationResultID: WideString; BlockIdx: Integer): Integer; safecall;
    function GetBlockType(const SegmentationResultID: WideString; BlockIdx: Integer): OCRBlockType; safecall;
    function GetCharacterBottom(const SegmentationResultID: WideString; CharacterIdx: Integer): Integer; safecall;
    function GetCharacterCount(const SegmentationResultID: WideString): Integer; safecall;
    function GetCharacterLeft(const SegmentationResultID: WideString; CharacterIdx: Integer): Integer; safecall;
    function GetCharacterRight(const SegmentationResultID: WideString; CharacterIdx: Integer): Integer; safecall;
    function GetCharacterTop(const SegmentationResultID: WideString; CharacterIdx: Integer): Integer; safecall;
    function GetParagraphBottom(const SegmentationResultID: WideString; ParagraphIdx: Integer): Integer; safecall;
    function GetParagraphCount(const SegmentationResultID: WideString): Integer; safecall;
    function GetParagraphFirstTextLineIndex(const SegmentationResultID: WideString; 
                                            ParagraphIdx: Integer): Integer; safecall;
    function GetParagraphLeft(const SegmentationResultID: WideString; ParagraphIdx: Integer): Integer; safecall;
    function GetParagraphRight(const SegmentationResultID: WideString; ParagraphIdx: Integer): Integer; safecall;
    function GetParagraphTextLineCount(const SegmentationResultID: WideString; ParagraphIdx: Integer): Integer; safecall;
    function GetParagraphTop(const SegmentationResultID: WideString; ParagraphIdx: Integer): Integer; safecall;
    function GetStat: GdPictureStatus; safecall;
    function GetTextLineBottom(const SegmentationResultID: WideString; TextLineIdx: Integer): Integer; safecall;
    function GetTextLineCount(const SegmentationResultID: WideString): Integer; safecall;
    function GetTextLineFirstWordIndex(const SegmentationResultID: WideString; TextLineIdx: Integer): Integer; safecall;
    function GetTextLineLeft(const SegmentationResultID: WideString; TextLineIdx: Integer): Integer; safecall;
    function GetTextLineRight(const SegmentationResultID: WideString; TextLineIdx: Integer): Integer; safecall;
    function GetTextLineTop(const SegmentationResultID: WideString; TextLineIdx: Integer): Integer; safecall;
    function GetTextLineWordCount(const SegmentationResultID: WideString; TextLineIdx: Integer): Integer; safecall;
    function GetWordBottom(const SegmentationResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordCharacterCount(const SegmentationResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordCount(const SegmentationResultID: WideString): Integer; safecall;
    function GetWordFirstCharacterIndex(const SegmentationResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordLeft(const SegmentationResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordRight(const SegmentationResultID: WideString; WordIdx: Integer): Integer; safecall;
    function GetWordTop(const SegmentationResultID: WideString; WordIdx: Integer): Integer; safecall;
    function ReleaseSegmentationResult(const SegmentationResultID: WideString): GdPictureStatus; safecall;
    function ReleaseSegmentationResults: GdPictureStatus; safecall;
    function RunSegmentation: WideString; safecall;
    function RunSegmentation_2(const SegmentationResuldID: WideString): WideString; safecall;
    function SetImage(ImageID: Integer): GdPictureStatus; safecall;
    function SetROI(Left: Integer; Top: Integer; Width: Integer; Height: Integer): GdPictureStatus; safecall;
    function ResetROI: GdPictureStatus; safecall;
    property SegmentationMode: SegmentationMode read Get_SegmentationMode write Set_SegmentationMode;
    property InputValue: WideString read Get_InputValue write Set_InputValue;
  end;

// *********************************************************************//
// DispIntf:  IGdPictureSegmenterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {96AAC88F-80CA-43E8-8576-8221FA5608B2}
// *********************************************************************//
  IGdPictureSegmenterDisp = dispinterface
    ['{96AAC88F-80CA-43E8-8576-8221FA5608B2}']
    property SegmentationMode: SegmentationMode dispid 1;
    property InputValue: WideString dispid 45;
    procedure Dispose; dispid 2;
    function GetBlockBottom(const SegmentationResultID: WideString; BlockIdx: Integer): Integer; dispid 3;
    function GetBlockCount(const SegmentationResultID: WideString): Integer; dispid 4;
    function GetBlockFirstParagraphIndex(const SegmentationResultID: WideString; BlockIdx: Integer): Integer; dispid 5;
    function GetBlockLeft(const SegmentationResultID: WideString; BlockIdx: Integer): Integer; dispid 6;
    function GetBlockParagraphCount(const SegmentationResultID: WideString; BlockIdx: Integer): Integer; dispid 7;
    function GetBlockRight(const SegmentationResultID: WideString; BlockIdx: Integer): Integer; dispid 8;
    function GetBlockTop(const SegmentationResultID: WideString; BlockIdx: Integer): Integer; dispid 9;
    function GetBlockType(const SegmentationResultID: WideString; BlockIdx: Integer): OCRBlockType; dispid 10;
    function GetCharacterBottom(const SegmentationResultID: WideString; CharacterIdx: Integer): Integer; dispid 11;
    function GetCharacterCount(const SegmentationResultID: WideString): Integer; dispid 12;
    function GetCharacterLeft(const SegmentationResultID: WideString; CharacterIdx: Integer): Integer; dispid 13;
    function GetCharacterRight(const SegmentationResultID: WideString; CharacterIdx: Integer): Integer; dispid 14;
    function GetCharacterTop(const SegmentationResultID: WideString; CharacterIdx: Integer): Integer; dispid 15;
    function GetParagraphBottom(const SegmentationResultID: WideString; ParagraphIdx: Integer): Integer; dispid 16;
    function GetParagraphCount(const SegmentationResultID: WideString): Integer; dispid 17;
    function GetParagraphFirstTextLineIndex(const SegmentationResultID: WideString; 
                                            ParagraphIdx: Integer): Integer; dispid 18;
    function GetParagraphLeft(const SegmentationResultID: WideString; ParagraphIdx: Integer): Integer; dispid 19;
    function GetParagraphRight(const SegmentationResultID: WideString; ParagraphIdx: Integer): Integer; dispid 20;
    function GetParagraphTextLineCount(const SegmentationResultID: WideString; ParagraphIdx: Integer): Integer; dispid 21;
    function GetParagraphTop(const SegmentationResultID: WideString; ParagraphIdx: Integer): Integer; dispid 22;
    function GetStat: GdPictureStatus; dispid 23;
    function GetTextLineBottom(const SegmentationResultID: WideString; TextLineIdx: Integer): Integer; dispid 24;
    function GetTextLineCount(const SegmentationResultID: WideString): Integer; dispid 25;
    function GetTextLineFirstWordIndex(const SegmentationResultID: WideString; TextLineIdx: Integer): Integer; dispid 26;
    function GetTextLineLeft(const SegmentationResultID: WideString; TextLineIdx: Integer): Integer; dispid 27;
    function GetTextLineRight(const SegmentationResultID: WideString; TextLineIdx: Integer): Integer; dispid 28;
    function GetTextLineTop(const SegmentationResultID: WideString; TextLineIdx: Integer): Integer; dispid 29;
    function GetTextLineWordCount(const SegmentationResultID: WideString; TextLineIdx: Integer): Integer; dispid 30;
    function GetWordBottom(const SegmentationResultID: WideString; WordIdx: Integer): Integer; dispid 31;
    function GetWordCharacterCount(const SegmentationResultID: WideString; WordIdx: Integer): Integer; dispid 32;
    function GetWordCount(const SegmentationResultID: WideString): Integer; dispid 33;
    function GetWordFirstCharacterIndex(const SegmentationResultID: WideString; WordIdx: Integer): Integer; dispid 34;
    function GetWordLeft(const SegmentationResultID: WideString; WordIdx: Integer): Integer; dispid 35;
    function GetWordRight(const SegmentationResultID: WideString; WordIdx: Integer): Integer; dispid 36;
    function GetWordTop(const SegmentationResultID: WideString; WordIdx: Integer): Integer; dispid 37;
    function ReleaseSegmentationResult(const SegmentationResultID: WideString): GdPictureStatus; dispid 38;
    function ReleaseSegmentationResults: GdPictureStatus; dispid 39;
    function RunSegmentation: WideString; dispid 40;
    function RunSegmentation_2(const SegmentationResuldID: WideString): WideString; dispid 41;
    function SetImage(ImageID: Integer): GdPictureStatus; dispid 42;
    function SetROI(Left: Integer; Top: Integer; Width: Integer; Height: Integer): GdPictureStatus; dispid 43;
    function ResetROI: GdPictureStatus; dispid 44;
  end;

// *********************************************************************//
// Interface: IGdViewer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5209D70B-F745-4442-A65E-C84161C8DBFE}
// *********************************************************************//
  IGdViewer = interface(IDispatch)
    ['{5209D70B-F745-4442-A65E-C84161C8DBFE}']
    function Get_PdfEnableFileLinks: WordBool; safecall;
    procedure Set_PdfEnableFileLinks(pRetVal: WordBool); safecall;
    function Get_PdfIncreaseTextContrast: WordBool; safecall;
    procedure Set_PdfIncreaseTextContrast(pRetVal: WordBool); safecall;
    function Get_PdfVerifyDigitalCertificates: WordBool; safecall;
    procedure Set_PdfVerifyDigitalCertificates(pRetVal: WordBool); safecall;
    function Get_ScrollBars: WordBool; safecall;
    procedure Set_ScrollBars(pRetVal: WordBool); safecall;
    function Get_ForceScrollBars: WordBool; safecall;
    procedure Set_ForceScrollBars(pRetVal: WordBool); safecall;
    function Get_EnableMenu: WordBool; safecall;
    procedure Set_EnableMenu(pRetVal: WordBool); safecall;
    function Get_ViewRotation: RotateFlipType; safecall;
    procedure Set_ViewRotation(pRetVal: RotateFlipType); safecall;
    function Get_PageRotation: RotateFlipType; safecall;
    function Get_PdfShowOpenFileDialogForDecryption: WordBool; safecall;
    procedure Set_PdfShowOpenFileDialogForDecryption(pRetVal: WordBool); safecall;
    function Get_PageRenderRotation: RotateFlipType; safecall;
    function Get_PageWidth: Integer; safecall;
    function Get_PageHeight: Integer; safecall;
    function Get_MouseMode: ViewerMouseMode; safecall;
    procedure Set_MouseMode(pRetVal: ViewerMouseMode); safecall;
    function Get_Zoom: Double; safecall;
    procedure Set_Zoom(pRetVal: Double); safecall;
    function Get_PdfShowDialogForPassword: WordBool; safecall;
    procedure Set_PdfShowDialogForPassword(pRetVal: WordBool); safecall;
    function Get_ZoomCenterAtMousePosition: WordBool; safecall;
    procedure Set_ZoomCenterAtMousePosition(pRetVal: WordBool); safecall;
    function Get_MagnifierWidth: Integer; safecall;
    procedure Set_MagnifierWidth(pRetVal: Integer); safecall;
    function Get_VScrollVisible: WordBool; safecall;
    function Get_HScrollVisible: WordBool; safecall;
    function Get_EnableICM: WordBool; safecall;
    procedure Set_EnableICM(pRetVal: WordBool); safecall;
    function Get_RenderGdPictureAnnots: WordBool; safecall;
    procedure Set_RenderGdPictureAnnots(pRetVal: WordBool); safecall;
    function Get_HQAnnotationRendering: WordBool; safecall;
    procedure Set_HQAnnotationRendering(pRetVal: WordBool); safecall;
    function Get_AllowDropFile: WordBool; safecall;
    procedure Set_AllowDropFile(pRetVal: WordBool); safecall;
    function Get_AnnotationDropShadow: WordBool; safecall;
    procedure Set_AnnotationDropShadow(pRetVal: WordBool); safecall;
    function Get_AnnotationResizeRotateHandlesScale: Single; safecall;
    procedure Set_AnnotationResizeRotateHandlesScale(pRetVal: Single); safecall;
    function Get_AnnotationEnableMultiSelect: WordBool; safecall;
    procedure Set_AnnotationEnableMultiSelect(pRetVal: WordBool); safecall;
    function Get_EnableTextSelection: WordBool; safecall;
    procedure Set_EnableTextSelection(pRetVal: WordBool); safecall;
    function Get_PageDisplayMode: PageDisplayMode; safecall;
    procedure Set_PageDisplayMode(pRetVal: PageDisplayMode); safecall;
    function Get_EnableDeferredPainting: WordBool; safecall;
    procedure Set_EnableDeferredPainting(pRetVal: WordBool); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRetVal: Integer); safecall;
    function Get_EnabledProgressBar: WordBool; safecall;
    procedure Set_EnabledProgressBar(pRetVal: WordBool); safecall;
    function Get_MagnifierHeight: Integer; safecall;
    procedure Set_MagnifierHeight(pRetVal: Integer); safecall;
    function Get_ZoomMax: Double; safecall;
    function Get_MagnifierZoomY: Single; safecall;
    procedure Set_MagnifierZoomY(pRetVal: Single); safecall;
    function Get_MouseButtonForMouseMode: MouseButton; safecall;
    procedure Set_MouseButtonForMouseMode(pRetVal: MouseButton); safecall;
    function Get_ContinuousViewMode: WordBool; safecall;
    procedure Set_ContinuousViewMode(pRetVal: WordBool); safecall;
    function Get_MagnifierZoomX: Single; safecall;
    procedure Set_MagnifierZoomX(pRetVal: Single); safecall;
    function Get_RectIsEditable: WordBool; safecall;
    procedure Set_RectIsEditable(pRetVal: WordBool); safecall;
    function Get_Gamma: Single; safecall;
    procedure Set_Gamma(pRetVal: Single); safecall;
    function Get_MouseWheelMode: ViewerMouseWheelMode; safecall;
    procedure Set_MouseWheelMode(pRetVal: ViewerMouseWheelMode); safecall;
    function Get_KeepDocumentPosition: WordBool; safecall;
    procedure Set_KeepDocumentPosition(pRetVal: WordBool); safecall;
    function Get_PdfEnableLinks: WordBool; safecall;
    procedure Set_PdfEnableLinks(pRetVal: WordBool); safecall;
    function Get_PdfDisplayFormField: WordBool; safecall;
    procedure Set_PdfDisplayFormField(pRetVal: WordBool); safecall;
    function Get_DisplayQualityAuto: WordBool; safecall;
    procedure Set_DisplayQualityAuto(pRetVal: WordBool); safecall;
    function Get_DisplayQuality: DisplayQuality; safecall;
    procedure Set_DisplayQuality(pRetVal: DisplayQuality); safecall;
    function Get_AnimateGIF: WordBool; safecall;
    procedure Set_AnimateGIF(pRetVal: WordBool); safecall;
    function Get_DocumentPosition: ViewerDocumentPosition; safecall;
    procedure Set_DocumentPosition(pRetVal: ViewerDocumentPosition); safecall;
    function Get_DocumentAlignment: ViewerDocumentAlignment; safecall;
    procedure Set_DocumentAlignment(pRetVal: ViewerDocumentAlignment); safecall;
    function Get_RegionsAreEditable: WordBool; safecall;
    procedure Set_RegionsAreEditable(pRetVal: WordBool); safecall;
    function Get_ClipRegionsToPageBounds: WordBool; safecall;
    procedure Set_ClipRegionsToPageBounds(pRetVal: WordBool); safecall;
    function Get_ClipAnnotsToPageBounds: WordBool; safecall;
    procedure Set_ClipAnnotsToPageBounds(pRetVal: WordBool); safecall;
    function Get_ZoomMode: ViewerZoomMode; safecall;
    procedure Set_ZoomMode(pRetVal: ViewerZoomMode); safecall;
    function Get_EnableMouseWheel: WordBool; safecall;
    procedure Set_EnableMouseWheel(pRetVal: WordBool); safecall;
    function Get_ZoomStep: Integer; safecall;
    procedure Set_ZoomStep(pRetVal: Integer); safecall;
    function Get_ScrollSmallChange: Smallint; safecall;
    procedure Set_ScrollSmallChange(pRetVal: Smallint); safecall;
    function Get_ScrollLargeChange: Smallint; safecall;
    procedure Set_ScrollLargeChange(pRetVal: Smallint); safecall;
    function Get_VerticalResolution: Single; safecall;
    function Get_HorizontalResolution: Single; safecall;
    function Get_RectBorderSize: Integer; safecall;
    procedure Set_RectBorderSize(pRetVal: Integer); safecall;
    function Get_CurrentPage: Integer; safecall;
    function Get_SilentMode: WordBool; safecall;
    procedure Set_SilentMode(pRetVal: WordBool); safecall;
    function Get_ForceTemporaryMode: WordBool; safecall;
    procedure Set_ForceTemporaryMode(pRetVal: WordBool); safecall;
    function Get_IgnoreDocumentResolution: WordBool; safecall;
    procedure Set_IgnoreDocumentResolution(pRetVal: WordBool); safecall;
    function Get_PageCount: Integer; safecall;
    function Get_LockViewer: WordBool; safecall;
    procedure Set_LockViewer(pRetVal: WordBool); safecall;
    function Get_DrawPageBorders: WordBool; safecall;
    procedure Set_DrawPageBorders(pRetVal: WordBool); safecall;
    function Get_PageBordersPenSize: Integer; safecall;
    procedure Set_PageBordersPenSize(pRetVal: Integer); safecall;
    function Get_PageBordersColor: Integer; safecall;
    procedure Set_PageBordersColor(pRetVal: Integer); safecall;
    function Get_hWnd: Integer; safecall;
    function Get_DocumentFormat: DocumentFormat; safecall;
    function Get_PreserveViewRotation: WordBool; safecall;
    procedure Set_PreserveViewRotation(pRetVal: WordBool); safecall;
    function Get_EnableFuzzySearch: WordBool; safecall;
    procedure Set_EnableFuzzySearch(pRetVal: WordBool); safecall;
    procedure AddConnectedLinesAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                                Opacity: Single); safecall;
    procedure AddEllipseAnnotInteractive(Fill: WordBool; Stroke: WordBool; BackColor: Integer; 
                                         BorderColor: Integer; BorderWidth: Single; Opacity: Single); safecall;
    procedure AddEmbeddedImageAnnotInteractive(ImageID: Integer; Stroke: WordBool; 
                                               BorderColor: Integer; BorderWidth: Single; 
                                               Opacity: Single); safecall;
    procedure AddEmbeddedImageAnnotInteractive_2(const ImagePath: WideString; Stroke: WordBool; 
                                                 BorderColor: Integer; BorderWidth: Single; 
                                                 Opacity: Single); safecall;
    procedure AddFreeHandAnnotInteractive(BorderColor: Integer; BorderWidth: Single; Opacity: Single); safecall;
    procedure AddFreeHandAnnotInteractive_2(BorderColor: Integer; BorderWidth: Single; 
                                            Opacity: Single; ContinuousMode: WordBool); safecall;
    procedure AddFreeHandHighlighterAnnotInteractive(BorderColor: Integer; BorderWidth: Single); safecall;
    procedure AddFreeHandHighlighterAnnotInteractive_2(BorderColor: Integer; BorderWidth: Single; 
                                                       ContinuousMode: WordBool); safecall;
    procedure AddFreeHandPolygonAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                                 BackColor: Integer; Opacity: Single); safecall;
    procedure AddLineAnnotInteractive(BorderColor: Integer; BorderWidth: Single; Opacity: Single); safecall;
    procedure AddLineArrowAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                           ArrowWidth: Single; ArrowHeight: Single; 
                                           ArrowFilled: WordBool; Opacity: Single); safecall;
    procedure AddLineArrowAnnotInteractive_2(BorderColor: Integer; BorderWidth: Single; 
                                             ArrowWidth: Single; ArrowHeight: Single; 
                                             ArrowFilled: WordBool; Opacity: Single; 
                                             Reversed: WordBool); safecall;
    procedure AddLinkAnnotationInteractive(const Text: WideString; const Link: WideString; 
                                           ForeColor: Integer; HoverForeColor: Integer; 
                                           const FontName: WideString; FontStyle: FontStyle; 
                                           HoverFontStyle: FontStyle; Opacity: Single; 
                                           Rotation: Single); safecall;
    procedure AddPolygonAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                         BackColor: Integer; Opacity: Single); safecall;
    procedure AddPolyRulerAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                           Opacity: Single; MeasurementUnit: UnitMode); safecall;
    procedure AddRectangleAnnotInteractive(Fill: WordBool; Stroke: WordBool; BackColor: Integer; 
                                           BorderColor: Integer; BorderWidth: Single; 
                                           Opacity: Single); safecall;
    procedure AddRectangleHighlighterAnnotInteractive(BackColor: Integer); safecall;
    function AddRegion(const Name: WideString; Left: Integer; Top: Integer; Width: Integer; 
                       Height: Integer; MixMode: ForegroundMixMode; RegionColor: Integer): Integer; safecall;
    function AddRegionInches(const Name: WideString; Left: Single; Top: Single; Width: Single; 
                             Height: Single; MixMode: ForegroundMixMode; RegionColor: Integer): Integer; safecall;
    procedure AddRubberStampAnnotInteractive(const Text: WideString; ForeColor: Integer; 
                                             const FontName: WideString; FontStyle: FontStyle; 
                                             BorderColor: Integer; BorderWidth: Single; 
                                             Opacity: Single; Rotation: Single); safecall;
    procedure AddRulerAnnotInteractive(BorderColor: Integer; BorderWidth: Single; Opacity: Single; 
                                       MeasurementUnit: UnitMode); safecall;
    procedure AddStickyNoteAnnotationInteractive(const Text: WideString; ForeColor: Integer; 
                                                 const FontName: WideString; FontStyle: FontStyle; 
                                                 FontSize: Single; Opacity: Single; Rotation: Single); safecall;
    procedure AddTextAnnotationInteractive(const Text: WideString; ForeColor: Integer; 
                                           const FontName: WideString; FontStyle: FontStyle; 
                                           FontSize: Single; Fill: WordBool; BorderColor: Integer; 
                                           BackColor: Integer; Opacity: Single; Rotation: Single); safecall;
    function ARGBI(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer; safecall;
    function BurnAnnotationsToPage(RemoveInitialAnnots: WordBool): GdPictureStatus; safecall;
    function BurnAnnotationsToPage_2(RemoveInitialAnnots: WordBool; Intent: GdPictureOutputIntent): GdPictureStatus; safecall;
    function BurnAnnotationsToPage_3(RemoveInitialAnnots: WordBool; VectorMode: WordBool): GdPictureStatus; safecall;
    function CancelLastAnnotInteractiveAdd: GdPictureStatus; safecall;
    function TerminateLastAnnotInteractiveAdd: GdPictureStatus; safecall;
    procedure CenterOnRect; safecall;
    procedure Clear; safecall;
    procedure ClearCache; safecall;
    procedure ClearRect; safecall;
    procedure ClearSelectedText; safecall;
    procedure CloseDocument; safecall;
    procedure CloseDocument_2(NoCLear: WordBool); safecall;
    procedure CoordDocumentInchToViewerPixel(DocumentLeft: Double; DocumentTop: Double; 
                                             var ViewerLeft: Integer; var ViewerTop: Integer); safecall;
    procedure CoordDocumentToViewer(DocumentLeft: Integer; DocumentTop: Integer; 
                                    var ViewerLeft: Integer; var ViewerTop: Integer); safecall;
    procedure CoordViewerPixelToDocumentInch(ViewerLeft: Integer; ViewerTop: Integer; 
                                             var DocumentLeft: Double; var DocumentTop: Double); safecall;
    procedure CoordViewerToDocument(ViewerLeft: Integer; ViewerTop: Integer; 
                                    var DocumentLeft: Integer; var DocumentTop: Integer); safecall;
    function CopyRegionToClipboard(SrcLeft: Integer; SrcTop: Integer; Width: Integer; 
                                   Height: Integer): GdPictureStatus; safecall;
    function CopyRegionToGdPictureImage(SrcLeft: Integer; SrcTop: Integer; Width: Integer; 
                                        Height: Integer): Integer; safecall;
    function CopyToClipboard: GdPictureStatus; safecall;
    procedure DeleteAnnotation(AnnotationIdx: Integer); safecall;
    function DisplayFirstPage: GdPictureStatus; safecall;
    function DisplayFromByteArray(var Data: PSafeArray): GdPictureStatus; safecall;
    function DisplayFromClipboard: GdPictureStatus; safecall;
    function DisplayFromFile(const FilePath: WideString): GdPictureStatus; safecall;
    function DisplayFromFile_2(const FilePath: WideString; const Password: WideString): GdPictureStatus; safecall;
    function DisplayFromFTP(const Host: WideString; const Path: WideString; 
                            const Login: WideString; const Password: WideString; FTPPort: Integer): GdPictureStatus; safecall;
    function DisplayFromFTP_2(const Uri: WideString; const Login: WideString; 
                              const Password: WideString): GdPictureStatus; safecall;
    function DisplayFromGdPictureImage(ImageID: Integer): GdPictureStatus; safecall;
    function DisplayFromGdPicturePDF(const PDF: IGdPicturePDF): GdPictureStatus; safecall;
    function DisplayFromHTTP(const Host: WideString; const Path: WideString; HTTPPort: Integer): GdPictureStatus; safecall;
    procedure DisplayFromHTTPStop; safecall;
    function DisplayFromMemory(hMem: Integer; Length: Integer): GdPictureStatus; safecall;
    function DisplayFromHTTP_2(const Uri: WideString; const Login: WideString; 
                               const Password: WideString): GdPictureStatus; safecall;
    function DisplayFromIStream(const Stream: IUnknown; const Password: WideString): GdPictureStatus; safecall;
    function DisplayFromString(const Data: WideString): GdPictureStatus; safecall;
    function DisplayFromDIB(Dib: Integer): GdPictureStatus; safecall;
    function DisplayLastPage: GdPictureStatus; safecall;
    function DisplayNextPage: GdPictureStatus; safecall;
    function DisplayPage(Page: Integer): GdPictureStatus; safecall;
    function DisplayPreviousPage: GdPictureStatus; safecall;
    function DisplayTextEditBox(AnnotationIdx: Integer): GdPictureStatus; safecall;
    procedure Dispose; safecall;
    function EnsureRegionVisibility(RegionID: Integer): GdPictureStatus; safecall;
    function GetAnnotationCount: Integer; safecall;
    function GetAnnotationFromIdx(AnnotationIdx: Integer): _Annotation; safecall;
    function GetAnnotationManager: IAnnotationManager; safecall;
    procedure GetDisplayedArea(var Left: Integer; var Top: Integer; var Width: Integer; 
                               var Height: Integer); safecall;
    procedure GetDisplayedAreaInches(var Left: Single; var Top: Single; var Width: Single; 
                                     var Height: Single); safecall;
    function GetDocumentLeft: Integer; safecall;
    function GetDocumentTop: Integer; safecall;
    function GetDocumentType: DocumentType; safecall;
    function GetHScrollBarMaxPosition: Integer; safecall;
    function GetHScrollBarPosition: Integer; safecall;
    function GetLastPath: WideString; safecall;
    function GetLastTransferError: WideString; safecall;
    function GetMouseLeftInDocument: Integer; safecall;
    function GetMouseTopInDocument: Integer; safecall;
    function GetObject: OleVariant; safecall;
    function GetObjectInterop: OleVariant; safecall;
    function GetPageText: WideString; safecall;
    function GetPageTextArea(Left: Single; Top: Single; Width: Single; Height: Single): WideString; safecall;
    function GetPageTextArea_2(Page: Integer; Left: Single; Top: Single; Width: Single; 
                               Height: Single): WideString; safecall;
    function GetPageText_2(Page: Integer): WideString; safecall;
    function GetPageThumbnail(Width: Integer; Height: Integer; Page: Integer; BackColor: Integer): Integer; safecall;
    procedure GetRectCoordinatesOnDocument(var Left: Integer; var Top: Integer; var Width: Integer; 
                                           var Height: Integer); safecall;
    procedure GetRectCoordinatesOnDocumentInches(var Left: Single; var Top: Single; 
                                                 var Width: Single; var Height: Single); safecall;
    procedure GetRectCoordinatesOnViewer(var Left: Integer; var Top: Integer; var Width: Integer; 
                                         var Height: Integer); safecall;
    function GetRectHeightOnDocument: Integer; safecall;
    function GetRectHeightOnViewer: Integer; safecall;
    function GetRectLeftOnDocument: Integer; safecall;
    function GetRectLeftOnViewer: Integer; safecall;
    function GetRectTopOnDocument: Integer; safecall;
    function GetRectTopOnViewer: Integer; safecall;
    function GetRectWidthOnDocument: Integer; safecall;
    function GetRectWidthOnViewer: Integer; safecall;
    function GetRegionBorderWidth(RegionID: Integer): Integer; safecall;
    function GetRegionHeight(RegionID: Integer): Single; safecall;
    function GetRegionHeightPixels(RegionID: Integer): Integer; safecall;
    function GetRegionID(RegionNo: Integer): Integer; safecall;
    function GetRegionLeft(RegionID: Integer): Single; safecall;
    function GetRegionLeftPixels(RegionID: Integer): Integer; safecall;
    function GetRegionMixMode(RegionID: Integer): ForegroundMixMode; safecall;
    function GetRegionName(RegionID: Integer): WideString; safecall;
    function GetRegionPage(RegionID: Integer): Integer; safecall;
    function GetRegionSelected(RegionID: Integer): WordBool; safecall;
    function GetRegionTop(RegionID: Integer): Single; safecall;
    function GetRegionTopPixels(RegionID: Integer): Integer; safecall;
    function GetRegionWidth(RegionID: Integer): Single; safecall;
    function GetRegionWidthPixels(RegionID: Integer): Integer; safecall;
    function GetSelectedAnnotationIdx: Integer; safecall;
    function GetSelectedText: WideString; safecall;
    function GetSelectedTextRegion(RegionIdx: Integer; var RegionLeft: Single; 
                                   var RegionTop: Single; var RegionWidth: Single; 
                                   var RegionHeight: Single): GdPictureStatus; safecall;
    function GetSelectedTextRegionsCount: Integer; safecall;
    function GetStat: GdPictureStatus; safecall;
    function GetTextOccurrenceCount(Page: Integer; const Text: WideString; CaseSensitive: WordBool; 
                                    WholeWords: WordBool): Integer; safecall;
    function GetTextOccurrenceCount_2(Page: Integer; const Text: WideString; 
                                      CaseSensitive: WordBool; WholeWords: WordBool; 
                                      OrdinalComparison: WordBool): Integer; safecall;
    function GetVersion: Double; safecall;
    function GetVScrollBarMaxPosition: Integer; safecall;
    function GetVScrollBarPosition: Integer; safecall;
    procedure GifPlay; safecall;
    procedure GifStop; safecall;
    function HideTextEditBox(SaveText: WordBool): GdPictureStatus; safecall;
    function IPTCCount: Integer; safecall;
    function IPTCGetID(TagNo: Integer): IPTCTags; safecall;
    function IPTCGetValueString(TagNo: Integer): WideString; safecall;
    function IsAnnotationVisibleAt(AnnotationIdx: Integer; X: Integer; Y: Integer): WordBool; safecall;
    function IsRect: WordBool; safecall;
    function IsRectDrawing: WordBool; safecall;
    function IsRectEditing: WordBool; safecall;
    function LoadAnnotationsFromXMP(const FilePath: WideString): GdPictureStatus; safecall;
    function PdfGetAuthor: WideString; safecall;
    function PdfGetCreationDate: WideString; safecall;
    function PdfGetCreator: WideString; safecall;
    function PdfGetEncryptionScheme: PdfEncryption; safecall;
    function PdfGetKeywords: WideString; safecall;
    function PdfGetMetadata: WideString; safecall;
    function PdfGetModificationDate: WideString; safecall;
    function PdfGetPageHeight: Double; safecall;
    function PdfGetPageWidth: Double; safecall;
    function PdfGetProducer: WideString; safecall;
    function PdfGetSubject: WideString; safecall;
    function PdfGetTitle: WideString; safecall;
    function PdfGetVersion: WideString; safecall;
    function Print: GdPictureStatus; safecall;
    function PrintDialog: WordBool; safecall;
    function PrintDialog_2(PrintSizeMode: PrintSizeOption): WordBool; safecall;
    function PrintGetActivePrinter: WideString; safecall;
    function PrintGetAlignment: PrintAlignment; safecall;
    function PrintGetCollate: WordBool; safecall;
    function PrintGetColorMode: PrinterColorMode; safecall;
    function PrintGetCopies: Smallint; safecall;
    function PrintGetDocumentName: WideString; safecall;
    function PrintGetDuplexMode: Duplex; safecall;
    function PrintGetLastError: WideString; safecall;
    function PrintGetMargins(var LeftMargin: Single; var TopMargin: Single): GdPictureStatus; safecall;
    function PrintGetOrientation: PrinterOrientation; safecall;
    function PrintGetPaperBin: Integer; safecall;
    function PrintGetPaperHeight: Single; safecall;
    function PrintGetPaperSize: Integer; safecall;
    function PrintGetPaperWidth: Single; safecall;
    function PrintGetPrinterName(PrinterNo: Integer): WideString; safecall;
    function PrintGetPrintersCount: Integer; safecall;
    function PrintGetPrinterSettings: IUnknown; safecall;
    function PrintGetQuality: PrintQuality; safecall;
    function PrintGetStat: GdPictureStatus; safecall;
    function PrintInterop: GdPictureStatus; safecall;
    function PrintInterop_2: GdPictureStatus; safecall;
    function PrintSetActivePrinter(const PrinterName: WideString): WordBool; safecall;
    function PrintSetAlignment(ImageAlignment: PrintAlignment): GdPictureStatus; safecall;
    function PrintSetAutoRotation(AutoRotation: WordBool): GdPictureStatus; safecall;
    function PrintSetCollate(Collate: WordBool): GdPictureStatus; safecall;
    function PrintSetColorMode(ColorMode: PrinterColorMode): GdPictureStatus; safecall;
    function PrintSetCopies(Copies: Smallint): GdPictureStatus; safecall;
    function PrintSetDocumentName(const DocumentName: WideString): GdPictureStatus; safecall;
    function PrintSetDuplexMode(DuplexMode: Duplex): GdPictureStatus; safecall;
    function PrintSetFromToPage(FromPage: Integer; ToPage: Integer): GdPictureStatus; safecall;
    function PrintSetOrientation(Orientation: PrinterOrientation): GdPictureStatus; safecall;
    function PrintSetPageSelection(const CustomRange: WideString): GdPictureStatus; safecall;
    function PrintSetPaperBin(PaperBin: Integer): WordBool; safecall;
    function PrintSetPreRasterization(PreRasterization: WordBool): GdPictureStatus; safecall;
    function PrintSetPreRasterizationDPI(DPI: Single): GdPictureStatus; safecall;
    function PrintSetPrinterSettings(const PS: IUnknown): GdPictureStatus; safecall;
    function PrintSetQuality(Quality: PrintQuality): GdPictureStatus; safecall;
    function PrintSetShowPrintingProgress(Show: WordBool): GdPictureStatus; safecall;
    function PrintSetStdPaperSize(PaperSize: Integer): GdPictureStatus; safecall;
    function PrintSetUserPaperSize(PaperWidth: Single; PaperHeight: Single): GdPictureStatus; safecall;
    function PrintShowPrinterSettingsDialog: GdPictureStatus; safecall;
    function PrintShowPrinterSettingsDialog_2(HANDLE: Integer): GdPictureStatus; safecall;
    function Print_2(PrintSizeMode: PrintSizeOption): GdPictureStatus; safecall;
    function Redraw: GdPictureStatus; safecall;
    procedure Refresh; safecall;
    function RegionCount: Integer; safecall;
    function ReleaseGdPictureImage(ImageID: Integer): GdPictureStatus; safecall;
    procedure ReloadAnnotations; safecall;
    function RemoveAllRegions: GdPictureStatus; safecall;
    procedure RemoveItemMenu(MenuItemIdx: Integer); safecall;
    function RemoveRegionByID(RegionID: Integer): GdPictureStatus; safecall;
    function RemoveRegionByName(const Name: WideString): GdPictureStatus; safecall;
    function Rotate(Rotation: RotateFlipType): GdPictureStatus; safecall;
    function RotateAnnotations(Angle: Integer): GdPictureStatus; safecall;
    function RotateView(Rotation: RotateFlipType): GdPictureStatus; safecall;
    function SaveAnnotationsToPage: GdPictureStatus; safecall;
    function SaveAnnotationsToXMP(const FilePath: WideString): GdPictureStatus; safecall;
    function SaveAnnotationsToXMPEx(const FilePath: WideString): GdPictureStatus; safecall;
    function SaveDocumentToJPEG(const FilePath: WideString; Quality: Integer): GdPictureStatus; safecall;
    function SaveDocumentToJPEG_2(const Uri: WideString; const Login: WideString; 
                                  const Password: WideString; Quality: Integer): GdPictureStatus; safecall;
    function SaveDocumentToPDF(const FilePath: WideString): GdPictureStatus; safecall;
    function SaveDocumentToPDF_2(const Uri: WideString; const Login: WideString; 
                                 const Password: WideString): GdPictureStatus; safecall;
    function SaveDocumentToTIFF(const FilePath: WideString; Compression: TiffCompression): GdPictureStatus; safecall;
    function SaveDocumentToTIFF_2(const Uri: WideString; const Login: WideString; 
                                  const Password: WideString; Compression: TiffCompression): GdPictureStatus; safecall;
    function SearchText(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool): WordBool; safecall;
    function SearchText_2(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool): WordBool; safecall;
    function SearchText_3(Page: Integer; const Text: WideString; Occurrence: Integer; 
                          CaseSensitive: WordBool; var Left: Single; var Top: Single; 
                          var Width: Single; var Height: Single): WordBool; safecall;
    function SearchText_4(Page: Integer; const Text: WideString; Occurrence: Integer; 
                          CaseSensitive: WordBool; WholeWords: WordBool; var Left: Single; 
                          var Top: Single; var Width: Single; var Height: Single): WordBool; safecall;
    function SearchText_5(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool; OrdinalComparison: WordBool): WordBool; safecall;
    function SearchText_6(Page: Integer; const Text: WideString; Occurrence: Integer; 
                          CaseSensitive: WordBool; WholeWords: WordBool; 
                          OrdinalComparison: WordBool; var Left: Single; var Top: Single; 
                          var Width: Single; var Height: Single): WordBool; safecall;
    function SearchTextRegex(const Pattern: WideString; Occurence: Integer; CaseSensitive: WordBool): WordBool; safecall;
    function SelectAllText: GdPictureStatus; safecall;
    function SelectAnnotation(AnnotationIdx: Integer): GdPictureStatus; safecall;
    procedure SetAnnotationEditorMode(EditorMode: WordBool); safecall;
    procedure SetBackgroundColor(Color: Integer); safecall;
    procedure SetFtpPassiveMode(PassiveMode: WordBool); safecall;
    procedure SetHScrollBarPosition(NewPos: Integer); safecall;
    procedure SetHttpTransferBufferSize(Buffersize: Integer); safecall;
    procedure SetHVScrollBarPosition(NewPosH: Integer; NewPosV: Integer); safecall;
    procedure SetItemMenuCaption(MenuItemIdx: Integer; const NewMenuCaption: WideString); safecall;
    procedure SetItemMenuEnabled(MenuItemIdx: Integer; Enable: WordBool); safecall;
    procedure SetRectBorderColor(Color: Integer); safecall;
    procedure SetRectCoordinatesOnDocument(Left: Integer; Top: Integer; Width: Integer; 
                                           Height: Integer); safecall;
    procedure SetRectCoordinatesOnDocumentInches(Left: Single; Top: Single; Width: Single; 
                                                 Height: Single); safecall;
    procedure SetRectCoordinatesOnViewer(Left: Integer; Top: Integer; Width: Integer; 
                                         Height: Integer); safecall;
    function SetRegionBorderColor(RegionID: Integer; BorderColor: Integer): GdPictureStatus; safecall;
    function SetRegionBorderWidth(RegionID: Integer; BorderWidth: Integer): GdPictureStatus; safecall;
    function SetRegionColor(RegionID: Integer; Color: Integer): GdPictureStatus; safecall;
    function SetRegionColorSelection(RegionID: Integer; ColorSelection: Integer): GdPictureStatus; safecall;
    function SetRegionEditable(RegionID: Integer; Editable: WordBool): GdPictureStatus; safecall;
    function SetRegionHeight(RegionID: Integer; Height: Single): GdPictureStatus; safecall;
    function SetRegionHeightPixels(RegionID: Integer; Height: Integer): GdPictureStatus; safecall;
    function SetRegionLeft(RegionID: Integer; Left: Single): GdPictureStatus; safecall;
    function SetRegionLeftPixels(RegionID: Integer; Left: Integer): GdPictureStatus; safecall;
    function SetRegionMixMode(RegionID: Integer; MixMode: ForegroundMixMode): GdPictureStatus; safecall;
    function SetRegionName(RegionID: Integer; const Name: WideString): GdPictureStatus; safecall;
    function SetRegionPage(RegionID: Integer; Page: Integer): GdPictureStatus; safecall;
    function SetRegionSelected(RegionID: Integer; Selected: WordBool): GdPictureStatus; safecall;
    function SetRegionTop(RegionID: Integer; Top: Single): GdPictureStatus; safecall;
    function SetRegionTopPixels(RegionID: Integer; Top: Integer): GdPictureStatus; safecall;
    function SetRegionWidth(RegionID: Integer; Width: Single): GdPictureStatus; safecall;
    function SetRegionWidthPixels(RegionID: Integer; Width: Integer): GdPictureStatus; safecall;
    procedure SetVScrollBarPosition(NewPos: Integer); safecall;
    function SetZoom100: GdPictureStatus; safecall;
    function SetZoomFitViewer: GdPictureStatus; safecall;
    function SetZoomHeightViewer: GdPictureStatus; safecall;
    function SetZoomShrinkWidthViewer: GdPictureStatus; safecall;
    function SetZoomViewer: GdPictureStatus; safecall;
    function SetZoomWidthViewer: GdPictureStatus; safecall;
    function TagCount: Integer; safecall;
    function TagGetID(TagNo: Integer): Tags; safecall;
    function TagGetName(TagNo: Integer): WideString; safecall;
    function TagGetValueString(TagNo: Integer): WideString; safecall;
    function ZoomArea(Left: Integer; Top: Integer; Width: Integer; Height: Integer): GdPictureStatus; safecall;
    function ZoomIN: GdPictureStatus; safecall;
    function ZoomOUT: GdPictureStatus; safecall;
    function ZoomRect: GdPictureStatus; safecall;
    procedure ReleaseEventsTarget; safecall;
    procedure AddRedactionAnnotInteractive(BackColor: Integer); safecall;
    function ApplyAllRedactions: GdPictureStatus; safecall;
    property PdfEnableFileLinks: WordBool read Get_PdfEnableFileLinks write Set_PdfEnableFileLinks;
    property PdfIncreaseTextContrast: WordBool read Get_PdfIncreaseTextContrast write Set_PdfIncreaseTextContrast;
    property PdfVerifyDigitalCertificates: WordBool read Get_PdfVerifyDigitalCertificates write Set_PdfVerifyDigitalCertificates;
    property ScrollBars: WordBool read Get_ScrollBars write Set_ScrollBars;
    property ForceScrollBars: WordBool read Get_ForceScrollBars write Set_ForceScrollBars;
    property EnableMenu: WordBool read Get_EnableMenu write Set_EnableMenu;
    property ViewRotation: RotateFlipType read Get_ViewRotation write Set_ViewRotation;
    property PageRotation: RotateFlipType read Get_PageRotation;
    property PdfShowOpenFileDialogForDecryption: WordBool read Get_PdfShowOpenFileDialogForDecryption write Set_PdfShowOpenFileDialogForDecryption;
    property PageRenderRotation: RotateFlipType read Get_PageRenderRotation;
    property PageWidth: Integer read Get_PageWidth;
    property PageHeight: Integer read Get_PageHeight;
    property MouseMode: ViewerMouseMode read Get_MouseMode write Set_MouseMode;
    property Zoom: Double read Get_Zoom write Set_Zoom;
    property PdfShowDialogForPassword: WordBool read Get_PdfShowDialogForPassword write Set_PdfShowDialogForPassword;
    property ZoomCenterAtMousePosition: WordBool read Get_ZoomCenterAtMousePosition write Set_ZoomCenterAtMousePosition;
    property MagnifierWidth: Integer read Get_MagnifierWidth write Set_MagnifierWidth;
    property VScrollVisible: WordBool read Get_VScrollVisible;
    property HScrollVisible: WordBool read Get_HScrollVisible;
    property EnableICM: WordBool read Get_EnableICM write Set_EnableICM;
    property RenderGdPictureAnnots: WordBool read Get_RenderGdPictureAnnots write Set_RenderGdPictureAnnots;
    property HQAnnotationRendering: WordBool read Get_HQAnnotationRendering write Set_HQAnnotationRendering;
    property AllowDropFile: WordBool read Get_AllowDropFile write Set_AllowDropFile;
    property AnnotationDropShadow: WordBool read Get_AnnotationDropShadow write Set_AnnotationDropShadow;
    property AnnotationResizeRotateHandlesScale: Single read Get_AnnotationResizeRotateHandlesScale write Set_AnnotationResizeRotateHandlesScale;
    property AnnotationEnableMultiSelect: WordBool read Get_AnnotationEnableMultiSelect write Set_AnnotationEnableMultiSelect;
    property EnableTextSelection: WordBool read Get_EnableTextSelection write Set_EnableTextSelection;
    property PageDisplayMode: PageDisplayMode read Get_PageDisplayMode write Set_PageDisplayMode;
    property EnableDeferredPainting: WordBool read Get_EnableDeferredPainting write Set_EnableDeferredPainting;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property EnabledProgressBar: WordBool read Get_EnabledProgressBar write Set_EnabledProgressBar;
    property MagnifierHeight: Integer read Get_MagnifierHeight write Set_MagnifierHeight;
    property ZoomMax: Double read Get_ZoomMax;
    property MagnifierZoomY: Single read Get_MagnifierZoomY write Set_MagnifierZoomY;
    property MouseButtonForMouseMode: MouseButton read Get_MouseButtonForMouseMode write Set_MouseButtonForMouseMode;
    property ContinuousViewMode: WordBool read Get_ContinuousViewMode write Set_ContinuousViewMode;
    property MagnifierZoomX: Single read Get_MagnifierZoomX write Set_MagnifierZoomX;
    property RectIsEditable: WordBool read Get_RectIsEditable write Set_RectIsEditable;
    property Gamma: Single read Get_Gamma write Set_Gamma;
    property MouseWheelMode: ViewerMouseWheelMode read Get_MouseWheelMode write Set_MouseWheelMode;
    property KeepDocumentPosition: WordBool read Get_KeepDocumentPosition write Set_KeepDocumentPosition;
    property PdfEnableLinks: WordBool read Get_PdfEnableLinks write Set_PdfEnableLinks;
    property PdfDisplayFormField: WordBool read Get_PdfDisplayFormField write Set_PdfDisplayFormField;
    property DisplayQualityAuto: WordBool read Get_DisplayQualityAuto write Set_DisplayQualityAuto;
    property DisplayQuality: DisplayQuality read Get_DisplayQuality write Set_DisplayQuality;
    property AnimateGIF: WordBool read Get_AnimateGIF write Set_AnimateGIF;
    property DocumentPosition: ViewerDocumentPosition read Get_DocumentPosition write Set_DocumentPosition;
    property DocumentAlignment: ViewerDocumentAlignment read Get_DocumentAlignment write Set_DocumentAlignment;
    property RegionsAreEditable: WordBool read Get_RegionsAreEditable write Set_RegionsAreEditable;
    property ClipRegionsToPageBounds: WordBool read Get_ClipRegionsToPageBounds write Set_ClipRegionsToPageBounds;
    property ClipAnnotsToPageBounds: WordBool read Get_ClipAnnotsToPageBounds write Set_ClipAnnotsToPageBounds;
    property ZoomMode: ViewerZoomMode read Get_ZoomMode write Set_ZoomMode;
    property EnableMouseWheel: WordBool read Get_EnableMouseWheel write Set_EnableMouseWheel;
    property ZoomStep: Integer read Get_ZoomStep write Set_ZoomStep;
    property ScrollSmallChange: Smallint read Get_ScrollSmallChange write Set_ScrollSmallChange;
    property ScrollLargeChange: Smallint read Get_ScrollLargeChange write Set_ScrollLargeChange;
    property VerticalResolution: Single read Get_VerticalResolution;
    property HorizontalResolution: Single read Get_HorizontalResolution;
    property RectBorderSize: Integer read Get_RectBorderSize write Set_RectBorderSize;
    property CurrentPage: Integer read Get_CurrentPage;
    property SilentMode: WordBool read Get_SilentMode write Set_SilentMode;
    property ForceTemporaryMode: WordBool read Get_ForceTemporaryMode write Set_ForceTemporaryMode;
    property IgnoreDocumentResolution: WordBool read Get_IgnoreDocumentResolution write Set_IgnoreDocumentResolution;
    property PageCount: Integer read Get_PageCount;
    property LockViewer: WordBool read Get_LockViewer write Set_LockViewer;
    property DrawPageBorders: WordBool read Get_DrawPageBorders write Set_DrawPageBorders;
    property PageBordersPenSize: Integer read Get_PageBordersPenSize write Set_PageBordersPenSize;
    property PageBordersColor: Integer read Get_PageBordersColor write Set_PageBordersColor;
    property hWnd: Integer read Get_hWnd;
    property DocumentFormat: DocumentFormat read Get_DocumentFormat;
    property PreserveViewRotation: WordBool read Get_PreserveViewRotation write Set_PreserveViewRotation;
    property EnableFuzzySearch: WordBool read Get_EnableFuzzySearch write Set_EnableFuzzySearch;
  end;

// *********************************************************************//
// DispIntf:  IGdViewerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5209D70B-F745-4442-A65E-C84161C8DBFE}
// *********************************************************************//
  IGdViewerDisp = dispinterface
    ['{5209D70B-F745-4442-A65E-C84161C8DBFE}']
    property PdfEnableFileLinks: WordBool dispid 1;
    property PdfIncreaseTextContrast: WordBool dispid 2;
    property PdfVerifyDigitalCertificates: WordBool dispid 3;
    property ScrollBars: WordBool dispid 4;
    property ForceScrollBars: WordBool dispid 5;
    property EnableMenu: WordBool dispid 6;
    property ViewRotation: RotateFlipType dispid 7;
    property PageRotation: RotateFlipType readonly dispid 8;
    property PdfShowOpenFileDialogForDecryption: WordBool dispid 9;
    property PageRenderRotation: RotateFlipType readonly dispid 10;
    property PageWidth: Integer readonly dispid 11;
    property PageHeight: Integer readonly dispid 12;
    property MouseMode: ViewerMouseMode dispid 13;
    property Zoom: Double dispid 14;
    property PdfShowDialogForPassword: WordBool dispid 15;
    property ZoomCenterAtMousePosition: WordBool dispid 16;
    property MagnifierWidth: Integer dispid 17;
    property VScrollVisible: WordBool readonly dispid 18;
    property HScrollVisible: WordBool readonly dispid 19;
    property EnableICM: WordBool dispid 20;
    property RenderGdPictureAnnots: WordBool dispid 21;
    property HQAnnotationRendering: WordBool dispid 22;
    property AllowDropFile: WordBool dispid 23;
    property AnnotationDropShadow: WordBool dispid 24;
    property AnnotationResizeRotateHandlesScale: Single dispid 25;
    property AnnotationEnableMultiSelect: WordBool dispid 339;
    property EnableTextSelection: WordBool dispid 27;
    property PageDisplayMode: PageDisplayMode dispid 28;
    property EnableDeferredPainting: WordBool dispid 29;
    property BackColor: Integer dispid 30;
    property EnabledProgressBar: WordBool dispid 31;
    property MagnifierHeight: Integer dispid 32;
    property ZoomMax: Double readonly dispid 33;
    property MagnifierZoomY: Single dispid 34;
    property MouseButtonForMouseMode: MouseButton dispid 35;
    property ContinuousViewMode: WordBool dispid 36;
    property MagnifierZoomX: Single dispid 37;
    property RectIsEditable: WordBool dispid 38;
    property Gamma: Single dispid 39;
    property MouseWheelMode: ViewerMouseWheelMode dispid 40;
    property KeepDocumentPosition: WordBool dispid 41;
    property PdfEnableLinks: WordBool dispid 42;
    property PdfDisplayFormField: WordBool dispid 43;
    property DisplayQualityAuto: WordBool dispid 44;
    property DisplayQuality: DisplayQuality dispid 45;
    property AnimateGIF: WordBool dispid 46;
    property DocumentPosition: ViewerDocumentPosition dispid 47;
    property DocumentAlignment: ViewerDocumentAlignment dispid 48;
    property RegionsAreEditable: WordBool dispid 334;
    property ClipRegionsToPageBounds: WordBool dispid 337;
    property ClipAnnotsToPageBounds: WordBool dispid 338;
    property ZoomMode: ViewerZoomMode dispid 50;
    property EnableMouseWheel: WordBool dispid 51;
    property ZoomStep: Integer dispid 52;
    property ScrollSmallChange: Smallint dispid 53;
    property ScrollLargeChange: Smallint dispid 54;
    property VerticalResolution: Single readonly dispid 55;
    property HorizontalResolution: Single readonly dispid 56;
    property RectBorderSize: Integer dispid 57;
    property CurrentPage: Integer readonly dispid 58;
    property SilentMode: WordBool dispid 59;
    property ForceTemporaryMode: WordBool dispid 60;
    property IgnoreDocumentResolution: WordBool dispid 61;
    property PageCount: Integer readonly dispid 62;
    property LockViewer: WordBool dispid 63;
    property DrawPageBorders: WordBool dispid 327;
    property PageBordersPenSize: Integer dispid 328;
    property PageBordersColor: Integer dispid 329;
    property hWnd: Integer readonly dispid 335;
    property DocumentFormat: DocumentFormat readonly dispid 336;
    property PreserveViewRotation: WordBool dispid 340;
    property EnableFuzzySearch: WordBool dispid 346;
    procedure AddConnectedLinesAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                                Opacity: Single); dispid 64;
    procedure AddEllipseAnnotInteractive(Fill: WordBool; Stroke: WordBool; BackColor: Integer; 
                                         BorderColor: Integer; BorderWidth: Single; Opacity: Single); dispid 65;
    procedure AddEmbeddedImageAnnotInteractive(ImageID: Integer; Stroke: WordBool; 
                                               BorderColor: Integer; BorderWidth: Single; 
                                               Opacity: Single); dispid 66;
    procedure AddEmbeddedImageAnnotInteractive_2(const ImagePath: WideString; Stroke: WordBool; 
                                                 BorderColor: Integer; BorderWidth: Single; 
                                                 Opacity: Single); dispid 67;
    procedure AddFreeHandAnnotInteractive(BorderColor: Integer; BorderWidth: Single; Opacity: Single); dispid 68;
    procedure AddFreeHandAnnotInteractive_2(BorderColor: Integer; BorderWidth: Single; 
                                            Opacity: Single; ContinuousMode: WordBool); dispid 69;
    procedure AddFreeHandHighlighterAnnotInteractive(BorderColor: Integer; BorderWidth: Single); dispid 70;
    procedure AddFreeHandHighlighterAnnotInteractive_2(BorderColor: Integer; BorderWidth: Single; 
                                                       ContinuousMode: WordBool); dispid 71;
    procedure AddFreeHandPolygonAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                                 BackColor: Integer; Opacity: Single); dispid 72;
    procedure AddLineAnnotInteractive(BorderColor: Integer; BorderWidth: Single; Opacity: Single); dispid 73;
    procedure AddLineArrowAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                           ArrowWidth: Single; ArrowHeight: Single; 
                                           ArrowFilled: WordBool; Opacity: Single); dispid 74;
    procedure AddLineArrowAnnotInteractive_2(BorderColor: Integer; BorderWidth: Single; 
                                             ArrowWidth: Single; ArrowHeight: Single; 
                                             ArrowFilled: WordBool; Opacity: Single; 
                                             Reversed: WordBool); dispid 75;
    procedure AddLinkAnnotationInteractive(const Text: WideString; const Link: WideString; 
                                           ForeColor: Integer; HoverForeColor: Integer; 
                                           const FontName: WideString; FontStyle: FontStyle; 
                                           HoverFontStyle: FontStyle; Opacity: Single; 
                                           Rotation: Single); dispid 76;
    procedure AddPolygonAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                         BackColor: Integer; Opacity: Single); dispid 77;
    procedure AddPolyRulerAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                           Opacity: Single; MeasurementUnit: UnitMode); dispid 78;
    procedure AddRectangleAnnotInteractive(Fill: WordBool; Stroke: WordBool; BackColor: Integer; 
                                           BorderColor: Integer; BorderWidth: Single; 
                                           Opacity: Single); dispid 79;
    procedure AddRectangleHighlighterAnnotInteractive(BackColor: Integer); dispid 80;
    function AddRegion(const Name: WideString; Left: Integer; Top: Integer; Width: Integer; 
                       Height: Integer; MixMode: ForegroundMixMode; RegionColor: Integer): Integer; dispid 81;
    function AddRegionInches(const Name: WideString; Left: Single; Top: Single; Width: Single; 
                             Height: Single; MixMode: ForegroundMixMode; RegionColor: Integer): Integer; dispid 82;
    procedure AddRubberStampAnnotInteractive(const Text: WideString; ForeColor: Integer; 
                                             const FontName: WideString; FontStyle: FontStyle; 
                                             BorderColor: Integer; BorderWidth: Single; 
                                             Opacity: Single; Rotation: Single); dispid 83;
    procedure AddRulerAnnotInteractive(BorderColor: Integer; BorderWidth: Single; Opacity: Single; 
                                       MeasurementUnit: UnitMode); dispid 84;
    procedure AddStickyNoteAnnotationInteractive(const Text: WideString; ForeColor: Integer; 
                                                 const FontName: WideString; FontStyle: FontStyle; 
                                                 FontSize: Single; Opacity: Single; Rotation: Single); dispid 85;
    procedure AddTextAnnotationInteractive(const Text: WideString; ForeColor: Integer; 
                                           const FontName: WideString; FontStyle: FontStyle; 
                                           FontSize: Single; Fill: WordBool; BorderColor: Integer; 
                                           BackColor: Integer; Opacity: Single; Rotation: Single); dispid 86;
    function ARGBI(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer; dispid 87;
    function BurnAnnotationsToPage(RemoveInitialAnnots: WordBool): GdPictureStatus; dispid 88;
    function BurnAnnotationsToPage_2(RemoveInitialAnnots: WordBool; Intent: GdPictureOutputIntent): GdPictureStatus; dispid 89;
    function BurnAnnotationsToPage_3(RemoveInitialAnnots: WordBool; VectorMode: WordBool): GdPictureStatus; dispid 90;
    function CancelLastAnnotInteractiveAdd: GdPictureStatus; dispid 91;
    function TerminateLastAnnotInteractiveAdd: GdPictureStatus; dispid 341;
    procedure CenterOnRect; dispid 92;
    procedure Clear; dispid 93;
    procedure ClearCache; dispid 345;
    procedure ClearRect; dispid 94;
    procedure ClearSelectedText; dispid 95;
    procedure CloseDocument; dispid 96;
    procedure CloseDocument_2(NoCLear: WordBool); dispid 97;
    procedure CoordDocumentInchToViewerPixel(DocumentLeft: Double; DocumentTop: Double; 
                                             var ViewerLeft: Integer; var ViewerTop: Integer); dispid 98;
    procedure CoordDocumentToViewer(DocumentLeft: Integer; DocumentTop: Integer; 
                                    var ViewerLeft: Integer; var ViewerTop: Integer); dispid 99;
    procedure CoordViewerPixelToDocumentInch(ViewerLeft: Integer; ViewerTop: Integer; 
                                             var DocumentLeft: Double; var DocumentTop: Double); dispid 100;
    procedure CoordViewerToDocument(ViewerLeft: Integer; ViewerTop: Integer; 
                                    var DocumentLeft: Integer; var DocumentTop: Integer); dispid 101;
    function CopyRegionToClipboard(SrcLeft: Integer; SrcTop: Integer; Width: Integer; 
                                   Height: Integer): GdPictureStatus; dispid 102;
    function CopyRegionToGdPictureImage(SrcLeft: Integer; SrcTop: Integer; Width: Integer; 
                                        Height: Integer): Integer; dispid 103;
    function CopyToClipboard: GdPictureStatus; dispid 104;
    procedure DeleteAnnotation(AnnotationIdx: Integer); dispid 105;
    function DisplayFirstPage: GdPictureStatus; dispid 106;
    function DisplayFromByteArray(var Data: {??PSafeArray}OleVariant): GdPictureStatus; dispid 107;
    function DisplayFromClipboard: GdPictureStatus; dispid 108;
    function DisplayFromFile(const FilePath: WideString): GdPictureStatus; dispid 109;
    function DisplayFromFile_2(const FilePath: WideString; const Password: WideString): GdPictureStatus; dispid 110;
    function DisplayFromFTP(const Host: WideString; const Path: WideString; 
                            const Login: WideString; const Password: WideString; FTPPort: Integer): GdPictureStatus; dispid 111;
    function DisplayFromFTP_2(const Uri: WideString; const Login: WideString; 
                              const Password: WideString): GdPictureStatus; dispid 112;
    function DisplayFromGdPictureImage(ImageID: Integer): GdPictureStatus; dispid 113;
    function DisplayFromGdPicturePDF(const PDF: IGdPicturePDF): GdPictureStatus; dispid 114;
    function DisplayFromHTTP(const Host: WideString; const Path: WideString; HTTPPort: Integer): GdPictureStatus; dispid 115;
    procedure DisplayFromHTTPStop; dispid 116;
    function DisplayFromMemory(hMem: Integer; Length: Integer): GdPictureStatus; dispid 344;
    function DisplayFromHTTP_2(const Uri: WideString; const Login: WideString; 
                               const Password: WideString): GdPictureStatus; dispid 117;
    function DisplayFromIStream(const Stream: IUnknown; const Password: WideString): GdPictureStatus; dispid 118;
    function DisplayFromString(const Data: WideString): GdPictureStatus; dispid 119;
    function DisplayFromDIB(Dib: Integer): GdPictureStatus; dispid 342;
    function DisplayLastPage: GdPictureStatus; dispid 120;
    function DisplayNextPage: GdPictureStatus; dispid 121;
    function DisplayPage(Page: Integer): GdPictureStatus; dispid 122;
    function DisplayPreviousPage: GdPictureStatus; dispid 123;
    function DisplayTextEditBox(AnnotationIdx: Integer): GdPictureStatus; dispid 124;
    procedure Dispose; dispid 125;
    function EnsureRegionVisibility(RegionID: Integer): GdPictureStatus; dispid 126;
    function GetAnnotationCount: Integer; dispid 127;
    function GetAnnotationFromIdx(AnnotationIdx: Integer): _Annotation; dispid 128;
    function GetAnnotationManager: IAnnotationManager; dispid 129;
    procedure GetDisplayedArea(var Left: Integer; var Top: Integer; var Width: Integer; 
                               var Height: Integer); dispid 130;
    procedure GetDisplayedAreaInches(var Left: Single; var Top: Single; var Width: Single; 
                                     var Height: Single); dispid 131;
    function GetDocumentLeft: Integer; dispid 132;
    function GetDocumentTop: Integer; dispid 133;
    function GetDocumentType: DocumentType; dispid 134;
    function GetHScrollBarMaxPosition: Integer; dispid 135;
    function GetHScrollBarPosition: Integer; dispid 136;
    function GetLastPath: WideString; dispid 137;
    function GetLastTransferError: WideString; dispid 138;
    function GetMouseLeftInDocument: Integer; dispid 139;
    function GetMouseTopInDocument: Integer; dispid 140;
    function GetObject: OleVariant; dispid 141;
    function GetObjectInterop: OleVariant; dispid 142;
    function GetPageText: WideString; dispid 143;
    function GetPageTextArea(Left: Single; Top: Single; Width: Single; Height: Single): WideString; dispid 144;
    function GetPageTextArea_2(Page: Integer; Left: Single; Top: Single; Width: Single; 
                               Height: Single): WideString; dispid 145;
    function GetPageText_2(Page: Integer): WideString; dispid 146;
    function GetPageThumbnail(Width: Integer; Height: Integer; Page: Integer; BackColor: Integer): Integer; dispid 147;
    procedure GetRectCoordinatesOnDocument(var Left: Integer; var Top: Integer; var Width: Integer; 
                                           var Height: Integer); dispid 148;
    procedure GetRectCoordinatesOnDocumentInches(var Left: Single; var Top: Single; 
                                                 var Width: Single; var Height: Single); dispid 149;
    procedure GetRectCoordinatesOnViewer(var Left: Integer; var Top: Integer; var Width: Integer; 
                                         var Height: Integer); dispid 150;
    function GetRectHeightOnDocument: Integer; dispid 151;
    function GetRectHeightOnViewer: Integer; dispid 152;
    function GetRectLeftOnDocument: Integer; dispid 153;
    function GetRectLeftOnViewer: Integer; dispid 154;
    function GetRectTopOnDocument: Integer; dispid 155;
    function GetRectTopOnViewer: Integer; dispid 156;
    function GetRectWidthOnDocument: Integer; dispid 157;
    function GetRectWidthOnViewer: Integer; dispid 158;
    function GetRegionBorderWidth(RegionID: Integer): Integer; dispid 159;
    function GetRegionHeight(RegionID: Integer): Single; dispid 160;
    function GetRegionHeightPixels(RegionID: Integer): Integer; dispid 161;
    function GetRegionID(RegionNo: Integer): Integer; dispid 162;
    function GetRegionLeft(RegionID: Integer): Single; dispid 163;
    function GetRegionLeftPixels(RegionID: Integer): Integer; dispid 164;
    function GetRegionMixMode(RegionID: Integer): ForegroundMixMode; dispid 165;
    function GetRegionName(RegionID: Integer): WideString; dispid 166;
    function GetRegionPage(RegionID: Integer): Integer; dispid 167;
    function GetRegionSelected(RegionID: Integer): WordBool; dispid 168;
    function GetRegionTop(RegionID: Integer): Single; dispid 169;
    function GetRegionTopPixels(RegionID: Integer): Integer; dispid 170;
    function GetRegionWidth(RegionID: Integer): Single; dispid 171;
    function GetRegionWidthPixels(RegionID: Integer): Integer; dispid 172;
    function GetSelectedAnnotationIdx: Integer; dispid 173;
    function GetSelectedText: WideString; dispid 174;
    function GetSelectedTextRegion(RegionIdx: Integer; var RegionLeft: Single; 
                                   var RegionTop: Single; var RegionWidth: Single; 
                                   var RegionHeight: Single): GdPictureStatus; dispid 175;
    function GetSelectedTextRegionsCount: Integer; dispid 176;
    function GetStat: GdPictureStatus; dispid 177;
    function GetTextOccurrenceCount(Page: Integer; const Text: WideString; CaseSensitive: WordBool; 
                                    WholeWords: WordBool): Integer; dispid 178;
    function GetTextOccurrenceCount_2(Page: Integer; const Text: WideString; 
                                      CaseSensitive: WordBool; WholeWords: WordBool; 
                                      OrdinalComparison: WordBool): Integer; dispid 179;
    function GetVersion: Double; dispid 180;
    function GetVScrollBarMaxPosition: Integer; dispid 181;
    function GetVScrollBarPosition: Integer; dispid 182;
    procedure GifPlay; dispid 183;
    procedure GifStop; dispid 184;
    function HideTextEditBox(SaveText: WordBool): GdPictureStatus; dispid 185;
    function IPTCCount: Integer; dispid 186;
    function IPTCGetID(TagNo: Integer): IPTCTags; dispid 187;
    function IPTCGetValueString(TagNo: Integer): WideString; dispid 188;
    function IsAnnotationVisibleAt(AnnotationIdx: Integer; X: Integer; Y: Integer): WordBool; dispid 189;
    function IsRect: WordBool; dispid 190;
    function IsRectDrawing: WordBool; dispid 191;
    function IsRectEditing: WordBool; dispid 192;
    function LoadAnnotationsFromXMP(const FilePath: WideString): GdPictureStatus; dispid 193;
    function PdfGetAuthor: WideString; dispid 194;
    function PdfGetCreationDate: WideString; dispid 195;
    function PdfGetCreator: WideString; dispid 196;
    function PdfGetEncryptionScheme: PdfEncryption; dispid 197;
    function PdfGetKeywords: WideString; dispid 198;
    function PdfGetMetadata: WideString; dispid 199;
    function PdfGetModificationDate: WideString; dispid 200;
    function PdfGetPageHeight: Double; dispid 201;
    function PdfGetPageWidth: Double; dispid 202;
    function PdfGetProducer: WideString; dispid 203;
    function PdfGetSubject: WideString; dispid 204;
    function PdfGetTitle: WideString; dispid 205;
    function PdfGetVersion: WideString; dispid 206;
    function Print: GdPictureStatus; dispid 207;
    function PrintDialog: WordBool; dispid 208;
    function PrintDialog_2(PrintSizeMode: PrintSizeOption): WordBool; dispid 209;
    function PrintGetActivePrinter: WideString; dispid 210;
    function PrintGetAlignment: PrintAlignment; dispid 211;
    function PrintGetCollate: WordBool; dispid 212;
    function PrintGetColorMode: PrinterColorMode; dispid 213;
    function PrintGetCopies: Smallint; dispid 214;
    function PrintGetDocumentName: WideString; dispid 215;
    function PrintGetDuplexMode: Duplex; dispid 216;
    function PrintGetLastError: WideString; dispid 217;
    function PrintGetMargins(var LeftMargin: Single; var TopMargin: Single): GdPictureStatus; dispid 218;
    function PrintGetOrientation: PrinterOrientation; dispid 219;
    function PrintGetPaperBin: Integer; dispid 220;
    function PrintGetPaperHeight: Single; dispid 221;
    function PrintGetPaperSize: Integer; dispid 222;
    function PrintGetPaperWidth: Single; dispid 223;
    function PrintGetPrinterName(PrinterNo: Integer): WideString; dispid 224;
    function PrintGetPrintersCount: Integer; dispid 225;
    function PrintGetPrinterSettings: IUnknown; dispid 226;
    function PrintGetQuality: PrintQuality; dispid 227;
    function PrintGetStat: GdPictureStatus; dispid 228;
    function PrintInterop: GdPictureStatus; dispid 229;
    function PrintInterop_2: GdPictureStatus; dispid 230;
    function PrintSetActivePrinter(const PrinterName: WideString): WordBool; dispid 231;
    function PrintSetAlignment(ImageAlignment: PrintAlignment): GdPictureStatus; dispid 232;
    function PrintSetAutoRotation(AutoRotation: WordBool): GdPictureStatus; dispid 233;
    function PrintSetCollate(Collate: WordBool): GdPictureStatus; dispid 234;
    function PrintSetColorMode(ColorMode: PrinterColorMode): GdPictureStatus; dispid 235;
    function PrintSetCopies(Copies: Smallint): GdPictureStatus; dispid 236;
    function PrintSetDocumentName(const DocumentName: WideString): GdPictureStatus; dispid 237;
    function PrintSetDuplexMode(DuplexMode: Duplex): GdPictureStatus; dispid 238;
    function PrintSetFromToPage(FromPage: Integer; ToPage: Integer): GdPictureStatus; dispid 239;
    function PrintSetOrientation(Orientation: PrinterOrientation): GdPictureStatus; dispid 240;
    function PrintSetPageSelection(const CustomRange: WideString): GdPictureStatus; dispid 241;
    function PrintSetPaperBin(PaperBin: Integer): WordBool; dispid 242;
    function PrintSetPreRasterization(PreRasterization: WordBool): GdPictureStatus; dispid 244;
    function PrintSetPreRasterizationDPI(DPI: Single): GdPictureStatus; dispid 330;
    function PrintSetPrinterSettings(const PS: IUnknown): GdPictureStatus; dispid 245;
    function PrintSetQuality(Quality: PrintQuality): GdPictureStatus; dispid 246;
    function PrintSetShowPrintingProgress(Show: WordBool): GdPictureStatus; dispid 247;
    function PrintSetStdPaperSize(PaperSize: Integer): GdPictureStatus; dispid 248;
    function PrintSetUserPaperSize(PaperWidth: Single; PaperHeight: Single): GdPictureStatus; dispid 249;
    function PrintShowPrinterSettingsDialog: GdPictureStatus; dispid 250;
    function PrintShowPrinterSettingsDialog_2(HANDLE: Integer): GdPictureStatus; dispid 251;
    function Print_2(PrintSizeMode: PrintSizeOption): GdPictureStatus; dispid 252;
    function Redraw: GdPictureStatus; dispid 253;
    procedure Refresh; dispid 254;
    function RegionCount: Integer; dispid 255;
    function ReleaseGdPictureImage(ImageID: Integer): GdPictureStatus; dispid 256;
    procedure ReloadAnnotations; dispid 257;
    function RemoveAllRegions: GdPictureStatus; dispid 258;
    procedure RemoveItemMenu(MenuItemIdx: Integer); dispid 259;
    function RemoveRegionByID(RegionID: Integer): GdPictureStatus; dispid 260;
    function RemoveRegionByName(const Name: WideString): GdPictureStatus; dispid 261;
    function Rotate(Rotation: RotateFlipType): GdPictureStatus; dispid 262;
    function RotateAnnotations(Angle: Integer): GdPictureStatus; dispid 263;
    function RotateView(Rotation: RotateFlipType): GdPictureStatus; dispid 264;
    function SaveAnnotationsToPage: GdPictureStatus; dispid 265;
    function SaveAnnotationsToXMP(const FilePath: WideString): GdPictureStatus; dispid 266;
    function SaveAnnotationsToXMPEx(const FilePath: WideString): GdPictureStatus; dispid 267;
    function SaveDocumentToJPEG(const FilePath: WideString; Quality: Integer): GdPictureStatus; dispid 268;
    function SaveDocumentToJPEG_2(const Uri: WideString; const Login: WideString; 
                                  const Password: WideString; Quality: Integer): GdPictureStatus; dispid 269;
    function SaveDocumentToPDF(const FilePath: WideString): GdPictureStatus; dispid 270;
    function SaveDocumentToPDF_2(const Uri: WideString; const Login: WideString; 
                                 const Password: WideString): GdPictureStatus; dispid 271;
    function SaveDocumentToTIFF(const FilePath: WideString; Compression: TiffCompression): GdPictureStatus; dispid 272;
    function SaveDocumentToTIFF_2(const Uri: WideString; const Login: WideString; 
                                  const Password: WideString; Compression: TiffCompression): GdPictureStatus; dispid 273;
    function SearchText(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool): WordBool; dispid 274;
    function SearchText_2(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool): WordBool; dispid 275;
    function SearchText_3(Page: Integer; const Text: WideString; Occurrence: Integer; 
                          CaseSensitive: WordBool; var Left: Single; var Top: Single; 
                          var Width: Single; var Height: Single): WordBool; dispid 276;
    function SearchText_4(Page: Integer; const Text: WideString; Occurrence: Integer; 
                          CaseSensitive: WordBool; WholeWords: WordBool; var Left: Single; 
                          var Top: Single; var Width: Single; var Height: Single): WordBool; dispid 277;
    function SearchText_5(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool; OrdinalComparison: WordBool): WordBool; dispid 278;
    function SearchText_6(Page: Integer; const Text: WideString; Occurrence: Integer; 
                          CaseSensitive: WordBool; WholeWords: WordBool; 
                          OrdinalComparison: WordBool; var Left: Single; var Top: Single; 
                          var Width: Single; var Height: Single): WordBool; dispid 279;
    function SearchTextRegex(const Pattern: WideString; Occurence: Integer; CaseSensitive: WordBool): WordBool; dispid 333;
    function SelectAllText: GdPictureStatus; dispid 280;
    function SelectAnnotation(AnnotationIdx: Integer): GdPictureStatus; dispid 281;
    procedure SetAnnotationEditorMode(EditorMode: WordBool); dispid 282;
    procedure SetBackgroundColor(Color: Integer); dispid 283;
    procedure SetFtpPassiveMode(PassiveMode: WordBool); dispid 284;
    procedure SetHScrollBarPosition(NewPos: Integer); dispid 285;
    procedure SetHttpTransferBufferSize(Buffersize: Integer); dispid 286;
    procedure SetHVScrollBarPosition(NewPosH: Integer; NewPosV: Integer); dispid 287;
    procedure SetItemMenuCaption(MenuItemIdx: Integer; const NewMenuCaption: WideString); dispid 288;
    procedure SetItemMenuEnabled(MenuItemIdx: Integer; Enable: WordBool); dispid 289;
    procedure SetRectBorderColor(Color: Integer); dispid 290;
    procedure SetRectCoordinatesOnDocument(Left: Integer; Top: Integer; Width: Integer; 
                                           Height: Integer); dispid 291;
    procedure SetRectCoordinatesOnDocumentInches(Left: Single; Top: Single; Width: Single; 
                                                 Height: Single); dispid 292;
    procedure SetRectCoordinatesOnViewer(Left: Integer; Top: Integer; Width: Integer; 
                                         Height: Integer); dispid 293;
    function SetRegionBorderColor(RegionID: Integer; BorderColor: Integer): GdPictureStatus; dispid 294;
    function SetRegionBorderWidth(RegionID: Integer; BorderWidth: Integer): GdPictureStatus; dispid 295;
    function SetRegionColor(RegionID: Integer; Color: Integer): GdPictureStatus; dispid 296;
    function SetRegionColorSelection(RegionID: Integer; ColorSelection: Integer): GdPictureStatus; dispid 297;
    function SetRegionEditable(RegionID: Integer; Editable: WordBool): GdPictureStatus; dispid 298;
    function SetRegionHeight(RegionID: Integer; Height: Single): GdPictureStatus; dispid 299;
    function SetRegionHeightPixels(RegionID: Integer; Height: Integer): GdPictureStatus; dispid 300;
    function SetRegionLeft(RegionID: Integer; Left: Single): GdPictureStatus; dispid 301;
    function SetRegionLeftPixels(RegionID: Integer; Left: Integer): GdPictureStatus; dispid 302;
    function SetRegionMixMode(RegionID: Integer; MixMode: ForegroundMixMode): GdPictureStatus; dispid 303;
    function SetRegionName(RegionID: Integer; const Name: WideString): GdPictureStatus; dispid 304;
    function SetRegionPage(RegionID: Integer; Page: Integer): GdPictureStatus; dispid 305;
    function SetRegionSelected(RegionID: Integer; Selected: WordBool): GdPictureStatus; dispid 306;
    function SetRegionTop(RegionID: Integer; Top: Single): GdPictureStatus; dispid 307;
    function SetRegionTopPixels(RegionID: Integer; Top: Integer): GdPictureStatus; dispid 308;
    function SetRegionWidth(RegionID: Integer; Width: Single): GdPictureStatus; dispid 309;
    function SetRegionWidthPixels(RegionID: Integer; Width: Integer): GdPictureStatus; dispid 310;
    procedure SetVScrollBarPosition(NewPos: Integer); dispid 311;
    function SetZoom100: GdPictureStatus; dispid 312;
    function SetZoomFitViewer: GdPictureStatus; dispid 313;
    function SetZoomHeightViewer: GdPictureStatus; dispid 314;
    function SetZoomShrinkWidthViewer: GdPictureStatus; dispid 315;
    function SetZoomViewer: GdPictureStatus; dispid 316;
    function SetZoomWidthViewer: GdPictureStatus; dispid 317;
    function TagCount: Integer; dispid 319;
    function TagGetID(TagNo: Integer): Tags; dispid 320;
    function TagGetName(TagNo: Integer): WideString; dispid 321;
    function TagGetValueString(TagNo: Integer): WideString; dispid 322;
    function ZoomArea(Left: Integer; Top: Integer; Width: Integer; Height: Integer): GdPictureStatus; dispid 323;
    function ZoomIN: GdPictureStatus; dispid 324;
    function ZoomOUT: GdPictureStatus; dispid 325;
    function ZoomRect: GdPictureStatus; dispid 326;
    procedure ReleaseEventsTarget; dispid 331;
    procedure AddRedactionAnnotInteractive(BackColor: Integer); dispid 332;
    function ApplyAllRedactions: GdPictureStatus; dispid 343;
  end;

// *********************************************************************//
// DispIntf:  __GdViewer
// Flags:     (4096) Dispatchable
// GUID:      {49B9A7C8-DA4F-47D5-95EB-A973DC48D461}
// *********************************************************************//
  __GdViewer = dispinterface
    ['{49B9A7C8-DA4F-47D5-95EB-A973DC48D461}']
    procedure PdfUriNavigation(var Uri: WideString; var cancel: WordBool); dispid 1;
    procedure BeforeAnnotationAddedByUser(AnnotationIdx: Integer); dispid 2;
    procedure AnnotationAddedByUser(AnnotationIdx: Integer); dispid 3;
    procedure AnnotationRotated(AnnotationIdx: Integer); dispid 4;
    procedure AnnotationMoved(AnnotationIdx: Integer); dispid 5;
    procedure PdfCertificateRequest(var CertPath: WideString; var Password: WideString); dispid 6;
    procedure PdfPasswordRequest(var Password: WideString); dispid 7;
    procedure PdfFileNavigation(var FilePath: WideString; var cancel: WordBool); dispid 8;
    procedure PdfLaunchAction(ActionType: PdfActionLaunchOperation; var FilePath: WideString; 
                              var cancel: WordBool); dispid 9;
    procedure AnnotationClicked(AnnotationIdx: Integer); dispid 10;
    procedure AnnotationResized(AnnotationIdx: Integer); dispid 11;
    procedure AnnotationSelected(AnnotationIdx: Integer); dispid 12;
    procedure ViewerKeyDown(KeyValue: Integer; Control: WordBool; Shift: WordBool; Alt: WordBool); dispid 13;
    procedure AnnotationStartEditingText(AnnotationIdx: Integer); dispid 14;
    procedure SavingProgress(PageNo: Integer; PageCount: Integer); dispid 15;
    procedure DropFile(const FilePath: WideString); dispid 17;
    procedure ViewerKeyPress(KeyValue: Integer); dispid 18;
    procedure ViewerKeyUp(KeyValue: Integer; Control: WordBool; Shift: WordBool; Alt: WordBool); dispid 19;
    procedure ViewerMouseUp(Button: MouseButton; MouseX: Integer; MouseY: Integer); dispid 16;
    procedure ViewerMouseDown(Button: MouseButton; MouseX: Integer; MouseY: Integer); dispid 27;
    procedure ViewerMouseMove(MouseX: Integer; MouseY: Integer); dispid 20;
    procedure ViewerClick; dispid 21;
    procedure ViewerMouseWheel; dispid 22;
    procedure ViewerDoubleClick; dispid 23;
    procedure BeforePrintPage(Page: Integer; PageLeft: Integer; var cancel: WordBool); dispid 24;
    procedure AnnotationEndEditingText(AnnotationIdx: Integer); dispid 25;
    procedure AfterPrintPage(Page: Integer; PageLeft: Integer; var cancel: WordBool); dispid 26;
    procedure ScrollViewer; dispid 28;
    procedure RectEditedByUser; dispid 29;
    procedure AfterZoomChange; dispid 30;
    procedure BeforeZoomChange; dispid 31;
    procedure BeforeRotation(Rotation: RotateFlipType); dispid 32;
    procedure Rotation(Rotation: RotateFlipType); dispid 33;
    procedure RegionSelectedByUser(RegionID: Integer); dispid 34;
    procedure RegionResizedByUser(RegionID: Integer); dispid 35;
    procedure PageChanged; dispid 36;
    procedure DocumentClosed; dispid 37;
    procedure RegionEditedByUser(RegionID: Integer); dispid 38;
    procedure AfterDocumentChange; dispid 39;
    procedure BeforeDocumentChange; dispid 40;
    procedure PageDisplayed; dispid 41;
    procedure TransferEnded(status: GdPictureStatus; Download: WordBool); dispid 42;
    procedure DataReceived(PercentProgress: Single; SizeLeft: Integer; TotalLength: Integer); dispid 43;
    procedure ClickMenu(MenuItem: Integer); dispid 44;
    procedure RegionMovedByUser(RegionID: Integer); dispid 45;
    procedure AnnotationTextBoxKeyDown(KeyValue: Integer; Control: WordBool; Shift: WordBool; 
                                       Alt: WordBool); dispid 46;
    procedure AnnotationTextBoxLostFocus; dispid 47;
    procedure OnDispose; dispid 48;
  end;

// *********************************************************************//
// Interface: _ViewerDoubleClickEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AC9A354E-D916-3EB1-8050-CEEAB0CE0180}
// *********************************************************************//
  _ViewerDoubleClickEventHandler = interface(IDispatch)
    ['{AC9A354E-D916-3EB1-8050-CEEAB0CE0180}']
  end;

// *********************************************************************//
// DispIntf:  _ViewerDoubleClickEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AC9A354E-D916-3EB1-8050-CEEAB0CE0180}
// *********************************************************************//
  _ViewerDoubleClickEventHandlerDisp = dispinterface
    ['{AC9A354E-D916-3EB1-8050-CEEAB0CE0180}']
  end;

// *********************************************************************//
// Interface: _ViewerMouseWheelEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {88E2BE4A-4D46-333E-A9AF-DFCFB68F9492}
// *********************************************************************//
  _ViewerMouseWheelEventHandler = interface(IDispatch)
    ['{88E2BE4A-4D46-333E-A9AF-DFCFB68F9492}']
  end;

// *********************************************************************//
// DispIntf:  _ViewerMouseWheelEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {88E2BE4A-4D46-333E-A9AF-DFCFB68F9492}
// *********************************************************************//
  _ViewerMouseWheelEventHandlerDisp = dispinterface
    ['{88E2BE4A-4D46-333E-A9AF-DFCFB68F9492}']
  end;

// *********************************************************************//
// Interface: _ViewerClickEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BF8C36AE-BC94-3E40-BD5D-BEB08AB16C86}
// *********************************************************************//
  _ViewerClickEventHandler = interface(IDispatch)
    ['{BF8C36AE-BC94-3E40-BD5D-BEB08AB16C86}']
  end;

// *********************************************************************//
// DispIntf:  _ViewerClickEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BF8C36AE-BC94-3E40-BD5D-BEB08AB16C86}
// *********************************************************************//
  _ViewerClickEventHandlerDisp = dispinterface
    ['{BF8C36AE-BC94-3E40-BD5D-BEB08AB16C86}']
  end;

// *********************************************************************//
// Interface: _ViewerMouseUpEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {47E0ED94-1A20-3001-B99E-93B943446B6D}
// *********************************************************************//
  _ViewerMouseUpEventHandler = interface(IDispatch)
    ['{47E0ED94-1A20-3001-B99E-93B943446B6D}']
  end;

// *********************************************************************//
// DispIntf:  _ViewerMouseUpEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {47E0ED94-1A20-3001-B99E-93B943446B6D}
// *********************************************************************//
  _ViewerMouseUpEventHandlerDisp = dispinterface
    ['{47E0ED94-1A20-3001-B99E-93B943446B6D}']
  end;

// *********************************************************************//
// Interface: _ViewerMouseDownEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {32396BA9-AE47-3B2B-93E0-A968D7D41BF3}
// *********************************************************************//
  _ViewerMouseDownEventHandler = interface(IDispatch)
    ['{32396BA9-AE47-3B2B-93E0-A968D7D41BF3}']
  end;

// *********************************************************************//
// DispIntf:  _ViewerMouseDownEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {32396BA9-AE47-3B2B-93E0-A968D7D41BF3}
// *********************************************************************//
  _ViewerMouseDownEventHandlerDisp = dispinterface
    ['{32396BA9-AE47-3B2B-93E0-A968D7D41BF3}']
  end;

// *********************************************************************//
// Interface: _ViewerMouseMoveEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {684FA90B-67D2-396E-8FC9-BC56810A75A6}
// *********************************************************************//
  _ViewerMouseMoveEventHandler = interface(IDispatch)
    ['{684FA90B-67D2-396E-8FC9-BC56810A75A6}']
  end;

// *********************************************************************//
// DispIntf:  _ViewerMouseMoveEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {684FA90B-67D2-396E-8FC9-BC56810A75A6}
// *********************************************************************//
  _ViewerMouseMoveEventHandlerDisp = dispinterface
    ['{684FA90B-67D2-396E-8FC9-BC56810A75A6}']
  end;

// *********************************************************************//
// Interface: _ViewerKeyUpEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BA12E7F3-0CA4-3416-A1CB-D5F163AC17B0}
// *********************************************************************//
  _ViewerKeyUpEventHandler = interface(IDispatch)
    ['{BA12E7F3-0CA4-3416-A1CB-D5F163AC17B0}']
  end;

// *********************************************************************//
// DispIntf:  _ViewerKeyUpEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BA12E7F3-0CA4-3416-A1CB-D5F163AC17B0}
// *********************************************************************//
  _ViewerKeyUpEventHandlerDisp = dispinterface
    ['{BA12E7F3-0CA4-3416-A1CB-D5F163AC17B0}']
  end;

// *********************************************************************//
// Interface: _ViewerKeyDownEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3D9725FB-C4AE-3241-87C2-74EB5AEF08C5}
// *********************************************************************//
  _ViewerKeyDownEventHandler = interface(IDispatch)
    ['{3D9725FB-C4AE-3241-87C2-74EB5AEF08C5}']
  end;

// *********************************************************************//
// DispIntf:  _ViewerKeyDownEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3D9725FB-C4AE-3241-87C2-74EB5AEF08C5}
// *********************************************************************//
  _ViewerKeyDownEventHandlerDisp = dispinterface
    ['{3D9725FB-C4AE-3241-87C2-74EB5AEF08C5}']
  end;

// *********************************************************************//
// Interface: _ViewerKeyPressEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FB7399B9-914D-3C44-92A1-D3D8E9E0E0B7}
// *********************************************************************//
  _ViewerKeyPressEventHandler = interface(IDispatch)
    ['{FB7399B9-914D-3C44-92A1-D3D8E9E0E0B7}']
  end;

// *********************************************************************//
// DispIntf:  _ViewerKeyPressEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FB7399B9-914D-3C44-92A1-D3D8E9E0E0B7}
// *********************************************************************//
  _ViewerKeyPressEventHandlerDisp = dispinterface
    ['{FB7399B9-914D-3C44-92A1-D3D8E9E0E0B7}']
  end;

// *********************************************************************//
// Interface: _AnnotationTextBoxKeyDownEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3E6D0619-BA35-3EB3-8E59-23C13860254E}
// *********************************************************************//
  _AnnotationTextBoxKeyDownEventHandler = interface(IDispatch)
    ['{3E6D0619-BA35-3EB3-8E59-23C13860254E}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationTextBoxKeyDownEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3E6D0619-BA35-3EB3-8E59-23C13860254E}
// *********************************************************************//
  _AnnotationTextBoxKeyDownEventHandlerDisp = dispinterface
    ['{3E6D0619-BA35-3EB3-8E59-23C13860254E}']
  end;

// *********************************************************************//
// Interface: _AnnotationTextBoxLostFocusEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8756C601-DB33-3E27-A201-89D054D1148A}
// *********************************************************************//
  _AnnotationTextBoxLostFocusEventHandler = interface(IDispatch)
    ['{8756C601-DB33-3E27-A201-89D054D1148A}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationTextBoxLostFocusEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8756C601-DB33-3E27-A201-89D054D1148A}
// *********************************************************************//
  _AnnotationTextBoxLostFocusEventHandlerDisp = dispinterface
    ['{8756C601-DB33-3E27-A201-89D054D1148A}']
  end;

// *********************************************************************//
// Interface: _DropFileEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D6E145F8-828D-36C9-9FAD-24DAFD63BE9A}
// *********************************************************************//
  _DropFileEventHandler = interface(IDispatch)
    ['{D6E145F8-828D-36C9-9FAD-24DAFD63BE9A}']
  end;

// *********************************************************************//
// DispIntf:  _DropFileEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D6E145F8-828D-36C9-9FAD-24DAFD63BE9A}
// *********************************************************************//
  _DropFileEventHandlerDisp = dispinterface
    ['{D6E145F8-828D-36C9-9FAD-24DAFD63BE9A}']
  end;

// *********************************************************************//
// Interface: _AnnotationStartEditingTextEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4DEF6A2E-AE0C-33DB-907D-F5C2153DE192}
// *********************************************************************//
  _AnnotationStartEditingTextEventHandler = interface(IDispatch)
    ['{4DEF6A2E-AE0C-33DB-907D-F5C2153DE192}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationStartEditingTextEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4DEF6A2E-AE0C-33DB-907D-F5C2153DE192}
// *********************************************************************//
  _AnnotationStartEditingTextEventHandlerDisp = dispinterface
    ['{4DEF6A2E-AE0C-33DB-907D-F5C2153DE192}']
  end;

// *********************************************************************//
// Interface: _AnnotationEndEditingTextEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B5D0BEB5-ED08-3D26-8270-37A007BE8B8A}
// *********************************************************************//
  _AnnotationEndEditingTextEventHandler = interface(IDispatch)
    ['{B5D0BEB5-ED08-3D26-8270-37A007BE8B8A}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationEndEditingTextEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B5D0BEB5-ED08-3D26-8270-37A007BE8B8A}
// *********************************************************************//
  _AnnotationEndEditingTextEventHandlerDisp = dispinterface
    ['{B5D0BEB5-ED08-3D26-8270-37A007BE8B8A}']
  end;

// *********************************************************************//
// Interface: _AnnotationSelectedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {84DC8941-53C0-33F1-81D7-4010CA75208A}
// *********************************************************************//
  _AnnotationSelectedEventHandler = interface(IDispatch)
    ['{84DC8941-53C0-33F1-81D7-4010CA75208A}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationSelectedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {84DC8941-53C0-33F1-81D7-4010CA75208A}
// *********************************************************************//
  _AnnotationSelectedEventHandlerDisp = dispinterface
    ['{84DC8941-53C0-33F1-81D7-4010CA75208A}']
  end;

// *********************************************************************//
// Interface: _AnnotationClickedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7AC2C7B9-4FF4-34FA-812C-32DDC27F06C4}
// *********************************************************************//
  _AnnotationClickedEventHandler = interface(IDispatch)
    ['{7AC2C7B9-4FF4-34FA-812C-32DDC27F06C4}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationClickedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7AC2C7B9-4FF4-34FA-812C-32DDC27F06C4}
// *********************************************************************//
  _AnnotationClickedEventHandlerDisp = dispinterface
    ['{7AC2C7B9-4FF4-34FA-812C-32DDC27F06C4}']
  end;

// *********************************************************************//
// Interface: _BeforeAnnotationAddedByUserEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {609E8793-664B-38F4-B1BD-2D9C67BFB540}
// *********************************************************************//
  _BeforeAnnotationAddedByUserEventHandler = interface(IDispatch)
    ['{609E8793-664B-38F4-B1BD-2D9C67BFB540}']
  end;

// *********************************************************************//
// DispIntf:  _BeforeAnnotationAddedByUserEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {609E8793-664B-38F4-B1BD-2D9C67BFB540}
// *********************************************************************//
  _BeforeAnnotationAddedByUserEventHandlerDisp = dispinterface
    ['{609E8793-664B-38F4-B1BD-2D9C67BFB540}']
  end;

// *********************************************************************//
// Interface: _AnnotationAddedByUserEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D3074C30-3837-31AA-81D3-8AB09BDFC431}
// *********************************************************************//
  _AnnotationAddedByUserEventHandler = interface(IDispatch)
    ['{D3074C30-3837-31AA-81D3-8AB09BDFC431}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationAddedByUserEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D3074C30-3837-31AA-81D3-8AB09BDFC431}
// *********************************************************************//
  _AnnotationAddedByUserEventHandlerDisp = dispinterface
    ['{D3074C30-3837-31AA-81D3-8AB09BDFC431}']
  end;

// *********************************************************************//
// Interface: _AnnotationRotatedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {655F7BC8-243D-3C01-BB76-AF67553FF501}
// *********************************************************************//
  _AnnotationRotatedEventHandler = interface(IDispatch)
    ['{655F7BC8-243D-3C01-BB76-AF67553FF501}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationRotatedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {655F7BC8-243D-3C01-BB76-AF67553FF501}
// *********************************************************************//
  _AnnotationRotatedEventHandlerDisp = dispinterface
    ['{655F7BC8-243D-3C01-BB76-AF67553FF501}']
  end;

// *********************************************************************//
// Interface: _AnnotationMovedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C023D333-1DE2-3611-8A05-5D48816051B9}
// *********************************************************************//
  _AnnotationMovedEventHandler = interface(IDispatch)
    ['{C023D333-1DE2-3611-8A05-5D48816051B9}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationMovedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C023D333-1DE2-3611-8A05-5D48816051B9}
// *********************************************************************//
  _AnnotationMovedEventHandlerDisp = dispinterface
    ['{C023D333-1DE2-3611-8A05-5D48816051B9}']
  end;

// *********************************************************************//
// Interface: _AnnotationResizedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B5F17DA6-F0A6-3042-BD69-A2361AB50040}
// *********************************************************************//
  _AnnotationResizedEventHandler = interface(IDispatch)
    ['{B5F17DA6-F0A6-3042-BD69-A2361AB50040}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationResizedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B5F17DA6-F0A6-3042-BD69-A2361AB50040}
// *********************************************************************//
  _AnnotationResizedEventHandlerDisp = dispinterface
    ['{B5F17DA6-F0A6-3042-BD69-A2361AB50040}']
  end;

// *********************************************************************//
// Interface: _PdfPasswordRequestEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04F02086-5AEB-39DB-AFBE-B01E669F37FB}
// *********************************************************************//
  _PdfPasswordRequestEventHandler = interface(IDispatch)
    ['{04F02086-5AEB-39DB-AFBE-B01E669F37FB}']
  end;

// *********************************************************************//
// DispIntf:  _PdfPasswordRequestEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04F02086-5AEB-39DB-AFBE-B01E669F37FB}
// *********************************************************************//
  _PdfPasswordRequestEventHandlerDisp = dispinterface
    ['{04F02086-5AEB-39DB-AFBE-B01E669F37FB}']
  end;

// *********************************************************************//
// Interface: _PdfCertificateRequestEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8C479FC7-3BFF-3614-A06B-813AB8EE540B}
// *********************************************************************//
  _PdfCertificateRequestEventHandler = interface(IDispatch)
    ['{8C479FC7-3BFF-3614-A06B-813AB8EE540B}']
  end;

// *********************************************************************//
// DispIntf:  _PdfCertificateRequestEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8C479FC7-3BFF-3614-A06B-813AB8EE540B}
// *********************************************************************//
  _PdfCertificateRequestEventHandlerDisp = dispinterface
    ['{8C479FC7-3BFF-3614-A06B-813AB8EE540B}']
  end;

// *********************************************************************//
// Interface: _PdfFileNavigationEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {22B41BDF-FCC9-34BE-8E81-1E1DD84BC918}
// *********************************************************************//
  _PdfFileNavigationEventHandler = interface(IDispatch)
    ['{22B41BDF-FCC9-34BE-8E81-1E1DD84BC918}']
  end;

// *********************************************************************//
// DispIntf:  _PdfFileNavigationEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {22B41BDF-FCC9-34BE-8E81-1E1DD84BC918}
// *********************************************************************//
  _PdfFileNavigationEventHandlerDisp = dispinterface
    ['{22B41BDF-FCC9-34BE-8E81-1E1DD84BC918}']
  end;

// *********************************************************************//
// Interface: _PdfLaunchActionEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CF2FFA17-1D52-38D2-8B6A-CEA4C426C891}
// *********************************************************************//
  _PdfLaunchActionEventHandler = interface(IDispatch)
    ['{CF2FFA17-1D52-38D2-8B6A-CEA4C426C891}']
  end;

// *********************************************************************//
// DispIntf:  _PdfLaunchActionEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CF2FFA17-1D52-38D2-8B6A-CEA4C426C891}
// *********************************************************************//
  _PdfLaunchActionEventHandlerDisp = dispinterface
    ['{CF2FFA17-1D52-38D2-8B6A-CEA4C426C891}']
  end;

// *********************************************************************//
// Interface: _PdfUriNavigationEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {063E51BB-4D88-3B05-9A50-D54BE70E6F64}
// *********************************************************************//
  _PdfUriNavigationEventHandler = interface(IDispatch)
    ['{063E51BB-4D88-3B05-9A50-D54BE70E6F64}']
  end;

// *********************************************************************//
// DispIntf:  _PdfUriNavigationEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {063E51BB-4D88-3B05-9A50-D54BE70E6F64}
// *********************************************************************//
  _PdfUriNavigationEventHandlerDisp = dispinterface
    ['{063E51BB-4D88-3B05-9A50-D54BE70E6F64}']
  end;

// *********************************************************************//
// Interface: _BeforePrintPageEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1A24393F-4D6C-3F64-9B96-967D90763F06}
// *********************************************************************//
  _BeforePrintPageEventHandler = interface(IDispatch)
    ['{1A24393F-4D6C-3F64-9B96-967D90763F06}']
  end;

// *********************************************************************//
// DispIntf:  _BeforePrintPageEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1A24393F-4D6C-3F64-9B96-967D90763F06}
// *********************************************************************//
  _BeforePrintPageEventHandlerDisp = dispinterface
    ['{1A24393F-4D6C-3F64-9B96-967D90763F06}']
  end;

// *********************************************************************//
// Interface: _AfterPrintPageEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {64C637FA-F48B-34D1-A304-DC66BA9197C7}
// *********************************************************************//
  _AfterPrintPageEventHandler = interface(IDispatch)
    ['{64C637FA-F48B-34D1-A304-DC66BA9197C7}']
  end;

// *********************************************************************//
// DispIntf:  _AfterPrintPageEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {64C637FA-F48B-34D1-A304-DC66BA9197C7}
// *********************************************************************//
  _AfterPrintPageEventHandlerDisp = dispinterface
    ['{64C637FA-F48B-34D1-A304-DC66BA9197C7}']
  end;

// *********************************************************************//
// Interface: _DataReceivedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1A17E454-5D3A-3D52-A777-81B2A7E22CE6}
// *********************************************************************//
  _DataReceivedEventHandler = interface(IDispatch)
    ['{1A17E454-5D3A-3D52-A777-81B2A7E22CE6}']
  end;

// *********************************************************************//
// DispIntf:  _DataReceivedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1A17E454-5D3A-3D52-A777-81B2A7E22CE6}
// *********************************************************************//
  _DataReceivedEventHandlerDisp = dispinterface
    ['{1A17E454-5D3A-3D52-A777-81B2A7E22CE6}']
  end;

// *********************************************************************//
// Interface: _TransferEndedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4CD756C2-772F-36B6-AB38-83815EF4F923}
// *********************************************************************//
  _TransferEndedEventHandler = interface(IDispatch)
    ['{4CD756C2-772F-36B6-AB38-83815EF4F923}']
  end;

// *********************************************************************//
// DispIntf:  _TransferEndedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4CD756C2-772F-36B6-AB38-83815EF4F923}
// *********************************************************************//
  _TransferEndedEventHandlerDisp = dispinterface
    ['{4CD756C2-772F-36B6-AB38-83815EF4F923}']
  end;

// *********************************************************************//
// Interface: _AfterZoomChangeEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5037219D-F496-3D35-8258-B9B561BF622B}
// *********************************************************************//
  _AfterZoomChangeEventHandler = interface(IDispatch)
    ['{5037219D-F496-3D35-8258-B9B561BF622B}']
  end;

// *********************************************************************//
// DispIntf:  _AfterZoomChangeEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5037219D-F496-3D35-8258-B9B561BF622B}
// *********************************************************************//
  _AfterZoomChangeEventHandlerDisp = dispinterface
    ['{5037219D-F496-3D35-8258-B9B561BF622B}']
  end;

// *********************************************************************//
// Interface: _BeforeZoomChangeEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {607DAA74-906B-3146-999C-F4688F1E354D}
// *********************************************************************//
  _BeforeZoomChangeEventHandler = interface(IDispatch)
    ['{607DAA74-906B-3146-999C-F4688F1E354D}']
  end;

// *********************************************************************//
// DispIntf:  _BeforeZoomChangeEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {607DAA74-906B-3146-999C-F4688F1E354D}
// *********************************************************************//
  _BeforeZoomChangeEventHandlerDisp = dispinterface
    ['{607DAA74-906B-3146-999C-F4688F1E354D}']
  end;

// *********************************************************************//
// Interface: _ScrollViewerEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9776114E-70C3-3EE4-B62F-4817230551DF}
// *********************************************************************//
  _ScrollViewerEventHandler = interface(IDispatch)
    ['{9776114E-70C3-3EE4-B62F-4817230551DF}']
  end;

// *********************************************************************//
// DispIntf:  _ScrollViewerEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9776114E-70C3-3EE4-B62F-4817230551DF}
// *********************************************************************//
  _ScrollViewerEventHandlerDisp = dispinterface
    ['{9776114E-70C3-3EE4-B62F-4817230551DF}']
  end;

// *********************************************************************//
// Interface: _RectEditedByUserEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {59E2C36F-1CC9-3991-A780-6C6A3CD4A19B}
// *********************************************************************//
  _RectEditedByUserEventHandler = interface(IDispatch)
    ['{59E2C36F-1CC9-3991-A780-6C6A3CD4A19B}']
  end;

// *********************************************************************//
// DispIntf:  _RectEditedByUserEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {59E2C36F-1CC9-3991-A780-6C6A3CD4A19B}
// *********************************************************************//
  _RectEditedByUserEventHandlerDisp = dispinterface
    ['{59E2C36F-1CC9-3991-A780-6C6A3CD4A19B}']
  end;

// *********************************************************************//
// Interface: _RegionEditedByUserEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B2642276-4441-3971-A644-CD86E416C204}
// *********************************************************************//
  _RegionEditedByUserEventHandler = interface(IDispatch)
    ['{B2642276-4441-3971-A644-CD86E416C204}']
  end;

// *********************************************************************//
// DispIntf:  _RegionEditedByUserEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B2642276-4441-3971-A644-CD86E416C204}
// *********************************************************************//
  _RegionEditedByUserEventHandlerDisp = dispinterface
    ['{B2642276-4441-3971-A644-CD86E416C204}']
  end;

// *********************************************************************//
// Interface: _RegionMovedByUserEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2D2798C8-51C8-3763-80BA-392C01EA2241}
// *********************************************************************//
  _RegionMovedByUserEventHandler = interface(IDispatch)
    ['{2D2798C8-51C8-3763-80BA-392C01EA2241}']
  end;

// *********************************************************************//
// DispIntf:  _RegionMovedByUserEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2D2798C8-51C8-3763-80BA-392C01EA2241}
// *********************************************************************//
  _RegionMovedByUserEventHandlerDisp = dispinterface
    ['{2D2798C8-51C8-3763-80BA-392C01EA2241}']
  end;

// *********************************************************************//
// Interface: _RegionResizedByUserEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F8A4A824-0465-3B24-B21A-0C73D889EE6E}
// *********************************************************************//
  _RegionResizedByUserEventHandler = interface(IDispatch)
    ['{F8A4A824-0465-3B24-B21A-0C73D889EE6E}']
  end;

// *********************************************************************//
// DispIntf:  _RegionResizedByUserEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F8A4A824-0465-3B24-B21A-0C73D889EE6E}
// *********************************************************************//
  _RegionResizedByUserEventHandlerDisp = dispinterface
    ['{F8A4A824-0465-3B24-B21A-0C73D889EE6E}']
  end;

// *********************************************************************//
// Interface: _RegionSelectedByUserEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0AEEECF1-CBD4-3DE4-ACFF-35A4A66F8D87}
// *********************************************************************//
  _RegionSelectedByUserEventHandler = interface(IDispatch)
    ['{0AEEECF1-CBD4-3DE4-ACFF-35A4A66F8D87}']
  end;

// *********************************************************************//
// DispIntf:  _RegionSelectedByUserEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0AEEECF1-CBD4-3DE4-ACFF-35A4A66F8D87}
// *********************************************************************//
  _RegionSelectedByUserEventHandlerDisp = dispinterface
    ['{0AEEECF1-CBD4-3DE4-ACFF-35A4A66F8D87}']
  end;

// *********************************************************************//
// Interface: _RotationEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0E4E931C-6928-3EF1-B0FE-599D0340241C}
// *********************************************************************//
  _RotationEventHandler = interface(IDispatch)
    ['{0E4E931C-6928-3EF1-B0FE-599D0340241C}']
  end;

// *********************************************************************//
// DispIntf:  _RotationEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0E4E931C-6928-3EF1-B0FE-599D0340241C}
// *********************************************************************//
  _RotationEventHandlerDisp = dispinterface
    ['{0E4E931C-6928-3EF1-B0FE-599D0340241C}']
  end;

// *********************************************************************//
// Interface: _BeforeRotationEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5033D8D5-1C10-3359-B2AE-5B1B28D1A0BD}
// *********************************************************************//
  _BeforeRotationEventHandler = interface(IDispatch)
    ['{5033D8D5-1C10-3359-B2AE-5B1B28D1A0BD}']
  end;

// *********************************************************************//
// DispIntf:  _BeforeRotationEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5033D8D5-1C10-3359-B2AE-5B1B28D1A0BD}
// *********************************************************************//
  _BeforeRotationEventHandlerDisp = dispinterface
    ['{5033D8D5-1C10-3359-B2AE-5B1B28D1A0BD}']
  end;

// *********************************************************************//
// Interface: _PageChangedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7F6F77C6-6570-3583-B9E4-95C1551B0455}
// *********************************************************************//
  _PageChangedEventHandler = interface(IDispatch)
    ['{7F6F77C6-6570-3583-B9E4-95C1551B0455}']
  end;

// *********************************************************************//
// DispIntf:  _PageChangedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7F6F77C6-6570-3583-B9E4-95C1551B0455}
// *********************************************************************//
  _PageChangedEventHandlerDisp = dispinterface
    ['{7F6F77C6-6570-3583-B9E4-95C1551B0455}']
  end;

// *********************************************************************//
// Interface: _BeforeDocumentChangeEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AD74E532-D113-3F50-A247-49926E0C6476}
// *********************************************************************//
  _BeforeDocumentChangeEventHandler = interface(IDispatch)
    ['{AD74E532-D113-3F50-A247-49926E0C6476}']
  end;

// *********************************************************************//
// DispIntf:  _BeforeDocumentChangeEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AD74E532-D113-3F50-A247-49926E0C6476}
// *********************************************************************//
  _BeforeDocumentChangeEventHandlerDisp = dispinterface
    ['{AD74E532-D113-3F50-A247-49926E0C6476}']
  end;

// *********************************************************************//
// Interface: _AfterDocumentChangeEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {681F0BA3-6BEA-37FA-9AD5-4AD97E322866}
// *********************************************************************//
  _AfterDocumentChangeEventHandler = interface(IDispatch)
    ['{681F0BA3-6BEA-37FA-9AD5-4AD97E322866}']
  end;

// *********************************************************************//
// DispIntf:  _AfterDocumentChangeEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {681F0BA3-6BEA-37FA-9AD5-4AD97E322866}
// *********************************************************************//
  _AfterDocumentChangeEventHandlerDisp = dispinterface
    ['{681F0BA3-6BEA-37FA-9AD5-4AD97E322866}']
  end;

// *********************************************************************//
// Interface: _DocumentClosedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7531ACC-4D30-3648-A313-E0918DEF364B}
// *********************************************************************//
  _DocumentClosedEventHandler = interface(IDispatch)
    ['{F7531ACC-4D30-3648-A313-E0918DEF364B}']
  end;

// *********************************************************************//
// DispIntf:  _DocumentClosedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7531ACC-4D30-3648-A313-E0918DEF364B}
// *********************************************************************//
  _DocumentClosedEventHandlerDisp = dispinterface
    ['{F7531ACC-4D30-3648-A313-E0918DEF364B}']
  end;

// *********************************************************************//
// Interface: _BeforeDocumentClosedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {16CE9138-95FB-3278-9F24-65C45F18D2E7}
// *********************************************************************//
  _BeforeDocumentClosedEventHandler = interface(IDispatch)
    ['{16CE9138-95FB-3278-9F24-65C45F18D2E7}']
  end;

// *********************************************************************//
// DispIntf:  _BeforeDocumentClosedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {16CE9138-95FB-3278-9F24-65C45F18D2E7}
// *********************************************************************//
  _BeforeDocumentClosedEventHandlerDisp = dispinterface
    ['{16CE9138-95FB-3278-9F24-65C45F18D2E7}']
  end;

// *********************************************************************//
// Interface: _PageDisplayedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {97AC7381-9417-323E-8AAE-234B95A6157B}
// *********************************************************************//
  _PageDisplayedEventHandler = interface(IDispatch)
    ['{97AC7381-9417-323E-8AAE-234B95A6157B}']
  end;

// *********************************************************************//
// DispIntf:  _PageDisplayedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {97AC7381-9417-323E-8AAE-234B95A6157B}
// *********************************************************************//
  _PageDisplayedEventHandlerDisp = dispinterface
    ['{97AC7381-9417-323E-8AAE-234B95A6157B}']
  end;

// *********************************************************************//
// Interface: _ClickMenuEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C586B36-FF43-34BB-81FD-3702DB555991}
// *********************************************************************//
  _ClickMenuEventHandler = interface(IDispatch)
    ['{0C586B36-FF43-34BB-81FD-3702DB555991}']
  end;

// *********************************************************************//
// DispIntf:  _ClickMenuEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C586B36-FF43-34BB-81FD-3702DB555991}
// *********************************************************************//
  _ClickMenuEventHandlerDisp = dispinterface
    ['{0C586B36-FF43-34BB-81FD-3702DB555991}']
  end;

// *********************************************************************//
// Interface: ILicenseManager
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1491043E-1B4D-489D-BED8-B9E2E7598289}
// *********************************************************************//
  ILicenseManager = interface(IDispatch)
    ['{1491043E-1B4D-489D-BED8-B9E2E7598289}']
    function RegisterKEY(const Key: WideString): WordBool; safecall;
    function GetVersion: Double; safecall;
    function GetRedistPath: WideString; safecall;
  end;

// *********************************************************************//
// DispIntf:  ILicenseManagerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1491043E-1B4D-489D-BED8-B9E2E7598289}
// *********************************************************************//
  ILicenseManagerDisp = dispinterface
    ['{1491043E-1B4D-489D-BED8-B9E2E7598289}']
    function RegisterKEY(const Key: WideString): WordBool; dispid 1;
    function GetVersion: Double; dispid 2;
    function GetRedistPath: WideString; dispid 3;
  end;

// *********************************************************************//
// Interface: IPDFReducerConfiguration
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5CB4C389-2562-4339-BD98-EBB158192D61}
// *********************************************************************//
  IPDFReducerConfiguration = interface(IDispatch)
    ['{5CB4C389-2562-4339-BD98-EBB158192D61}']
    function Get_MaxBitmapPerPage: Integer; safecall;
    procedure Set_MaxBitmapPerPage(pRetVal: Integer); safecall;
    function Get_ImageQuality: PDFReducerImageQuality; safecall;
    procedure Set_ImageQuality(pRetVal: PDFReducerImageQuality); safecall;
    function Get_RecompressImages: WordBool; safecall;
    procedure Set_RecompressImages(pRetVal: WordBool); safecall;
    function Get_EnableColorDetection: WordBool; safecall;
    procedure Set_EnableColorDetection(pRetVal: WordBool); safecall;
    function Get_PackDocument: WordBool; safecall;
    procedure Set_PackDocument(pRetVal: WordBool); safecall;
    function Get_DownscaleImages: WordBool; safecall;
    procedure Set_DownscaleImages(pRetVal: WordBool); safecall;
    function Get_DownscaleResolution: Integer; safecall;
    procedure Set_DownscaleResolution(pRetVal: Integer); safecall;
    function Get_DownscaleResolutionMRC: Integer; safecall;
    procedure Set_DownscaleResolutionMRC(pRetVal: Integer); safecall;
    function Get_FastWebView: WordBool; safecall;
    procedure Set_FastWebView(pRetVal: WordBool); safecall;
    function Get_PackFonts: WordBool; safecall;
    procedure Set_PackFonts(pRetVal: WordBool); safecall;
    function Get_OutputFormat: PDFReducerPDFVersion; safecall;
    procedure Set_OutputFormat(pRetVal: PDFReducerPDFVersion); safecall;
    function Get_EnableJPEG2000: WordBool; safecall;
    procedure Set_EnableJPEG2000(pRetVal: WordBool); safecall;
    function Get_EnableJBIG2: WordBool; safecall;
    procedure Set_EnableJBIG2(pRetVal: WordBool); safecall;
    function Get_JBIG2PMSThreshold: Single; safecall;
    procedure Set_JBIG2PMSThreshold(pRetVal: Single); safecall;
    function Get_EnableCharRepair: WordBool; safecall;
    procedure Set_EnableCharRepair(pRetVal: WordBool); safecall;
    function Get_EnableMRC: WordBool; safecall;
    procedure Set_EnableMRC(pRetVal: WordBool); safecall;
    function Get_ProducerName: WideString; safecall;
    procedure Set_ProducerName(const pRetVal: WideString); safecall;
    function Get_Title: WideString; safecall;
    procedure Set_Title(const pRetVal: WideString); safecall;
    function Get_Producer: WideString; safecall;
    procedure Set_Producer(const pRetVal: WideString); safecall;
    function Get_Author: WideString; safecall;
    procedure Set_Author(const pRetVal: WideString); safecall;
    function Get_RemoveBlankPages: WordBool; safecall;
    procedure Set_RemoveBlankPages(pRetVal: WordBool); safecall;
    function Get_RemoveJavaScript: WordBool; safecall;
    procedure Set_RemoveJavaScript(pRetVal: WordBool); safecall;
    function Get_PreserveSmoothing: WordBool; safecall;
    procedure Set_PreserveSmoothing(pRetVal: WordBool); safecall;
    function Get_RemoveMetadata: WordBool; safecall;
    procedure Set_RemoveMetadata(pRetVal: WordBool); safecall;
    function Get_RemovePageThumbnails: WordBool; safecall;
    procedure Set_RemovePageThumbnails(pRetVal: WordBool); safecall;
    function Get_RemoveFormFields: WordBool; safecall;
    procedure Set_RemoveFormFields(pRetVal: WordBool); safecall;
    function Get_RemoveAnnotations: WordBool; safecall;
    procedure Set_RemoveAnnotations(pRetVal: WordBool); safecall;
    function Get_RemoveBookmarks: WordBool; safecall;
    procedure Set_RemoveBookmarks(pRetVal: WordBool); safecall;
    function Get_RemoveEmbeddedFiles: WordBool; safecall;
    procedure Set_RemoveEmbeddedFiles(pRetVal: WordBool); safecall;
    function Get_RemoveHyperlinks: WordBool; safecall;
    procedure Set_RemoveHyperlinks(pRetVal: WordBool); safecall;
    function Get_RemoveLogicalStructure: WordBool; safecall;
    procedure Set_RemoveLogicalStructure(pRetVal: WordBool); safecall;
    property MaxBitmapPerPage: Integer read Get_MaxBitmapPerPage write Set_MaxBitmapPerPage;
    property ImageQuality: PDFReducerImageQuality read Get_ImageQuality write Set_ImageQuality;
    property RecompressImages: WordBool read Get_RecompressImages write Set_RecompressImages;
    property EnableColorDetection: WordBool read Get_EnableColorDetection write Set_EnableColorDetection;
    property PackDocument: WordBool read Get_PackDocument write Set_PackDocument;
    property DownscaleImages: WordBool read Get_DownscaleImages write Set_DownscaleImages;
    property DownscaleResolution: Integer read Get_DownscaleResolution write Set_DownscaleResolution;
    property DownscaleResolutionMRC: Integer read Get_DownscaleResolutionMRC write Set_DownscaleResolutionMRC;
    property FastWebView: WordBool read Get_FastWebView write Set_FastWebView;
    property PackFonts: WordBool read Get_PackFonts write Set_PackFonts;
    property OutputFormat: PDFReducerPDFVersion read Get_OutputFormat write Set_OutputFormat;
    property EnableJPEG2000: WordBool read Get_EnableJPEG2000 write Set_EnableJPEG2000;
    property EnableJBIG2: WordBool read Get_EnableJBIG2 write Set_EnableJBIG2;
    property JBIG2PMSThreshold: Single read Get_JBIG2PMSThreshold write Set_JBIG2PMSThreshold;
    property EnableCharRepair: WordBool read Get_EnableCharRepair write Set_EnableCharRepair;
    property EnableMRC: WordBool read Get_EnableMRC write Set_EnableMRC;
    property ProducerName: WideString read Get_ProducerName write Set_ProducerName;
    property Title: WideString read Get_Title write Set_Title;
    property Producer: WideString read Get_Producer write Set_Producer;
    property Author: WideString read Get_Author write Set_Author;
    property RemoveBlankPages: WordBool read Get_RemoveBlankPages write Set_RemoveBlankPages;
    property RemoveJavaScript: WordBool read Get_RemoveJavaScript write Set_RemoveJavaScript;
    property PreserveSmoothing: WordBool read Get_PreserveSmoothing write Set_PreserveSmoothing;
    property RemoveMetadata: WordBool read Get_RemoveMetadata write Set_RemoveMetadata;
    property RemovePageThumbnails: WordBool read Get_RemovePageThumbnails write Set_RemovePageThumbnails;
    property RemoveFormFields: WordBool read Get_RemoveFormFields write Set_RemoveFormFields;
    property RemoveAnnotations: WordBool read Get_RemoveAnnotations write Set_RemoveAnnotations;
    property RemoveBookmarks: WordBool read Get_RemoveBookmarks write Set_RemoveBookmarks;
    property RemoveEmbeddedFiles: WordBool read Get_RemoveEmbeddedFiles write Set_RemoveEmbeddedFiles;
    property RemoveHyperlinks: WordBool read Get_RemoveHyperlinks write Set_RemoveHyperlinks;
    property RemoveLogicalStructure: WordBool read Get_RemoveLogicalStructure write Set_RemoveLogicalStructure;
  end;

// *********************************************************************//
// DispIntf:  IPDFReducerConfigurationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5CB4C389-2562-4339-BD98-EBB158192D61}
// *********************************************************************//
  IPDFReducerConfigurationDisp = dispinterface
    ['{5CB4C389-2562-4339-BD98-EBB158192D61}']
    property MaxBitmapPerPage: Integer dispid 1;
    property ImageQuality: PDFReducerImageQuality dispid 2;
    property RecompressImages: WordBool dispid 3;
    property EnableColorDetection: WordBool dispid 4;
    property PackDocument: WordBool dispid 5;
    property DownscaleImages: WordBool dispid 6;
    property DownscaleResolution: Integer dispid 7;
    property DownscaleResolutionMRC: Integer dispid 8;
    property FastWebView: WordBool dispid 9;
    property PackFonts: WordBool dispid 10;
    property OutputFormat: PDFReducerPDFVersion dispid 11;
    property EnableJPEG2000: WordBool dispid 12;
    property EnableJBIG2: WordBool dispid 13;
    property JBIG2PMSThreshold: Single dispid 14;
    property EnableCharRepair: WordBool dispid 15;
    property EnableMRC: WordBool dispid 16;
    property ProducerName: WideString dispid 17;
    property Title: WideString dispid 18;
    property Producer: WideString dispid 19;
    property Author: WideString dispid 20;
    property RemoveBlankPages: WordBool dispid 21;
    property RemoveJavaScript: WordBool dispid 22;
    property PreserveSmoothing: WordBool dispid 23;
    property RemoveMetadata: WordBool dispid 24;
    property RemovePageThumbnails: WordBool dispid 25;
    property RemoveFormFields: WordBool dispid 26;
    property RemoveAnnotations: WordBool dispid 27;
    property RemoveBookmarks: WordBool dispid 28;
    property RemoveEmbeddedFiles: WordBool dispid 29;
    property RemoveHyperlinks: WordBool dispid 30;
    property RemoveLogicalStructure: WordBool dispid 31;
  end;

// *********************************************************************//
// Interface: IThumbnailEx
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CF79EF22-544F-4E0B-8557-57A7950A507C}
// *********************************************************************//
  IThumbnailEx = interface(IDispatch)
    ['{CF79EF22-544F-4E0B-8557-57A7950A507C}']
    function Get_HotTracking: WordBool; safecall;
    procedure Set_HotTracking(pRetVal: WordBool); safecall;
    function Get_DefaultItemTextPrefix: WideString; safecall;
    procedure Set_DefaultItemTextPrefix(const pRetVal: WideString); safecall;
    function Get_PdfIncreaseTextContrast: WordBool; safecall;
    procedure Set_PdfIncreaseTextContrast(pRetVal: WordBool); safecall;
    function Get_RotateExif: WordBool; safecall;
    procedure Set_RotateExif(pRetVal: WordBool); safecall;
    function Get_OwnDrop: WordBool; safecall;
    procedure Set_OwnDrop(pRetVal: WordBool); safecall;
    function Get_PauseThumbsLoading: WordBool; safecall;
    procedure Set_PauseThumbsLoading(pRetVal: WordBool); safecall;
    function Get_PreloadAllItems: WordBool; safecall;
    procedure Set_PreloadAllItems(pRetVal: WordBool); safecall;
    function Get_AllItemsLoaded: WordBool; safecall;
    function Get_ThumbnailBackColor: Integer; safecall;
    procedure Set_ThumbnailBackColor(pRetVal: Integer); safecall;
    function Get_SelectedThumbnailBackColor: Integer; safecall;
    procedure Set_SelectedThumbnailBackColor(pRetVal: Integer); safecall;
    function Get_HorizontalTextAlignment: TextAlignment; safecall;
    procedure Set_HorizontalTextAlignment(pRetVal: TextAlignment); safecall;
    function Get_VerticalTextAlignment: TextAlignment; safecall;
    procedure Set_VerticalTextAlignment(pRetVal: TextAlignment); safecall;
    function Get_ThumbnailBorder: WordBool; safecall;
    procedure Set_ThumbnailBorder(pRetVal: WordBool); safecall;
    function Get_ThumbnailAlignment: ThumbnailAlignment; safecall;
    procedure Set_ThumbnailAlignment(pRetVal: ThumbnailAlignment); safecall;
    function Get_ItemCount: Integer; safecall;
    function Get_CheckBoxes: WordBool; safecall;
    procedure Set_CheckBoxes(pRetVal: WordBool); safecall;
    function Get_CheckBoxesMarginLeft: Integer; safecall;
    procedure Set_CheckBoxesMarginLeft(pRetVal: Integer); safecall;
    function Get_CheckBoxesMarginTop: Integer; safecall;
    procedure Set_CheckBoxesMarginTop(pRetVal: Integer); safecall;
    function Get_TextMarginLeft: Integer; safecall;
    procedure Set_TextMarginLeft(pRetVal: Integer); safecall;
    function Get_TextMarginTop: Integer; safecall;
    procedure Set_TextMarginTop(pRetVal: Integer); safecall;
    function Get_Multiselect: WordBool; safecall;
    procedure Set_Multiselect(pRetVal: WordBool); safecall;
    function Get_AllowMoveItems: WordBool; safecall;
    procedure Set_AllowMoveItems(pRetVal: WordBool); safecall;
    function Get_AllowDropFiles: WordBool; safecall;
    procedure Set_AllowDropFiles(pRetVal: WordBool); safecall;
    function Get_LockGdViewerEvents: WordBool; safecall;
    procedure Set_LockGdViewerEvents(pRetVal: WordBool); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRetVal: Integer); safecall;
    function Get_ShowText: WordBool; safecall;
    procedure Set_ShowText(pRetVal: WordBool); safecall;
    function Get_DisplayAnnotations: WordBool; safecall;
    procedure Set_DisplayAnnotations(pRetVal: WordBool); safecall;
    function Get_EnableDropShadow: WordBool; safecall;
    procedure Set_EnableDropShadow(pRetVal: WordBool); safecall;
    function AddItemFromFile(const FilePath: WideString): GdPictureStatus; safecall;
    function AddItemFromGdPictureImage(ImageID: Integer): GdPictureStatus; safecall;
    function AddItemFromGdPictureImage_2(ImageID: Integer; const Text: WideString): GdPictureStatus; safecall;
    function ARGBI(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer; safecall;
    procedure ClearAllItems; safecall;
    procedure Dispose; safecall;
    procedure EnsureVisibleItem(ItemIdx: Integer); safecall;
    function FindNearestItem(Direction: SearchDirectionHint; X: Integer; Y: Integer): Integer; safecall;
    function GetItemAt(X: Integer; Y: Integer): Integer; safecall;
    function GetItemBitmap(ItemIdx: Integer): Integer; safecall;
    function GetItemCheckState(ItemIdx: Integer): WordBool; safecall;
    function GetItemFileSource(ItemIdx: Integer): WideString; safecall;
    function GetItemFocusState(ItemIdx: Integer): WordBool; safecall;
    function GetItemSelectState(ItemIdx: Integer): WordBool; safecall;
    function GetItemTag(ItemIdx: Integer): OleVariant; safecall;
    function GetItemText(ItemIdx: Integer): WideString; safecall;
    function InsertItemFromFile(const FilePath: WideString; Position: Integer): GdPictureStatus; safecall;
    function InsertItemFromGdPictureImage(ImageID: Integer; const Text: WideString; 
                                          Position: Integer): GdPictureStatus; safecall;
    function LoadFromDirectory(const Path: WideString; IncludeSubFolders: WordBool): GdPictureStatus; safecall;
    function LoadFromDirectory_2(const Path: WideString; IncludeSubFolders: WordBool; 
                                 const SearchPattern: WideString): GdPictureStatus; safecall;
    function LoadFromDirectory_3(const Path: WideString; IncludeSubFolders: WordBool; 
                                 const SearchPatterns: WideString): GdPictureStatus; safecall;
    function LoadFromFiles(var Files: PSafeArray): GdPictureStatus; safecall;
    function LoadFromGdPictureImage(ImageID: Integer): GdPictureStatus; safecall;
    function LoadFromGdPicturePDF(const PDF: IGdPicturePDF): GdPictureStatus; safecall;
    function LoadFromGdViewer(GdViewer: OleVariant): GdPictureStatus; safecall;
    procedure LoadNewThumbnails; safecall;
    procedure MoveItem(ItemIdx: Integer; DstIdx: Integer); safecall;
    procedure RedrawItem(ItemIdx: Integer); safecall;
    procedure Refresh; safecall;
    function ReleaseGdPictureImage(ImageID: Integer): GdPictureStatus; safecall;
    procedure ReloadThumbnails; safecall;
    procedure RemoveItem(ItemIdx: Integer); safecall;
    function SelectItem(ItemIdx: Integer): GdPictureStatus; safecall;
    function SetItemBackgroundColor(ItemIdx: Integer; Color: Integer): GdPictureStatus; safecall;
    function SetItemBitmap(ItemIdx: Integer; ImageID: Integer): GdPictureStatus; safecall;
    function SetItemCheckState(ItemIdx: Integer; Checked: WordBool): GdPictureStatus; safecall;
    function SetItemSelectState(ItemIdx: Integer; Selected: WordBool): GdPictureStatus; safecall;
    function SetItemsFont(const FontName: WideString; FontSize: Single; FontStyle: FontStyle): GdPictureStatus; safecall;
    procedure SetItemsSize(Width: Integer; Height: Integer); safecall;
    procedure SetItemsSpacing(Horizontal: Integer; Vertical: Integer); safecall;
    function SetItemTag(ItemIdx: Integer; Tag: OleVariant): GdPictureStatus; safecall;
    function SetItemText(ItemIdx: Integer; const Text: WideString): GdPictureStatus; safecall;
    procedure SwapItemsBitmap(Item1Idx: Integer; Item2Idx: Integer); safecall;
    procedure SwapItemsBitmap_2(Item1Idx: Integer; Item2Idx: Integer; SwapText: WordBool); safecall;
    procedure ReleaseEventsTarget; safecall;
    function SetItemToolTipText(ItemIdx: Integer; const ToolTipText: WideString): GdPictureStatus; safecall;
    function LoadAllItems: GdPictureStatus; safecall;
    function UnselectAllItems: GdPictureStatus; safecall;
    function Get_DefaultItemCheckState: WordBool; safecall;
    procedure Set_DefaultItemCheckState(pRetVal: WordBool); safecall;
    function Get_SelectedThumbnailBackColorAlpha: Integer; safecall;
    procedure Set_SelectedThumbnailBackColorAlpha(pRetVal: Integer); safecall;
    property HotTracking: WordBool read Get_HotTracking write Set_HotTracking;
    property DefaultItemTextPrefix: WideString read Get_DefaultItemTextPrefix write Set_DefaultItemTextPrefix;
    property PdfIncreaseTextContrast: WordBool read Get_PdfIncreaseTextContrast write Set_PdfIncreaseTextContrast;
    property RotateExif: WordBool read Get_RotateExif write Set_RotateExif;
    property OwnDrop: WordBool read Get_OwnDrop write Set_OwnDrop;
    property PauseThumbsLoading: WordBool read Get_PauseThumbsLoading write Set_PauseThumbsLoading;
    property PreloadAllItems: WordBool read Get_PreloadAllItems write Set_PreloadAllItems;
    property AllItemsLoaded: WordBool read Get_AllItemsLoaded;
    property ThumbnailBackColor: Integer read Get_ThumbnailBackColor write Set_ThumbnailBackColor;
    property SelectedThumbnailBackColor: Integer read Get_SelectedThumbnailBackColor write Set_SelectedThumbnailBackColor;
    property HorizontalTextAlignment: TextAlignment read Get_HorizontalTextAlignment write Set_HorizontalTextAlignment;
    property VerticalTextAlignment: TextAlignment read Get_VerticalTextAlignment write Set_VerticalTextAlignment;
    property ThumbnailBorder: WordBool read Get_ThumbnailBorder write Set_ThumbnailBorder;
    property ThumbnailAlignment: ThumbnailAlignment read Get_ThumbnailAlignment write Set_ThumbnailAlignment;
    property ItemCount: Integer read Get_ItemCount;
    property CheckBoxes: WordBool read Get_CheckBoxes write Set_CheckBoxes;
    property CheckBoxesMarginLeft: Integer read Get_CheckBoxesMarginLeft write Set_CheckBoxesMarginLeft;
    property CheckBoxesMarginTop: Integer read Get_CheckBoxesMarginTop write Set_CheckBoxesMarginTop;
    property TextMarginLeft: Integer read Get_TextMarginLeft write Set_TextMarginLeft;
    property TextMarginTop: Integer read Get_TextMarginTop write Set_TextMarginTop;
    property Multiselect: WordBool read Get_Multiselect write Set_Multiselect;
    property AllowMoveItems: WordBool read Get_AllowMoveItems write Set_AllowMoveItems;
    property AllowDropFiles: WordBool read Get_AllowDropFiles write Set_AllowDropFiles;
    property LockGdViewerEvents: WordBool read Get_LockGdViewerEvents write Set_LockGdViewerEvents;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property ShowText: WordBool read Get_ShowText write Set_ShowText;
    property DisplayAnnotations: WordBool read Get_DisplayAnnotations write Set_DisplayAnnotations;
    property EnableDropShadow: WordBool read Get_EnableDropShadow write Set_EnableDropShadow;
    property DefaultItemCheckState: WordBool read Get_DefaultItemCheckState write Set_DefaultItemCheckState;
    property SelectedThumbnailBackColorAlpha: Integer read Get_SelectedThumbnailBackColorAlpha write Set_SelectedThumbnailBackColorAlpha;
  end;

// *********************************************************************//
// DispIntf:  IThumbnailExDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CF79EF22-544F-4E0B-8557-57A7950A507C}
// *********************************************************************//
  IThumbnailExDisp = dispinterface
    ['{CF79EF22-544F-4E0B-8557-57A7950A507C}']
    property HotTracking: WordBool dispid 1;
    property DefaultItemTextPrefix: WideString dispid 3;
    property PdfIncreaseTextContrast: WordBool dispid 4;
    property RotateExif: WordBool dispid 5;
    property OwnDrop: WordBool dispid 6;
    property PauseThumbsLoading: WordBool dispid 7;
    property PreloadAllItems: WordBool dispid 8;
    property AllItemsLoaded: WordBool readonly dispid 9;
    property ThumbnailBackColor: Integer dispid 10;
    property SelectedThumbnailBackColor: Integer dispid 11;
    property HorizontalTextAlignment: TextAlignment dispid 12;
    property VerticalTextAlignment: TextAlignment dispid 13;
    property ThumbnailBorder: WordBool dispid 14;
    property ThumbnailAlignment: ThumbnailAlignment dispid 15;
    property ItemCount: Integer readonly dispid 16;
    property CheckBoxes: WordBool dispid 17;
    property CheckBoxesMarginLeft: Integer dispid 18;
    property CheckBoxesMarginTop: Integer dispid 19;
    property TextMarginLeft: Integer dispid 20;
    property TextMarginTop: Integer dispid 21;
    property Multiselect: WordBool dispid 22;
    property AllowMoveItems: WordBool dispid 23;
    property AllowDropFiles: WordBool dispid 24;
    property LockGdViewerEvents: WordBool dispid 25;
    property BackColor: Integer dispid 26;
    property ShowText: WordBool dispid 27;
    property DisplayAnnotations: WordBool dispid 28;
    property EnableDropShadow: WordBool dispid 78;
    function AddItemFromFile(const FilePath: WideString): GdPictureStatus; dispid 29;
    function AddItemFromGdPictureImage(ImageID: Integer): GdPictureStatus; dispid 30;
    function AddItemFromGdPictureImage_2(ImageID: Integer; const Text: WideString): GdPictureStatus; dispid 31;
    function ARGBI(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer; dispid 32;
    procedure ClearAllItems; dispid 33;
    procedure Dispose; dispid 34;
    procedure EnsureVisibleItem(ItemIdx: Integer); dispid 35;
    function FindNearestItem(Direction: SearchDirectionHint; X: Integer; Y: Integer): Integer; dispid 36;
    function GetItemAt(X: Integer; Y: Integer): Integer; dispid 37;
    function GetItemBitmap(ItemIdx: Integer): Integer; dispid 38;
    function GetItemCheckState(ItemIdx: Integer): WordBool; dispid 39;
    function GetItemFileSource(ItemIdx: Integer): WideString; dispid 40;
    function GetItemFocusState(ItemIdx: Integer): WordBool; dispid 41;
    function GetItemSelectState(ItemIdx: Integer): WordBool; dispid 42;
    function GetItemTag(ItemIdx: Integer): OleVariant; dispid 43;
    function GetItemText(ItemIdx: Integer): WideString; dispid 44;
    function InsertItemFromFile(const FilePath: WideString; Position: Integer): GdPictureStatus; dispid 45;
    function InsertItemFromGdPictureImage(ImageID: Integer; const Text: WideString; 
                                          Position: Integer): GdPictureStatus; dispid 46;
    function LoadFromDirectory(const Path: WideString; IncludeSubFolders: WordBool): GdPictureStatus; dispid 47;
    function LoadFromDirectory_2(const Path: WideString; IncludeSubFolders: WordBool; 
                                 const SearchPattern: WideString): GdPictureStatus; dispid 48;
    function LoadFromDirectory_3(const Path: WideString; IncludeSubFolders: WordBool; 
                                 const SearchPatterns: WideString): GdPictureStatus; dispid 49;
    function LoadFromFiles(var Files: {??PSafeArray}OleVariant): GdPictureStatus; dispid 50;
    function LoadFromGdPictureImage(ImageID: Integer): GdPictureStatus; dispid 51;
    function LoadFromGdPicturePDF(const PDF: IGdPicturePDF): GdPictureStatus; dispid 52;
    function LoadFromGdViewer(GdViewer: OleVariant): GdPictureStatus; dispid 53;
    procedure LoadNewThumbnails; dispid 54;
    procedure MoveItem(ItemIdx: Integer; DstIdx: Integer); dispid 55;
    procedure RedrawItem(ItemIdx: Integer); dispid 56;
    procedure Refresh; dispid 57;
    function ReleaseGdPictureImage(ImageID: Integer): GdPictureStatus; dispid 58;
    procedure ReloadThumbnails; dispid 59;
    procedure RemoveItem(ItemIdx: Integer); dispid 60;
    function SelectItem(ItemIdx: Integer): GdPictureStatus; dispid 61;
    function SetItemBackgroundColor(ItemIdx: Integer; Color: Integer): GdPictureStatus; dispid 62;
    function SetItemBitmap(ItemIdx: Integer; ImageID: Integer): GdPictureStatus; dispid 63;
    function SetItemCheckState(ItemIdx: Integer; Checked: WordBool): GdPictureStatus; dispid 64;
    function SetItemSelectState(ItemIdx: Integer; Selected: WordBool): GdPictureStatus; dispid 65;
    function SetItemsFont(const FontName: WideString; FontSize: Single; FontStyle: FontStyle): GdPictureStatus; dispid 66;
    procedure SetItemsSize(Width: Integer; Height: Integer); dispid 67;
    procedure SetItemsSpacing(Horizontal: Integer; Vertical: Integer); dispid 68;
    function SetItemTag(ItemIdx: Integer; Tag: OleVariant): GdPictureStatus; dispid 69;
    function SetItemText(ItemIdx: Integer; const Text: WideString): GdPictureStatus; dispid 70;
    procedure SwapItemsBitmap(Item1Idx: Integer; Item2Idx: Integer); dispid 71;
    procedure SwapItemsBitmap_2(Item1Idx: Integer; Item2Idx: Integer; SwapText: WordBool); dispid 72;
    procedure ReleaseEventsTarget; dispid 73;
    function SetItemToolTipText(ItemIdx: Integer; const ToolTipText: WideString): GdPictureStatus; dispid 74;
    function LoadAllItems: GdPictureStatus; dispid 75;
    function UnselectAllItems: GdPictureStatus; dispid 76;
    property DefaultItemCheckState: WordBool dispid 77;
    property SelectedThumbnailBackColorAlpha: Integer dispid 79;
  end;

// *********************************************************************//
// DispIntf:  __ThumbnailEx
// Flags:     (4096) Dispatchable
// GUID:      {C6B5D334-094A-4DD9-9827-780B09C418CA}
// *********************************************************************//
  __ThumbnailEx = dispinterface
    ['{C6B5D334-094A-4DD9-9827-780B09C418CA}']
    procedure ControlDoubleClick; dispid 1;
    procedure ControlMouseWheel; dispid 2;
    procedure ControlClick; dispid 3;
    procedure ControlMouseUp(Button: MouseButton; X: Integer; Y: Integer); dispid 4;
    procedure ControlMouseDown(Button: MouseButton; X: Integer; Y: Integer); dispid 5;
    procedure ControlMouseMove(X: Integer; Y: Integer); dispid 6;
    procedure ControlKeyUp(KeyValue: Integer; Control: WordBool; Shift: WordBool; Alt: WordBool); dispid 7;
    procedure ControlKeyDown(KeyValue: Integer; Control: WordBool; Shift: WordBool; Alt: WordBool); dispid 8;
    procedure ControlKeyPress(KeyValue: Integer); dispid 9;
    procedure Scroll(Min: Integer; Max: Integer; Page: Integer; Pos: Integer; TrackPos: Integer); dispid 10;
    procedure OnAllItemsLoaded; dispid 11;
    procedure ItemChecked(Idx: Integer; Checked: WordBool); dispid 12;
    procedure ItemClicked(Idx: Integer; Button: MouseButton); dispid 13;
    procedure ItemDoubleClicked(Idx: Integer); dispid 14;
    procedure ItemSelectionChanged(Idx: Integer; Selected: WordBool); dispid 15;
    procedure ItemMoved(srcIdx: Integer; DstIdx: Integer); dispid 16;
    procedure FileTypeNotSupported(const FilePath: WideString; var CustomBitmapID: Integer; 
                                   var ReleaseBitmap: WordBool); dispid 17;
    procedure OnDispose; dispid 18;
  end;

// *********************************************************************//
// Interface: _ControlDoubleClickEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {879706ED-6E59-32EA-9C05-FDC9D5CFB7D4}
// *********************************************************************//
  _ControlDoubleClickEventHandler = interface(IDispatch)
    ['{879706ED-6E59-32EA-9C05-FDC9D5CFB7D4}']
  end;

// *********************************************************************//
// DispIntf:  _ControlDoubleClickEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {879706ED-6E59-32EA-9C05-FDC9D5CFB7D4}
// *********************************************************************//
  _ControlDoubleClickEventHandlerDisp = dispinterface
    ['{879706ED-6E59-32EA-9C05-FDC9D5CFB7D4}']
  end;

// *********************************************************************//
// Interface: _ControlMouseWheelEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {00A6C0B2-9F12-3145-BBA5-DC5D71A5963B}
// *********************************************************************//
  _ControlMouseWheelEventHandler = interface(IDispatch)
    ['{00A6C0B2-9F12-3145-BBA5-DC5D71A5963B}']
  end;

// *********************************************************************//
// DispIntf:  _ControlMouseWheelEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {00A6C0B2-9F12-3145-BBA5-DC5D71A5963B}
// *********************************************************************//
  _ControlMouseWheelEventHandlerDisp = dispinterface
    ['{00A6C0B2-9F12-3145-BBA5-DC5D71A5963B}']
  end;

// *********************************************************************//
// Interface: _ControlClickEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3862573D-5BFA-3850-ABBF-016FCCAF161F}
// *********************************************************************//
  _ControlClickEventHandler = interface(IDispatch)
    ['{3862573D-5BFA-3850-ABBF-016FCCAF161F}']
  end;

// *********************************************************************//
// DispIntf:  _ControlClickEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3862573D-5BFA-3850-ABBF-016FCCAF161F}
// *********************************************************************//
  _ControlClickEventHandlerDisp = dispinterface
    ['{3862573D-5BFA-3850-ABBF-016FCCAF161F}']
  end;

// *********************************************************************//
// Interface: _ControlMouseUpEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {90BA8ACE-747B-317F-8FA0-A36609CA8081}
// *********************************************************************//
  _ControlMouseUpEventHandler = interface(IDispatch)
    ['{90BA8ACE-747B-317F-8FA0-A36609CA8081}']
  end;

// *********************************************************************//
// DispIntf:  _ControlMouseUpEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {90BA8ACE-747B-317F-8FA0-A36609CA8081}
// *********************************************************************//
  _ControlMouseUpEventHandlerDisp = dispinterface
    ['{90BA8ACE-747B-317F-8FA0-A36609CA8081}']
  end;

// *********************************************************************//
// Interface: _ControlMouseDownEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2D6A9405-9A84-362E-875E-2B6C1801C196}
// *********************************************************************//
  _ControlMouseDownEventHandler = interface(IDispatch)
    ['{2D6A9405-9A84-362E-875E-2B6C1801C196}']
  end;

// *********************************************************************//
// DispIntf:  _ControlMouseDownEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2D6A9405-9A84-362E-875E-2B6C1801C196}
// *********************************************************************//
  _ControlMouseDownEventHandlerDisp = dispinterface
    ['{2D6A9405-9A84-362E-875E-2B6C1801C196}']
  end;

// *********************************************************************//
// Interface: _ControlMouseMoveEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {305E49A1-E840-32C3-9527-E12F71E26DB6}
// *********************************************************************//
  _ControlMouseMoveEventHandler = interface(IDispatch)
    ['{305E49A1-E840-32C3-9527-E12F71E26DB6}']
  end;

// *********************************************************************//
// DispIntf:  _ControlMouseMoveEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {305E49A1-E840-32C3-9527-E12F71E26DB6}
// *********************************************************************//
  _ControlMouseMoveEventHandlerDisp = dispinterface
    ['{305E49A1-E840-32C3-9527-E12F71E26DB6}']
  end;

// *********************************************************************//
// Interface: _ControlKeyUpEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {757D1792-2ABC-3FDB-8D16-FB2D4CFD8C57}
// *********************************************************************//
  _ControlKeyUpEventHandler = interface(IDispatch)
    ['{757D1792-2ABC-3FDB-8D16-FB2D4CFD8C57}']
  end;

// *********************************************************************//
// DispIntf:  _ControlKeyUpEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {757D1792-2ABC-3FDB-8D16-FB2D4CFD8C57}
// *********************************************************************//
  _ControlKeyUpEventHandlerDisp = dispinterface
    ['{757D1792-2ABC-3FDB-8D16-FB2D4CFD8C57}']
  end;

// *********************************************************************//
// Interface: _ControlKeyDownEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {620F501F-DA83-36AE-9BDA-0977D76DDDD0}
// *********************************************************************//
  _ControlKeyDownEventHandler = interface(IDispatch)
    ['{620F501F-DA83-36AE-9BDA-0977D76DDDD0}']
  end;

// *********************************************************************//
// DispIntf:  _ControlKeyDownEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {620F501F-DA83-36AE-9BDA-0977D76DDDD0}
// *********************************************************************//
  _ControlKeyDownEventHandlerDisp = dispinterface
    ['{620F501F-DA83-36AE-9BDA-0977D76DDDD0}']
  end;

// *********************************************************************//
// Interface: _ControlKeyPressEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {08718A37-1C72-3F52-87EA-C89F0FEA6DD2}
// *********************************************************************//
  _ControlKeyPressEventHandler = interface(IDispatch)
    ['{08718A37-1C72-3F52-87EA-C89F0FEA6DD2}']
  end;

// *********************************************************************//
// DispIntf:  _ControlKeyPressEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {08718A37-1C72-3F52-87EA-C89F0FEA6DD2}
// *********************************************************************//
  _ControlKeyPressEventHandlerDisp = dispinterface
    ['{08718A37-1C72-3F52-87EA-C89F0FEA6DD2}']
  end;

// *********************************************************************//
// Interface: _ScrollEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AB2B171B-0765-3453-975D-05DDFAC1DACA}
// *********************************************************************//
  _ScrollEventHandler = interface(IDispatch)
    ['{AB2B171B-0765-3453-975D-05DDFAC1DACA}']
  end;

// *********************************************************************//
// DispIntf:  _ScrollEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AB2B171B-0765-3453-975D-05DDFAC1DACA}
// *********************************************************************//
  _ScrollEventHandlerDisp = dispinterface
    ['{AB2B171B-0765-3453-975D-05DDFAC1DACA}']
  end;

// *********************************************************************//
// Interface: _OnAllItemsLoadedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {09EA018A-8293-38A7-816E-0251F9E09C9B}
// *********************************************************************//
  _OnAllItemsLoadedEventHandler = interface(IDispatch)
    ['{09EA018A-8293-38A7-816E-0251F9E09C9B}']
  end;

// *********************************************************************//
// DispIntf:  _OnAllItemsLoadedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {09EA018A-8293-38A7-816E-0251F9E09C9B}
// *********************************************************************//
  _OnAllItemsLoadedEventHandlerDisp = dispinterface
    ['{09EA018A-8293-38A7-816E-0251F9E09C9B}']
  end;

// *********************************************************************//
// Interface: _ItemCheckedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {37E99E54-EBC0-3812-8B9C-9694F16FF3F3}
// *********************************************************************//
  _ItemCheckedEventHandler = interface(IDispatch)
    ['{37E99E54-EBC0-3812-8B9C-9694F16FF3F3}']
  end;

// *********************************************************************//
// DispIntf:  _ItemCheckedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {37E99E54-EBC0-3812-8B9C-9694F16FF3F3}
// *********************************************************************//
  _ItemCheckedEventHandlerDisp = dispinterface
    ['{37E99E54-EBC0-3812-8B9C-9694F16FF3F3}']
  end;

// *********************************************************************//
// Interface: _ItemClickedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5C0F85EB-00C8-33F4-8407-D77C223841B9}
// *********************************************************************//
  _ItemClickedEventHandler = interface(IDispatch)
    ['{5C0F85EB-00C8-33F4-8407-D77C223841B9}']
  end;

// *********************************************************************//
// DispIntf:  _ItemClickedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5C0F85EB-00C8-33F4-8407-D77C223841B9}
// *********************************************************************//
  _ItemClickedEventHandlerDisp = dispinterface
    ['{5C0F85EB-00C8-33F4-8407-D77C223841B9}']
  end;

// *********************************************************************//
// Interface: _ItemDoubleClickedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {057F64D9-47A8-35D3-874F-2832B1CEF33E}
// *********************************************************************//
  _ItemDoubleClickedEventHandler = interface(IDispatch)
    ['{057F64D9-47A8-35D3-874F-2832B1CEF33E}']
  end;

// *********************************************************************//
// DispIntf:  _ItemDoubleClickedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {057F64D9-47A8-35D3-874F-2832B1CEF33E}
// *********************************************************************//
  _ItemDoubleClickedEventHandlerDisp = dispinterface
    ['{057F64D9-47A8-35D3-874F-2832B1CEF33E}']
  end;

// *********************************************************************//
// Interface: _ItemSelectionChangedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2293891F-4728-36DE-ACB6-0B586EC3BCFF}
// *********************************************************************//
  _ItemSelectionChangedEventHandler = interface(IDispatch)
    ['{2293891F-4728-36DE-ACB6-0B586EC3BCFF}']
  end;

// *********************************************************************//
// DispIntf:  _ItemSelectionChangedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2293891F-4728-36DE-ACB6-0B586EC3BCFF}
// *********************************************************************//
  _ItemSelectionChangedEventHandlerDisp = dispinterface
    ['{2293891F-4728-36DE-ACB6-0B586EC3BCFF}']
  end;

// *********************************************************************//
// Interface: _ItemMovedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B7BBC124-8E57-3078-A2F4-691C5468C076}
// *********************************************************************//
  _ItemMovedEventHandler = interface(IDispatch)
    ['{B7BBC124-8E57-3078-A2F4-691C5468C076}']
  end;

// *********************************************************************//
// DispIntf:  _ItemMovedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B7BBC124-8E57-3078-A2F4-691C5468C076}
// *********************************************************************//
  _ItemMovedEventHandlerDisp = dispinterface
    ['{B7BBC124-8E57-3078-A2F4-691C5468C076}']
  end;

// *********************************************************************//
// Interface: _FileTypeNotSupportedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {164FD132-B662-3C32-8443-A7B8CAD07EB2}
// *********************************************************************//
  _FileTypeNotSupportedEventHandler = interface(IDispatch)
    ['{164FD132-B662-3C32-8443-A7B8CAD07EB2}']
  end;

// *********************************************************************//
// DispIntf:  _FileTypeNotSupportedEventHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {164FD132-B662-3C32-8443-A7B8CAD07EB2}
// *********************************************************************//
  _FileTypeNotSupportedEventHandlerDisp = dispinterface
    ['{164FD132-B662-3C32-8443-A7B8CAD07EB2}']
  end;

// *********************************************************************//
// Interface: _GdPictureEventsHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9BB0EB1C-DFE1-3939-85FE-856BEA15B1E4}
// *********************************************************************//
  _GdPictureEventsHandler = interface(IDispatch)
    ['{9BB0EB1C-DFE1-3939-85FE-856BEA15B1E4}']
  end;

// *********************************************************************//
// DispIntf:  _GdPictureEventsHandlerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9BB0EB1C-DFE1-3939-85FE-856BEA15B1E4}
// *********************************************************************//
  _GdPictureEventsHandlerDisp = dispinterface
    ['{9BB0EB1C-DFE1-3939-85FE-856BEA15B1E4}']
  end;

// *********************************************************************//
// Interface: _AfterSubstitutedFontArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3CC6BCC0-00F6-3263-8873-DE6E1AB45737}
// *********************************************************************//
  _AfterSubstitutedFontArgs = interface(IDispatch)
    ['{3CC6BCC0-00F6-3263-8873-DE6E1AB45737}']
  end;

// *********************************************************************//
// DispIntf:  _AfterSubstitutedFontArgsDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3CC6BCC0-00F6-3263-8873-DE6E1AB45737}
// *********************************************************************//
  _AfterSubstitutedFontArgsDisp = dispinterface
    ['{3CC6BCC0-00F6-3263-8873-DE6E1AB45737}']
  end;

// *********************************************************************//
// Interface: _BeforeAlternativeFontLookupArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D3875CE8-36F6-3C53-8790-00366D3EA1FB}
// *********************************************************************//
  _BeforeAlternativeFontLookupArgs = interface(IDispatch)
    ['{D3875CE8-36F6-3C53-8790-00366D3EA1FB}']
  end;

// *********************************************************************//
// DispIntf:  _BeforeAlternativeFontLookupArgsDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D3875CE8-36F6-3C53-8790-00366D3EA1FB}
// *********************************************************************//
  _BeforeAlternativeFontLookupArgsDisp = dispinterface
    ['{D3875CE8-36F6-3C53-8790-00366D3EA1FB}']
  end;

// *********************************************************************//
// Interface: _Annotation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AE3700AE-86F3-37A8-A2C8-8C0AA17E55E0}
// *********************************************************************//
  _Annotation = interface(IDispatch)
    ['{AE3700AE-86F3-37A8-A2C8-8C0AA17E55E0}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AE3700AE-86F3-37A8-A2C8-8C0AA17E55E0}
// *********************************************************************//
  _AnnotationDisp = dispinterface
    ['{AE3700AE-86F3-37A8-A2C8-8C0AA17E55E0}']
  end;

// *********************************************************************//
// Interface: _AnnotationComment
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AC305882-1ABA-3F2C-A65E-21C65724405D}
// *********************************************************************//
  _AnnotationComment = interface(IDispatch)
    ['{AC305882-1ABA-3F2C-A65E-21C65724405D}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationCommentDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AC305882-1ABA-3F2C-A65E-21C65724405D}
// *********************************************************************//
  _AnnotationCommentDisp = dispinterface
    ['{AC305882-1ABA-3F2C-A65E-21C65724405D}']
  end;

// *********************************************************************//
// Interface: _AnnotationConnectedLines
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {146A78C6-C6F0-3A13-A4E2-0F2DDF535EAC}
// *********************************************************************//
  _AnnotationConnectedLines = interface(IDispatch)
    ['{146A78C6-C6F0-3A13-A4E2-0F2DDF535EAC}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationConnectedLinesDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {146A78C6-C6F0-3A13-A4E2-0F2DDF535EAC}
// *********************************************************************//
  _AnnotationConnectedLinesDisp = dispinterface
    ['{146A78C6-C6F0-3A13-A4E2-0F2DDF535EAC}']
  end;

// *********************************************************************//
// Interface: _AnnotationPolygon
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {728DE4F5-1EC1-36CD-A66A-2A879E0CD577}
// *********************************************************************//
  _AnnotationPolygon = interface(IDispatch)
    ['{728DE4F5-1EC1-36CD-A66A-2A879E0CD577}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationPolygonDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {728DE4F5-1EC1-36CD-A66A-2A879E0CD577}
// *********************************************************************//
  _AnnotationPolygonDisp = dispinterface
    ['{728DE4F5-1EC1-36CD-A66A-2A879E0CD577}']
  end;

// *********************************************************************//
// Interface: _AnnotationCustom
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {65466D04-F72E-325C-9E42-7F7F939C773E}
// *********************************************************************//
  _AnnotationCustom = interface(IDispatch)
    ['{65466D04-F72E-325C-9E42-7F7F939C773E}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationCustomDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {65466D04-F72E-325C-9E42-7F7F939C773E}
// *********************************************************************//
  _AnnotationCustomDisp = dispinterface
    ['{65466D04-F72E-325C-9E42-7F7F939C773E}']
  end;

// *********************************************************************//
// Interface: _AnnotationEllipse
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DEF47EFF-BB69-3277-96AB-06F377382D3E}
// *********************************************************************//
  _AnnotationEllipse = interface(IDispatch)
    ['{DEF47EFF-BB69-3277-96AB-06F377382D3E}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationEllipseDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DEF47EFF-BB69-3277-96AB-06F377382D3E}
// *********************************************************************//
  _AnnotationEllipseDisp = dispinterface
    ['{DEF47EFF-BB69-3277-96AB-06F377382D3E}']
  end;

// *********************************************************************//
// Interface: _AnnotationEmbeddedImage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DAF696B5-9F99-3DC4-A568-B94A5AFC7420}
// *********************************************************************//
  _AnnotationEmbeddedImage = interface(IDispatch)
    ['{DAF696B5-9F99-3DC4-A568-B94A5AFC7420}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationEmbeddedImageDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DAF696B5-9F99-3DC4-A568-B94A5AFC7420}
// *********************************************************************//
  _AnnotationEmbeddedImageDisp = dispinterface
    ['{DAF696B5-9F99-3DC4-A568-B94A5AFC7420}']
  end;

// *********************************************************************//
// Interface: _AnnotationFreeHand
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {335694A2-64B4-35B6-A41D-73130ED24101}
// *********************************************************************//
  _AnnotationFreeHand = interface(IDispatch)
    ['{335694A2-64B4-35B6-A41D-73130ED24101}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationFreeHandDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {335694A2-64B4-35B6-A41D-73130ED24101}
// *********************************************************************//
  _AnnotationFreeHandDisp = dispinterface
    ['{335694A2-64B4-35B6-A41D-73130ED24101}']
  end;

// *********************************************************************//
// Interface: _AnnotationFreeHandHighlighter
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B52202F4-E4F2-35B9-A7B2-A6449259B6B3}
// *********************************************************************//
  _AnnotationFreeHandHighlighter = interface(IDispatch)
    ['{B52202F4-E4F2-35B9-A7B2-A6449259B6B3}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationFreeHandHighlighterDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B52202F4-E4F2-35B9-A7B2-A6449259B6B3}
// *********************************************************************//
  _AnnotationFreeHandHighlighterDisp = dispinterface
    ['{B52202F4-E4F2-35B9-A7B2-A6449259B6B3}']
  end;

// *********************************************************************//
// Interface: _AnnotationFreeHandPolygon
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {406440DC-FFCC-3E1B-AC9C-D35BD060E943}
// *********************************************************************//
  _AnnotationFreeHandPolygon = interface(IDispatch)
    ['{406440DC-FFCC-3E1B-AC9C-D35BD060E943}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationFreeHandPolygonDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {406440DC-FFCC-3E1B-AC9C-D35BD060E943}
// *********************************************************************//
  _AnnotationFreeHandPolygonDisp = dispinterface
    ['{406440DC-FFCC-3E1B-AC9C-D35BD060E943}']
  end;

// *********************************************************************//
// Interface: _AnnotationLine
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FC70B8EB-6829-3575-8A6C-F50F1F17132F}
// *********************************************************************//
  _AnnotationLine = interface(IDispatch)
    ['{FC70B8EB-6829-3575-8A6C-F50F1F17132F}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationLineDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FC70B8EB-6829-3575-8A6C-F50F1F17132F}
// *********************************************************************//
  _AnnotationLineDisp = dispinterface
    ['{FC70B8EB-6829-3575-8A6C-F50F1F17132F}']
  end;

// *********************************************************************//
// Interface: _AnnotationLineArrow
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9310DDA5-F90E-3131-8969-7DBD433D1754}
// *********************************************************************//
  _AnnotationLineArrow = interface(IDispatch)
    ['{9310DDA5-F90E-3131-8969-7DBD433D1754}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationLineArrowDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9310DDA5-F90E-3131-8969-7DBD433D1754}
// *********************************************************************//
  _AnnotationLineArrowDisp = dispinterface
    ['{9310DDA5-F90E-3131-8969-7DBD433D1754}']
  end;

// *********************************************************************//
// Interface: _AnnotationLink
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {37CCC269-E4B0-3E34-B03A-98598FD986DD}
// *********************************************************************//
  _AnnotationLink = interface(IDispatch)
    ['{37CCC269-E4B0-3E34-B03A-98598FD986DD}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationLinkDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {37CCC269-E4B0-3E34-B03A-98598FD986DD}
// *********************************************************************//
  _AnnotationLinkDisp = dispinterface
    ['{37CCC269-E4B0-3E34-B03A-98598FD986DD}']
  end;

// *********************************************************************//
// Interface: _AnnotationRubberStamp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {886A40F5-7B25-3959-A8F1-1861AE1B9AD5}
// *********************************************************************//
  _AnnotationRubberStamp = interface(IDispatch)
    ['{886A40F5-7B25-3959-A8F1-1861AE1B9AD5}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationRubberStampDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {886A40F5-7B25-3959-A8F1-1861AE1B9AD5}
// *********************************************************************//
  _AnnotationRubberStampDisp = dispinterface
    ['{886A40F5-7B25-3959-A8F1-1861AE1B9AD5}']
  end;

// *********************************************************************//
// Interface: _AnnotationPolyRuler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8A423192-ADF5-313F-A768-6FCD2AA5192D}
// *********************************************************************//
  _AnnotationPolyRuler = interface(IDispatch)
    ['{8A423192-ADF5-313F-A768-6FCD2AA5192D}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationPolyRulerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8A423192-ADF5-313F-A768-6FCD2AA5192D}
// *********************************************************************//
  _AnnotationPolyRulerDisp = dispinterface
    ['{8A423192-ADF5-313F-A768-6FCD2AA5192D}']
  end;

// *********************************************************************//
// Interface: _AnnotationRectangle
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B75BCD7E-0F65-37A7-A2B7-7471DD8B3B09}
// *********************************************************************//
  _AnnotationRectangle = interface(IDispatch)
    ['{B75BCD7E-0F65-37A7-A2B7-7471DD8B3B09}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationRectangleDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B75BCD7E-0F65-37A7-A2B7-7471DD8B3B09}
// *********************************************************************//
  _AnnotationRectangleDisp = dispinterface
    ['{B75BCD7E-0F65-37A7-A2B7-7471DD8B3B09}']
  end;

// *********************************************************************//
// Interface: _AnnotationRectangleHighlighter
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E8C2F816-B4B2-311D-BAA8-EF842F78E378}
// *********************************************************************//
  _AnnotationRectangleHighlighter = interface(IDispatch)
    ['{E8C2F816-B4B2-311D-BAA8-EF842F78E378}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationRectangleHighlighterDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E8C2F816-B4B2-311D-BAA8-EF842F78E378}
// *********************************************************************//
  _AnnotationRectangleHighlighterDisp = dispinterface
    ['{E8C2F816-B4B2-311D-BAA8-EF842F78E378}']
  end;

// *********************************************************************//
// Interface: _AnnotationRedaction
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {56169002-DDE6-3E69-B5A6-F822875A8F98}
// *********************************************************************//
  _AnnotationRedaction = interface(IDispatch)
    ['{56169002-DDE6-3E69-B5A6-F822875A8F98}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationRedactionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {56169002-DDE6-3E69-B5A6-F822875A8F98}
// *********************************************************************//
  _AnnotationRedactionDisp = dispinterface
    ['{56169002-DDE6-3E69-B5A6-F822875A8F98}']
  end;

// *********************************************************************//
// Interface: _AnnotationRuler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F4F8F66C-8F08-33CE-AEF2-AC3B0E8B9EFD}
// *********************************************************************//
  _AnnotationRuler = interface(IDispatch)
    ['{F4F8F66C-8F08-33CE-AEF2-AC3B0E8B9EFD}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationRulerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F4F8F66C-8F08-33CE-AEF2-AC3B0E8B9EFD}
// *********************************************************************//
  _AnnotationRulerDisp = dispinterface
    ['{F4F8F66C-8F08-33CE-AEF2-AC3B0E8B9EFD}']
  end;

// *********************************************************************//
// Interface: _AnnotationStickyNote
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {21934FDF-3C12-386C-AF83-930445E4BF5B}
// *********************************************************************//
  _AnnotationStickyNote = interface(IDispatch)
    ['{21934FDF-3C12-386C-AF83-930445E4BF5B}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationStickyNoteDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {21934FDF-3C12-386C-AF83-930445E4BF5B}
// *********************************************************************//
  _AnnotationStickyNoteDisp = dispinterface
    ['{21934FDF-3C12-386C-AF83-930445E4BF5B}']
  end;

// *********************************************************************//
// Interface: _AnnotationText
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {732F9719-9EA7-3026-A19D-D320EDAC3088}
// *********************************************************************//
  _AnnotationText = interface(IDispatch)
    ['{732F9719-9EA7-3026-A19D-D320EDAC3088}']
  end;

// *********************************************************************//
// DispIntf:  _AnnotationTextDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {732F9719-9EA7-3026-A19D-D320EDAC3088}
// *********************************************************************//
  _AnnotationTextDisp = dispinterface
    ['{732F9719-9EA7-3026-A19D-D320EDAC3088}']
  end;

// *********************************************************************//
// Interface: _GdPictureRectangle
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B6910CD2-DD1E-3C78-BE53-5F96E5EF96BC}
// *********************************************************************//
  _GdPictureRectangle = interface(IDispatch)
    ['{B6910CD2-DD1E-3C78-BE53-5F96E5EF96BC}']
  end;

// *********************************************************************//
// DispIntf:  _GdPictureRectangleDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B6910CD2-DD1E-3C78-BE53-5F96E5EF96BC}
// *********************************************************************//
  _GdPictureRectangleDisp = dispinterface
    ['{B6910CD2-DD1E-3C78-BE53-5F96E5EF96BC}']
  end;

// *********************************************************************//
// Interface: _GdPictureRectangleF
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AC50C196-9EF9-3BFB-8E62-BC5CE6779E4C}
// *********************************************************************//
  _GdPictureRectangleF = interface(IDispatch)
    ['{AC50C196-9EF9-3BFB-8E62-BC5CE6779E4C}']
  end;

// *********************************************************************//
// DispIntf:  _GdPictureRectangleFDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AC50C196-9EF9-3BFB-8E62-BC5CE6779E4C}
// *********************************************************************//
  _GdPictureRectangleFDisp = dispinterface
    ['{AC50C196-9EF9-3BFB-8E62-BC5CE6779E4C}']
  end;

// *********************************************************************//
// Interface: _OnDisposeEventHandler_2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F279E381-71DB-39C4-9419-EF92C8FC045D}
// *********************************************************************//
  _OnDisposeEventHandler_2 = interface(IDispatch)
    ['{F279E381-71DB-39C4-9419-EF92C8FC045D}']
  end;

// *********************************************************************//
// DispIntf:  _OnDisposeEventHandler_2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F279E381-71DB-39C4-9419-EF92C8FC045D}
// *********************************************************************//
  _OnDisposeEventHandler_2Disp = dispinterface
    ['{F279E381-71DB-39C4-9419-EF92C8FC045D}']
  end;

// *********************************************************************//
// Interface: _OnDisposeEventHandler_3
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C47EDD9-60A8-3CE6-B254-40B8B31C854F}
// *********************************************************************//
  _OnDisposeEventHandler_3 = interface(IDispatch)
    ['{0C47EDD9-60A8-3CE6-B254-40B8B31C854F}']
  end;

// *********************************************************************//
// DispIntf:  _OnDisposeEventHandler_3Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C47EDD9-60A8-3CE6-B254-40B8B31C854F}
// *********************************************************************//
  _OnDisposeEventHandler_3Disp = dispinterface
    ['{0C47EDD9-60A8-3CE6-B254-40B8B31C854F}']
  end;

// *********************************************************************//
// Interface: _SavingProgressEventHandler_2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A218AB2E-2BD6-3184-B092-CFC3BB53E29B}
// *********************************************************************//
  _SavingProgressEventHandler_2 = interface(IDispatch)
    ['{A218AB2E-2BD6-3184-B092-CFC3BB53E29B}']
  end;

// *********************************************************************//
// DispIntf:  _SavingProgressEventHandler_2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A218AB2E-2BD6-3184-B092-CFC3BB53E29B}
// *********************************************************************//
  _SavingProgressEventHandler_2Disp = dispinterface
    ['{A218AB2E-2BD6-3184-B092-CFC3BB53E29B}']
  end;

// *********************************************************************//
// Interface: _OnDisposeEventHandler_4
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {955D2F05-B07B-3AAF-A439-FA145616FCCF}
// *********************************************************************//
  _OnDisposeEventHandler_4 = interface(IDispatch)
    ['{955D2F05-B07B-3AAF-A439-FA145616FCCF}']
  end;

// *********************************************************************//
// DispIntf:  _OnDisposeEventHandler_4Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {955D2F05-B07B-3AAF-A439-FA145616FCCF}
// *********************************************************************//
  _OnDisposeEventHandler_4Disp = dispinterface
    ['{955D2F05-B07B-3AAF-A439-FA145616FCCF}']
  end;

// *********************************************************************//
// The Class CoGdPictureDocumentConverter provides a Create and CreateRemote method to          
// create instances of the default interface IGdPictureDocumentConverter exposed by              
// the CoClass GdPictureDocumentConverter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGdPictureDocumentConverter = class
    class function Create: IGdPictureDocumentConverter;
    class function CreateRemote(const MachineName: string): IGdPictureDocumentConverter;
  end;

// *********************************************************************//
// The Class CoGdPictureDocumentUtilities provides a Create and CreateRemote method to          
// create instances of the default interface IGdPictureDocumentUtilities exposed by              
// the CoClass GdPictureDocumentUtilities. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGdPictureDocumentUtilities = class
    class function Create: IGdPictureDocumentUtilities;
    class function CreateRemote(const MachineName: string): IGdPictureDocumentUtilities;
  end;

// *********************************************************************//
// The Class CoGdPictureImaging provides a Create and CreateRemote method to          
// create instances of the default interface IGdPictureImaging exposed by              
// the CoClass GdPictureImaging. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGdPictureImaging = class
    class function Create: IGdPictureImaging;
    class function CreateRemote(const MachineName: string): IGdPictureImaging;
  end;

// *********************************************************************//
// The Class CoGdPictureOCR provides a Create and CreateRemote method to          
// create instances of the default interface IGdPictureOCR exposed by              
// the CoClass GdPictureOCR. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGdPictureOCR = class
    class function Create: IGdPictureOCR;
    class function CreateRemote(const MachineName: string): IGdPictureOCR;
  end;

// *********************************************************************//
// The Class CoSpreadsheetOptions provides a Create and CreateRemote method to          
// create instances of the default interface ISpreadsheetOptions exposed by              
// the CoClass SpreadsheetOptions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSpreadsheetOptions = class
    class function Create: ISpreadsheetOptions;
    class function CreateRemote(const MachineName: string): ISpreadsheetOptions;
  end;

// *********************************************************************//
// The Class CoPdfOcrOptions provides a Create and CreateRemote method to          
// create instances of the default interface IPdfOcrOptions exposed by              
// the CoClass PdfOcrOptions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPdfOcrOptions = class
    class function Create: IPdfOcrOptions;
    class function CreateRemote(const MachineName: string): IPdfOcrOptions;
  end;

// *********************************************************************//
// The Class CoSmartRedactionOptions provides a Create and CreateRemote method to          
// create instances of the default interface ISmartRedactionOptions exposed by              
// the CoClass SmartRedactionOptions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSmartRedactionOptions = class
    class function Create: ISmartRedactionOptions;
    class function CreateRemote(const MachineName: string): ISmartRedactionOptions;
  end;

// *********************************************************************//
// The Class CoGdPicturePDFReducer provides a Create and CreateRemote method to          
// create instances of the default interface IGdPicturePDFReducer exposed by              
// the CoClass GdPicturePDFReducer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGdPicturePDFReducer = class
    class function Create: IGdPicturePDFReducer;
    class function CreateRemote(const MachineName: string): IGdPicturePDFReducer;
  end;

// *********************************************************************//
// The Class CoGdPictureSegmenter provides a Create and CreateRemote method to          
// create instances of the default interface IGdPictureSegmenter exposed by              
// the CoClass GdPictureSegmenter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGdPictureSegmenter = class
    class function Create: IGdPictureSegmenter;
    class function CreateRemote(const MachineName: string): IGdPictureSegmenter;
  end;

// *********************************************************************//
// The Class CoLicenseManager provides a Create and CreateRemote method to          
// create instances of the default interface ILicenseManager exposed by              
// the CoClass LicenseManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLicenseManager = class
    class function Create: ILicenseManager;
    class function CreateRemote(const MachineName: string): ILicenseManager;
  end;

// *********************************************************************//
// The Class CoPDFReducerConfiguration provides a Create and CreateRemote method to          
// create instances of the default interface IPDFReducerConfiguration exposed by              
// the CoClass PDFReducerConfiguration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPDFReducerConfiguration = class
    class function Create: IPDFReducerConfiguration;
    class function CreateRemote(const MachineName: string): IPDFReducerConfiguration;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAnnotationEditor
// Help String      : 
// Default Interface: IAnnotationEditor
// Def. Intf. DISP? : No
// Event   Interface: __AnnotationEditor
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TAnnotationEditorPropertyChanged = procedure(ASender: TObject; const PropertyName: WideString; 
                                                                 const Reserved1: WideString; 
                                                                 const Reserved2: WideString; 
                                                                 const Reserved3: WideString) of object;

  TAnnotationEditor = class(TOleControl)
  private
    FOnPropertyChanged: TAnnotationEditorPropertyChanged;
    FOnDispose: TNotifyEvent;
    FIntf: IAnnotationEditor;
    function  GetControlInterface: IAnnotationEditor;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    procedure Dispose;
    procedure InitFromAnnotationManager(const AnnotationManager: IAnnotationManager);
    procedure LoadFromGdViewer(GdViewer: OleVariant);
    procedure Refresh;
    procedure ReleaseEventsTarget;
    property  ControlInterface: IAnnotationEditor read GetControlInterface;
    property  DefaultInterface: IAnnotationEditor read GetControlInterface;
  published
    property Anchors;
    property BackColor: Integer index 1 read GetIntegerProp write SetIntegerProp stored False;
    property OnPropertyChanged: TAnnotationEditorPropertyChanged read FOnPropertyChanged write FOnPropertyChanged;
    property OnDispose: TNotifyEvent read FOnDispose write FOnDispose;
  end;

// *********************************************************************//
// The Class CoGdPicturePDF provides a Create and CreateRemote method to          
// create instances of the default interface IGdPicturePDF exposed by              
// the CoClass GdPicturePDF. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGdPicturePDF = class
    class function Create: IGdPicturePDF;
    class function CreateRemote(const MachineName: string): IGdPicturePDF;
  end;

// *********************************************************************//
// The Class CoAnnotationManager provides a Create and CreateRemote method to          
// create instances of the default interface IAnnotationManager exposed by              
// the CoClass AnnotationManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationManager = class
    class function Create: IAnnotationManager;
    class function CreateRemote(const MachineName: string): IAnnotationManager;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TBookmarksTree
// Help String      : 
// Default Interface: IBookmarksTree
// Def. Intf. DISP? : No
// Event   Interface: __BookmarksTree
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TBookmarksTreeNodeSelected = procedure(ASender: TObject; const NodeText: WideString; 
                                                           PDFBookmarkID: Integer; 
                                                           var CancelAction: WordBool) of object;

  TBookmarksTree = class(TOleControl)
  private
    FOnNodeSelected: TBookmarksTreeNodeSelected;
    FOnDispose: TNotifyEvent;
    FIntf: IBookmarksTree;
    function  GetControlInterface: IBookmarksTree;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_GdViewer: IGdViewer;
    procedure _Set_GdViewer(const pRetVal: IGdViewer);
  public
    procedure CollapseAll;
    procedure Dispose;
    procedure ExpandAll;
    procedure LoadFromGdViewer(GdViewer: OleVariant);
    procedure Refresh;
    procedure ReloadBookmarks;
    procedure SetDefaultText(StringID: Integer; const Text: WideString);
    function SetNodesBitmap(ImageID: Integer): GdPictureStatus;
    procedure ReleaseEventsTarget;
    property  ControlInterface: IBookmarksTree read GetControlInterface;
    property  DefaultInterface: IBookmarksTree read GetControlInterface;
    property GdViewer: IGdViewer read Get_GdViewer write _Set_GdViewer;
  published
    property Anchors;
    property ItemHeight: Integer index 2 read GetIntegerProp write SetIntegerProp stored False;
    property FontSize: Single index 3 read GetSingleProp write SetSingleProp stored False;
    property DisableZoomDestination: WordBool index 4 read GetWordBoolProp write SetWordBoolProp stored False;
    property FontName: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property BackColor: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property AutoGenerate: WordBool index 16 read GetWordBoolProp write SetWordBoolProp stored False;
    property RightToLeftLayout: WordBool index 17 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnNodeSelected: TBookmarksTreeNodeSelected read FOnNodeSelected write FOnNodeSelected;
    property OnDispose: TNotifyEvent read FOnDispose write FOnDispose;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TThumbnailEx
// Help String      : 
// Default Interface: IThumbnailEx
// Def. Intf. DISP? : No
// Event   Interface: __ThumbnailEx
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TThumbnailExControlMouseUp = procedure(ASender: TObject; Button: MouseButton; X: Integer; 
                                                           Y: Integer) of object;
  TThumbnailExControlMouseDown = procedure(ASender: TObject; Button: MouseButton; X: Integer; 
                                                             Y: Integer) of object;
  TThumbnailExControlMouseMove = procedure(ASender: TObject; X: Integer; Y: Integer) of object;
  TThumbnailExControlKeyUp = procedure(ASender: TObject; KeyValue: Integer; Control: WordBool; 
                                                         Shift: WordBool; Alt: WordBool) of object;
  TThumbnailExControlKeyDown = procedure(ASender: TObject; KeyValue: Integer; Control: WordBool; 
                                                           Shift: WordBool; Alt: WordBool) of object;
  TThumbnailExControlKeyPress = procedure(ASender: TObject; KeyValue: Integer) of object;
  TThumbnailExScroll = procedure(ASender: TObject; Min: Integer; Max: Integer; Page: Integer; 
                                                   Pos: Integer; TrackPos: Integer) of object;
  TThumbnailExItemChecked = procedure(ASender: TObject; Idx: Integer; Checked: WordBool) of object;
  TThumbnailExItemClicked = procedure(ASender: TObject; Idx: Integer; Button: MouseButton) of object;
  TThumbnailExItemDoubleClicked = procedure(ASender: TObject; Idx: Integer) of object;
  TThumbnailExItemSelectionChanged = procedure(ASender: TObject; Idx: Integer; Selected: WordBool) of object;
  TThumbnailExItemMoved = procedure(ASender: TObject; srcIdx: Integer; DstIdx: Integer) of object;
  TThumbnailExFileTypeNotSupported = procedure(ASender: TObject; const FilePath: WideString; 
                                                                 var CustomBitmapID: Integer; 
                                                                 var ReleaseBitmap: WordBool) of object;

  TThumbnailEx = class(TOleControl)
  private
    FOnControlDoubleClick: TNotifyEvent;
    FOnControlMouseWheel: TNotifyEvent;
    FOnControlClick: TNotifyEvent;
    FOnControlMouseUp: TThumbnailExControlMouseUp;
    FOnControlMouseDown: TThumbnailExControlMouseDown;
    FOnControlMouseMove: TThumbnailExControlMouseMove;
    FOnControlKeyUp: TThumbnailExControlKeyUp;
    FOnControlKeyDown: TThumbnailExControlKeyDown;
    FOnControlKeyPress: TThumbnailExControlKeyPress;
    FOnScroll: TThumbnailExScroll;
    FOnAllItemsLoaded: TNotifyEvent;
    FOnItemChecked: TThumbnailExItemChecked;
    FOnItemClicked: TThumbnailExItemClicked;
    FOnItemDoubleClicked: TThumbnailExItemDoubleClicked;
    FOnItemSelectionChanged: TThumbnailExItemSelectionChanged;
    FOnItemMoved: TThumbnailExItemMoved;
    FOnFileTypeNotSupported: TThumbnailExFileTypeNotSupported;
    FOnDispose: TNotifyEvent;
    FIntf: IThumbnailEx;
    function  GetControlInterface: IThumbnailEx;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function AddItemFromFile(const FilePath: WideString): GdPictureStatus;
    function AddItemFromGdPictureImage(ImageID: Integer): GdPictureStatus;
    function AddItemFromGdPictureImage_2(ImageID: Integer; const Text: WideString): GdPictureStatus;
    function ARGBI(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer;
    procedure ClearAllItems;
    procedure Dispose;
    procedure EnsureVisibleItem(ItemIdx: Integer);
    function FindNearestItem(Direction: SearchDirectionHint; X: Integer; Y: Integer): Integer;
    function GetItemAt(X: Integer; Y: Integer): Integer;
    function GetItemBitmap(ItemIdx: Integer): Integer;
    function GetItemCheckState(ItemIdx: Integer): WordBool;
    function GetItemFileSource(ItemIdx: Integer): WideString;
    function GetItemFocusState(ItemIdx: Integer): WordBool;
    function GetItemSelectState(ItemIdx: Integer): WordBool;
    function GetItemTag(ItemIdx: Integer): OleVariant;
    function GetItemText(ItemIdx: Integer): WideString;
    function InsertItemFromFile(const FilePath: WideString; Position: Integer): GdPictureStatus;
    function InsertItemFromGdPictureImage(ImageID: Integer; const Text: WideString; 
                                          Position: Integer): GdPictureStatus;
    function LoadFromDirectory(const Path: WideString; IncludeSubFolders: WordBool): GdPictureStatus;
    function LoadFromDirectory_2(const Path: WideString; IncludeSubFolders: WordBool; 
                                 const SearchPattern: WideString): GdPictureStatus;
    function LoadFromDirectory_3(const Path: WideString; IncludeSubFolders: WordBool; 
                                 const SearchPatterns: WideString): GdPictureStatus;
    function LoadFromFiles(var Files: PSafeArray): GdPictureStatus;
    function LoadFromGdPictureImage(ImageID: Integer): GdPictureStatus;
    function LoadFromGdPicturePDF(const PDF: IGdPicturePDF): GdPictureStatus;
    function LoadFromGdViewer(GdViewer: OleVariant): GdPictureStatus;
    procedure LoadNewThumbnails;
    procedure MoveItem(ItemIdx: Integer; DstIdx: Integer);
    procedure RedrawItem(ItemIdx: Integer);
    procedure Refresh;
    function ReleaseGdPictureImage(ImageID: Integer): GdPictureStatus;
    procedure ReloadThumbnails;
    procedure RemoveItem(ItemIdx: Integer);
    function SelectItem(ItemIdx: Integer): GdPictureStatus;
    function SetItemBackgroundColor(ItemIdx: Integer; Color: Integer): GdPictureStatus;
    function SetItemBitmap(ItemIdx: Integer; ImageID: Integer): GdPictureStatus;
    function SetItemCheckState(ItemIdx: Integer; Checked: WordBool): GdPictureStatus;
    function SetItemSelectState(ItemIdx: Integer; Selected: WordBool): GdPictureStatus;
    function SetItemsFont(const FontName: WideString; FontSize: Single; FontStyle: FontStyle): GdPictureStatus;
    procedure SetItemsSize(Width: Integer; Height: Integer);
    procedure SetItemsSpacing(Horizontal: Integer; Vertical: Integer);
    function SetItemTag(ItemIdx: Integer; Tag: OleVariant): GdPictureStatus;
    function SetItemText(ItemIdx: Integer; const Text: WideString): GdPictureStatus;
    procedure SwapItemsBitmap(Item1Idx: Integer; Item2Idx: Integer);
    procedure SwapItemsBitmap_2(Item1Idx: Integer; Item2Idx: Integer; SwapText: WordBool);
    procedure ReleaseEventsTarget;
    function SetItemToolTipText(ItemIdx: Integer; const ToolTipText: WideString): GdPictureStatus;
    function LoadAllItems: GdPictureStatus;
    function UnselectAllItems: GdPictureStatus;
    property  ControlInterface: IThumbnailEx read GetControlInterface;
    property  DefaultInterface: IThumbnailEx read GetControlInterface;
    property AllItemsLoaded: WordBool index 9 read GetWordBoolProp;
    property ItemCount: Integer index 16 read GetIntegerProp;
  published
    property Anchors;
    property HotTracking: WordBool index 1 read GetWordBoolProp write SetWordBoolProp stored False;
    property DefaultItemTextPrefix: WideString index 3 read GetWideStringProp write SetWideStringProp stored False;
    property PdfIncreaseTextContrast: WordBool index 4 read GetWordBoolProp write SetWordBoolProp stored False;
    property RotateExif: WordBool index 5 read GetWordBoolProp write SetWordBoolProp stored False;
    property OwnDrop: WordBool index 6 read GetWordBoolProp write SetWordBoolProp stored False;
    property PauseThumbsLoading: WordBool index 7 read GetWordBoolProp write SetWordBoolProp stored False;
    property PreloadAllItems: WordBool index 8 read GetWordBoolProp write SetWordBoolProp stored False;
    property ThumbnailBackColor: Integer index 10 read GetIntegerProp write SetIntegerProp stored False;
    property SelectedThumbnailBackColor: Integer index 11 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalTextAlignment: TOleEnum index 12 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalTextAlignment: TOleEnum index 13 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property ThumbnailBorder: WordBool index 14 read GetWordBoolProp write SetWordBoolProp stored False;
    property ThumbnailAlignment: TOleEnum index 15 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property CheckBoxes: WordBool index 17 read GetWordBoolProp write SetWordBoolProp stored False;
    property CheckBoxesMarginLeft: Integer index 18 read GetIntegerProp write SetIntegerProp stored False;
    property CheckBoxesMarginTop: Integer index 19 read GetIntegerProp write SetIntegerProp stored False;
    property TextMarginLeft: Integer index 20 read GetIntegerProp write SetIntegerProp stored False;
    property TextMarginTop: Integer index 21 read GetIntegerProp write SetIntegerProp stored False;
    property Multiselect: WordBool index 22 read GetWordBoolProp write SetWordBoolProp stored False;
    property AllowMoveItems: WordBool index 23 read GetWordBoolProp write SetWordBoolProp stored False;
    property AllowDropFiles: WordBool index 24 read GetWordBoolProp write SetWordBoolProp stored False;
    property LockGdViewerEvents: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property BackColor: Integer index 26 read GetIntegerProp write SetIntegerProp stored False;
    property ShowText: WordBool index 27 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayAnnotations: WordBool index 28 read GetWordBoolProp write SetWordBoolProp stored False;
    property EnableDropShadow: WordBool index 78 read GetWordBoolProp write SetWordBoolProp stored False;
    property DefaultItemCheckState: WordBool index 77 read GetWordBoolProp write SetWordBoolProp stored False;
    property SelectedThumbnailBackColorAlpha: Integer index 79 read GetIntegerProp write SetIntegerProp stored False;
    property OnControlDoubleClick: TNotifyEvent read FOnControlDoubleClick write FOnControlDoubleClick;
    property OnControlMouseWheel: TNotifyEvent read FOnControlMouseWheel write FOnControlMouseWheel;
    property OnControlClick: TNotifyEvent read FOnControlClick write FOnControlClick;
    property OnControlMouseUp: TThumbnailExControlMouseUp read FOnControlMouseUp write FOnControlMouseUp;
    property OnControlMouseDown: TThumbnailExControlMouseDown read FOnControlMouseDown write FOnControlMouseDown;
    property OnControlMouseMove: TThumbnailExControlMouseMove read FOnControlMouseMove write FOnControlMouseMove;
    property OnControlKeyUp: TThumbnailExControlKeyUp read FOnControlKeyUp write FOnControlKeyUp;
    property OnControlKeyDown: TThumbnailExControlKeyDown read FOnControlKeyDown write FOnControlKeyDown;
    property OnControlKeyPress: TThumbnailExControlKeyPress read FOnControlKeyPress write FOnControlKeyPress;
    property OnScroll: TThumbnailExScroll read FOnScroll write FOnScroll;
    property OnAllItemsLoaded: TNotifyEvent read FOnAllItemsLoaded write FOnAllItemsLoaded;
    property OnItemChecked: TThumbnailExItemChecked read FOnItemChecked write FOnItemChecked;
    property OnItemClicked: TThumbnailExItemClicked read FOnItemClicked write FOnItemClicked;
    property OnItemDoubleClicked: TThumbnailExItemDoubleClicked read FOnItemDoubleClicked write FOnItemDoubleClicked;
    property OnItemSelectionChanged: TThumbnailExItemSelectionChanged read FOnItemSelectionChanged write FOnItemSelectionChanged;
    property OnItemMoved: TThumbnailExItemMoved read FOnItemMoved write FOnItemMoved;
    property OnFileTypeNotSupported: TThumbnailExFileTypeNotSupported read FOnFileTypeNotSupported write FOnFileTypeNotSupported;
    property OnDispose: TNotifyEvent read FOnDispose write FOnDispose;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TGdViewer
// Help String      : 
// Default Interface: IGdViewer
// Def. Intf. DISP? : No
// Event   Interface: __GdViewer
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TGdViewerPdfUriNavigation = procedure(ASender: TObject; var Uri: WideString; var cancel: WordBool) of object;
  TGdViewerBeforeAnnotationAddedByUser = procedure(ASender: TObject; AnnotationIdx: Integer) of object;
  TGdViewerAnnotationAddedByUser = procedure(ASender: TObject; AnnotationIdx: Integer) of object;
  TGdViewerAnnotationRotated = procedure(ASender: TObject; AnnotationIdx: Integer) of object;
  TGdViewerAnnotationMoved = procedure(ASender: TObject; AnnotationIdx: Integer) of object;
  TGdViewerPdfCertificateRequest = procedure(ASender: TObject; var CertPath: WideString; 
                                                               var Password: WideString) of object;
  TGdViewerPdfPasswordRequest = procedure(ASender: TObject; var Password: WideString) of object;
  TGdViewerPdfFileNavigation = procedure(ASender: TObject; var FilePath: WideString; 
                                                           var cancel: WordBool) of object;
  TGdViewerPdfLaunchAction = procedure(ASender: TObject; ActionType: PdfActionLaunchOperation; 
                                                         var FilePath: WideString; 
                                                         var cancel: WordBool) of object;
  TGdViewerAnnotationClicked = procedure(ASender: TObject; AnnotationIdx: Integer) of object;
  TGdViewerAnnotationResized = procedure(ASender: TObject; AnnotationIdx: Integer) of object;
  TGdViewerAnnotationSelected = procedure(ASender: TObject; AnnotationIdx: Integer) of object;
  TGdViewerViewerKeyDown = procedure(ASender: TObject; KeyValue: Integer; Control: WordBool; 
                                                       Shift: WordBool; Alt: WordBool) of object;
  TGdViewerAnnotationStartEditingText = procedure(ASender: TObject; AnnotationIdx: Integer) of object;
  TGdViewerSavingProgress = procedure(ASender: TObject; PageNo: Integer; PageCount: Integer) of object;
  TGdViewerDropFile = procedure(ASender: TObject; const FilePath: WideString) of object;
  TGdViewerViewerKeyPress = procedure(ASender: TObject; KeyValue: Integer) of object;
  TGdViewerViewerKeyUp = procedure(ASender: TObject; KeyValue: Integer; Control: WordBool; 
                                                     Shift: WordBool; Alt: WordBool) of object;
  TGdViewerViewerMouseUp = procedure(ASender: TObject; Button: MouseButton; MouseX: Integer; 
                                                       MouseY: Integer) of object;
  TGdViewerViewerMouseDown = procedure(ASender: TObject; Button: MouseButton; MouseX: Integer; 
                                                         MouseY: Integer) of object;
  TGdViewerViewerMouseMove = procedure(ASender: TObject; MouseX: Integer; MouseY: Integer) of object;
  TGdViewerBeforePrintPage = procedure(ASender: TObject; Page: Integer; PageLeft: Integer; 
                                                         var cancel: WordBool) of object;
  TGdViewerAnnotationEndEditingText = procedure(ASender: TObject; AnnotationIdx: Integer) of object;
  TGdViewerAfterPrintPage = procedure(ASender: TObject; Page: Integer; PageLeft: Integer; 
                                                        var cancel: WordBool) of object;
  TGdViewerBeforeRotation = procedure(ASender: TObject; Rotation: RotateFlipType) of object;
  TGdViewerRotation = procedure(ASender: TObject; Rotation: RotateFlipType) of object;
  TGdViewerRegionSelectedByUser = procedure(ASender: TObject; RegionID: Integer) of object;
  TGdViewerRegionResizedByUser = procedure(ASender: TObject; RegionID: Integer) of object;
  TGdViewerRegionEditedByUser = procedure(ASender: TObject; RegionID: Integer) of object;
  TGdViewerTransferEnded = procedure(ASender: TObject; status: GdPictureStatus; Download: WordBool) of object;
  TGdViewerDataReceived = procedure(ASender: TObject; PercentProgress: Single; SizeLeft: Integer; 
                                                      TotalLength: Integer) of object;
  TGdViewerClickMenu = procedure(ASender: TObject; MenuItem: Integer) of object;
  TGdViewerRegionMovedByUser = procedure(ASender: TObject; RegionID: Integer) of object;
  TGdViewerAnnotationTextBoxKeyDown = procedure(ASender: TObject; KeyValue: Integer; 
                                                                  Control: WordBool; 
                                                                  Shift: WordBool; Alt: WordBool) of object;

  TGdViewer = class(TOleControl)
  private
    FOnPdfUriNavigation: TGdViewerPdfUriNavigation;
    FOnBeforeAnnotationAddedByUser: TGdViewerBeforeAnnotationAddedByUser;
    FOnAnnotationAddedByUser: TGdViewerAnnotationAddedByUser;
    FOnAnnotationRotated: TGdViewerAnnotationRotated;
    FOnAnnotationMoved: TGdViewerAnnotationMoved;
    FOnPdfCertificateRequest: TGdViewerPdfCertificateRequest;
    FOnPdfPasswordRequest: TGdViewerPdfPasswordRequest;
    FOnPdfFileNavigation: TGdViewerPdfFileNavigation;
    FOnPdfLaunchAction: TGdViewerPdfLaunchAction;
    FOnAnnotationClicked: TGdViewerAnnotationClicked;
    FOnAnnotationResized: TGdViewerAnnotationResized;
    FOnAnnotationSelected: TGdViewerAnnotationSelected;
    FOnViewerKeyDown: TGdViewerViewerKeyDown;
    FOnAnnotationStartEditingText: TGdViewerAnnotationStartEditingText;
    FOnSavingProgress: TGdViewerSavingProgress;
    FOnDropFile: TGdViewerDropFile;
    FOnViewerKeyPress: TGdViewerViewerKeyPress;
    FOnViewerKeyUp: TGdViewerViewerKeyUp;
    FOnViewerMouseUp: TGdViewerViewerMouseUp;
    FOnViewerMouseDown: TGdViewerViewerMouseDown;
    FOnViewerMouseMove: TGdViewerViewerMouseMove;
    FOnViewerClick: TNotifyEvent;
    FOnViewerMouseWheel: TNotifyEvent;
    FOnViewerDoubleClick: TNotifyEvent;
    FOnBeforePrintPage: TGdViewerBeforePrintPage;
    FOnAnnotationEndEditingText: TGdViewerAnnotationEndEditingText;
    FOnAfterPrintPage: TGdViewerAfterPrintPage;
    FOnScrollViewer: TNotifyEvent;
    FOnRectEditedByUser: TNotifyEvent;
    FOnAfterZoomChange: TNotifyEvent;
    FOnBeforeZoomChange: TNotifyEvent;
    FOnBeforeRotation: TGdViewerBeforeRotation;
    FOnRotation: TGdViewerRotation;
    FOnRegionSelectedByUser: TGdViewerRegionSelectedByUser;
    FOnRegionResizedByUser: TGdViewerRegionResizedByUser;
    FOnPageChanged: TNotifyEvent;
    FOnDocumentClosed: TNotifyEvent;
    FOnRegionEditedByUser: TGdViewerRegionEditedByUser;
    FOnAfterDocumentChange: TNotifyEvent;
    FOnBeforeDocumentChange: TNotifyEvent;
    FOnPageDisplayed: TNotifyEvent;
    FOnTransferEnded: TGdViewerTransferEnded;
    FOnDataReceived: TGdViewerDataReceived;
    FOnClickMenu: TGdViewerClickMenu;
    FOnRegionMovedByUser: TGdViewerRegionMovedByUser;
    FOnAnnotationTextBoxKeyDown: TGdViewerAnnotationTextBoxKeyDown;
    FOnAnnotationTextBoxLostFocus: TNotifyEvent;
    FOnDispose: TNotifyEvent;
    FIntf: IGdViewer;
    function  GetControlInterface: IGdViewer;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    procedure AddConnectedLinesAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                                Opacity: Single);
    procedure AddEllipseAnnotInteractive(Fill: WordBool; Stroke: WordBool; BackColor: Integer; 
                                         BorderColor: Integer; BorderWidth: Single; Opacity: Single);
    procedure AddEmbeddedImageAnnotInteractive(ImageID: Integer; Stroke: WordBool; 
                                               BorderColor: Integer; BorderWidth: Single; 
                                               Opacity: Single);
    procedure AddEmbeddedImageAnnotInteractive_2(const ImagePath: WideString; Stroke: WordBool; 
                                                 BorderColor: Integer; BorderWidth: Single; 
                                                 Opacity: Single);
    procedure AddFreeHandAnnotInteractive(BorderColor: Integer; BorderWidth: Single; Opacity: Single);
    procedure AddFreeHandAnnotInteractive_2(BorderColor: Integer; BorderWidth: Single; 
                                            Opacity: Single; ContinuousMode: WordBool);
    procedure AddFreeHandHighlighterAnnotInteractive(BorderColor: Integer; BorderWidth: Single);
    procedure AddFreeHandHighlighterAnnotInteractive_2(BorderColor: Integer; BorderWidth: Single; 
                                                       ContinuousMode: WordBool);
    procedure AddFreeHandPolygonAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                                 BackColor: Integer; Opacity: Single);
    procedure AddLineAnnotInteractive(BorderColor: Integer; BorderWidth: Single; Opacity: Single);
    procedure AddLineArrowAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                           ArrowWidth: Single; ArrowHeight: Single; 
                                           ArrowFilled: WordBool; Opacity: Single);
    procedure AddLineArrowAnnotInteractive_2(BorderColor: Integer; BorderWidth: Single; 
                                             ArrowWidth: Single; ArrowHeight: Single; 
                                             ArrowFilled: WordBool; Opacity: Single; 
                                             Reversed: WordBool);
    procedure AddLinkAnnotationInteractive(const Text: WideString; const Link: WideString; 
                                           ForeColor: Integer; HoverForeColor: Integer; 
                                           const FontName: WideString; FontStyle: FontStyle; 
                                           HoverFontStyle: FontStyle; Opacity: Single; 
                                           Rotation: Single);
    procedure AddPolygonAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                         BackColor: Integer; Opacity: Single);
    procedure AddPolyRulerAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                           Opacity: Single; MeasurementUnit: UnitMode);
    procedure AddRectangleAnnotInteractive(Fill: WordBool; Stroke: WordBool; BackColor: Integer; 
                                           BorderColor: Integer; BorderWidth: Single; 
                                           Opacity: Single);
    procedure AddRectangleHighlighterAnnotInteractive(BackColor: Integer);
    function AddRegion(const Name: WideString; Left: Integer; Top: Integer; Width: Integer; 
                       Height: Integer; MixMode: ForegroundMixMode; RegionColor: Integer): Integer;
    function AddRegionInches(const Name: WideString; Left: Single; Top: Single; Width: Single; 
                             Height: Single; MixMode: ForegroundMixMode; RegionColor: Integer): Integer;
    procedure AddRubberStampAnnotInteractive(const Text: WideString; ForeColor: Integer; 
                                             const FontName: WideString; FontStyle: FontStyle; 
                                             BorderColor: Integer; BorderWidth: Single; 
                                             Opacity: Single; Rotation: Single);
    procedure AddRulerAnnotInteractive(BorderColor: Integer; BorderWidth: Single; Opacity: Single; 
                                       MeasurementUnit: UnitMode);
    procedure AddStickyNoteAnnotationInteractive(const Text: WideString; ForeColor: Integer; 
                                                 const FontName: WideString; FontStyle: FontStyle; 
                                                 FontSize: Single; Opacity: Single; Rotation: Single);
    procedure AddTextAnnotationInteractive(const Text: WideString; ForeColor: Integer; 
                                           const FontName: WideString; FontStyle: FontStyle; 
                                           FontSize: Single; Fill: WordBool; BorderColor: Integer; 
                                           BackColor: Integer; Opacity: Single; Rotation: Single);
    function ARGBI(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer;
    function BurnAnnotationsToPage(RemoveInitialAnnots: WordBool): GdPictureStatus;
    function BurnAnnotationsToPage_2(RemoveInitialAnnots: WordBool; Intent: GdPictureOutputIntent): GdPictureStatus;
    function BurnAnnotationsToPage_3(RemoveInitialAnnots: WordBool; VectorMode: WordBool): GdPictureStatus;
    function CancelLastAnnotInteractiveAdd: GdPictureStatus;
    function TerminateLastAnnotInteractiveAdd: GdPictureStatus;
    procedure CenterOnRect;
    procedure Clear;
    procedure ClearCache;
    procedure ClearRect;
    procedure ClearSelectedText;
    procedure CloseDocument;
    procedure CloseDocument_2(NoCLear: WordBool);
    procedure CoordDocumentInchToViewerPixel(DocumentLeft: Double; DocumentTop: Double; 
                                             var ViewerLeft: Integer; var ViewerTop: Integer);
    procedure CoordDocumentToViewer(DocumentLeft: Integer; DocumentTop: Integer; 
                                    var ViewerLeft: Integer; var ViewerTop: Integer);
    procedure CoordViewerPixelToDocumentInch(ViewerLeft: Integer; ViewerTop: Integer; 
                                             var DocumentLeft: Double; var DocumentTop: Double);
    procedure CoordViewerToDocument(ViewerLeft: Integer; ViewerTop: Integer; 
                                    var DocumentLeft: Integer; var DocumentTop: Integer);
    function CopyRegionToClipboard(SrcLeft: Integer; SrcTop: Integer; Width: Integer; 
                                   Height: Integer): GdPictureStatus;
    function CopyRegionToGdPictureImage(SrcLeft: Integer; SrcTop: Integer; Width: Integer; 
                                        Height: Integer): Integer;
    function CopyToClipboard: GdPictureStatus;
    procedure DeleteAnnotation(AnnotationIdx: Integer);
    function DisplayFirstPage: GdPictureStatus;
    function DisplayFromByteArray(var Data: PSafeArray): GdPictureStatus;
    function DisplayFromClipboard: GdPictureStatus;
    function DisplayFromFile(const FilePath: WideString): GdPictureStatus;
    function DisplayFromFile_2(const FilePath: WideString; const Password: WideString): GdPictureStatus;
    function DisplayFromFTP(const Host: WideString; const Path: WideString; 
                            const Login: WideString; const Password: WideString; FTPPort: Integer): GdPictureStatus;
    function DisplayFromFTP_2(const Uri: WideString; const Login: WideString; 
                              const Password: WideString): GdPictureStatus;
    function DisplayFromGdPictureImage(ImageID: Integer): GdPictureStatus;
    function DisplayFromGdPicturePDF(const PDF: IGdPicturePDF): GdPictureStatus;
    function DisplayFromHTTP(const Host: WideString; const Path: WideString; HTTPPort: Integer): GdPictureStatus;
    procedure DisplayFromHTTPStop;
    function DisplayFromMemory(hMem: Integer; Length: Integer): GdPictureStatus;
    function DisplayFromHTTP_2(const Uri: WideString; const Login: WideString; 
                               const Password: WideString): GdPictureStatus;
    function DisplayFromIStream(const Stream: IUnknown; const Password: WideString): GdPictureStatus;
    function DisplayFromString(const Data: WideString): GdPictureStatus;
    function DisplayFromDIB(Dib: Integer): GdPictureStatus;
    function DisplayLastPage: GdPictureStatus;
    function DisplayNextPage: GdPictureStatus;
    function DisplayPage(Page: Integer): GdPictureStatus;
    function DisplayPreviousPage: GdPictureStatus;
    function DisplayTextEditBox(AnnotationIdx: Integer): GdPictureStatus;
    procedure Dispose;
    function EnsureRegionVisibility(RegionID: Integer): GdPictureStatus;
    function GetAnnotationCount: Integer;
    function GetAnnotationFromIdx(AnnotationIdx: Integer): _Annotation;
    function GetAnnotationManager: IAnnotationManager;
    procedure GetDisplayedArea(var Left: Integer; var Top: Integer; var Width: Integer; 
                               var Height: Integer);
    procedure GetDisplayedAreaInches(var Left: Single; var Top: Single; var Width: Single; 
                                     var Height: Single);
    function GetDocumentLeft: Integer;
    function GetDocumentTop: Integer;
    function GetDocumentType: DocumentType;
    function GetHScrollBarMaxPosition: Integer;
    function GetHScrollBarPosition: Integer;
    function GetLastPath: WideString;
    function GetLastTransferError: WideString;
    function GetMouseLeftInDocument: Integer;
    function GetMouseTopInDocument: Integer;
    function GetObject: OleVariant;
    function GetObjectInterop: OleVariant;
    function GetPageText: WideString;
    function GetPageTextArea(Left: Single; Top: Single; Width: Single; Height: Single): WideString;
    function GetPageTextArea_2(Page: Integer; Left: Single; Top: Single; Width: Single; 
                               Height: Single): WideString;
    function GetPageText_2(Page: Integer): WideString;
    function GetPageThumbnail(Width: Integer; Height: Integer; Page: Integer; BackColor: Integer): Integer;
    procedure GetRectCoordinatesOnDocument(var Left: Integer; var Top: Integer; var Width: Integer; 
                                           var Height: Integer);
    procedure GetRectCoordinatesOnDocumentInches(var Left: Single; var Top: Single; 
                                                 var Width: Single; var Height: Single);
    procedure GetRectCoordinatesOnViewer(var Left: Integer; var Top: Integer; var Width: Integer; 
                                         var Height: Integer);
    function GetRectHeightOnDocument: Integer;
    function GetRectHeightOnViewer: Integer;
    function GetRectLeftOnDocument: Integer;
    function GetRectLeftOnViewer: Integer;
    function GetRectTopOnDocument: Integer;
    function GetRectTopOnViewer: Integer;
    function GetRectWidthOnDocument: Integer;
    function GetRectWidthOnViewer: Integer;
    function GetRegionBorderWidth(RegionID: Integer): Integer;
    function GetRegionHeight(RegionID: Integer): Single;
    function GetRegionHeightPixels(RegionID: Integer): Integer;
    function GetRegionID(RegionNo: Integer): Integer;
    function GetRegionLeft(RegionID: Integer): Single;
    function GetRegionLeftPixels(RegionID: Integer): Integer;
    function GetRegionMixMode(RegionID: Integer): ForegroundMixMode;
    function GetRegionName(RegionID: Integer): WideString;
    function GetRegionPage(RegionID: Integer): Integer;
    function GetRegionSelected(RegionID: Integer): WordBool;
    function GetRegionTop(RegionID: Integer): Single;
    function GetRegionTopPixels(RegionID: Integer): Integer;
    function GetRegionWidth(RegionID: Integer): Single;
    function GetRegionWidthPixels(RegionID: Integer): Integer;
    function GetSelectedAnnotationIdx: Integer;
    function GetSelectedText: WideString;
    function GetSelectedTextRegion(RegionIdx: Integer; var RegionLeft: Single; 
                                   var RegionTop: Single; var RegionWidth: Single; 
                                   var RegionHeight: Single): GdPictureStatus;
    function GetSelectedTextRegionsCount: Integer;
    function GetStat: GdPictureStatus;
    function GetTextOccurrenceCount(Page: Integer; const Text: WideString; CaseSensitive: WordBool; 
                                    WholeWords: WordBool): Integer;
    function GetTextOccurrenceCount_2(Page: Integer; const Text: WideString; 
                                      CaseSensitive: WordBool; WholeWords: WordBool; 
                                      OrdinalComparison: WordBool): Integer;
    function GetVersion: Double;
    function GetVScrollBarMaxPosition: Integer;
    function GetVScrollBarPosition: Integer;
    procedure GifPlay;
    procedure GifStop;
    function HideTextEditBox(SaveText: WordBool): GdPictureStatus;
    function IPTCCount: Integer;
    function IPTCGetID(TagNo: Integer): IPTCTags;
    function IPTCGetValueString(TagNo: Integer): WideString;
    function IsAnnotationVisibleAt(AnnotationIdx: Integer; X: Integer; Y: Integer): WordBool;
    function IsRect: WordBool;
    function IsRectDrawing: WordBool;
    function IsRectEditing: WordBool;
    function LoadAnnotationsFromXMP(const FilePath: WideString): GdPictureStatus;
    function PdfGetAuthor: WideString;
    function PdfGetCreationDate: WideString;
    function PdfGetCreator: WideString;
    function PdfGetEncryptionScheme: PdfEncryption;
    function PdfGetKeywords: WideString;
    function PdfGetMetadata: WideString;
    function PdfGetModificationDate: WideString;
    function PdfGetPageHeight: Double;
    function PdfGetPageWidth: Double;
    function PdfGetProducer: WideString;
    function PdfGetSubject: WideString;
    function PdfGetTitle: WideString;
    function PdfGetVersion: WideString;
    function Print: GdPictureStatus;
    function PrintDialog: WordBool;
    function PrintDialog_2(PrintSizeMode: PrintSizeOption): WordBool;
    function PrintGetActivePrinter: WideString;
    function PrintGetAlignment: PrintAlignment;
    function PrintGetCollate: WordBool;
    function PrintGetColorMode: PrinterColorMode;
    function PrintGetCopies: Smallint;
    function PrintGetDocumentName: WideString;
    function PrintGetDuplexMode: Duplex;
    function PrintGetLastError: WideString;
    function PrintGetMargins(var LeftMargin: Single; var TopMargin: Single): GdPictureStatus;
    function PrintGetOrientation: PrinterOrientation;
    function PrintGetPaperBin: Integer;
    function PrintGetPaperHeight: Single;
    function PrintGetPaperSize: Integer;
    function PrintGetPaperWidth: Single;
    function PrintGetPrinterName(PrinterNo: Integer): WideString;
    function PrintGetPrintersCount: Integer;
    function PrintGetPrinterSettings: IUnknown;
    function PrintGetQuality: PrintQuality;
    function PrintGetStat: GdPictureStatus;
    function PrintInterop: GdPictureStatus;
    function PrintInterop_2: GdPictureStatus;
    function PrintSetActivePrinter(const PrinterName: WideString): WordBool;
    function PrintSetAlignment(ImageAlignment: PrintAlignment): GdPictureStatus;
    function PrintSetAutoRotation(AutoRotation: WordBool): GdPictureStatus;
    function PrintSetCollate(Collate: WordBool): GdPictureStatus;
    function PrintSetColorMode(ColorMode: PrinterColorMode): GdPictureStatus;
    function PrintSetCopies(Copies: Smallint): GdPictureStatus;
    function PrintSetDocumentName(const DocumentName: WideString): GdPictureStatus;
    function PrintSetDuplexMode(DuplexMode: Duplex): GdPictureStatus;
    function PrintSetFromToPage(FromPage: Integer; ToPage: Integer): GdPictureStatus;
    function PrintSetOrientation(Orientation: PrinterOrientation): GdPictureStatus;
    function PrintSetPageSelection(const CustomRange: WideString): GdPictureStatus;
    function PrintSetPaperBin(PaperBin: Integer): WordBool;
    function PrintSetPreRasterization(PreRasterization: WordBool): GdPictureStatus;
    function PrintSetPreRasterizationDPI(DPI: Single): GdPictureStatus;
    function PrintSetPrinterSettings(const PS: IUnknown): GdPictureStatus;
    function PrintSetQuality(Quality: PrintQuality): GdPictureStatus;
    function PrintSetShowPrintingProgress(Show: WordBool): GdPictureStatus;
    function PrintSetStdPaperSize(PaperSize: Integer): GdPictureStatus;
    function PrintSetUserPaperSize(PaperWidth: Single; PaperHeight: Single): GdPictureStatus;
    function PrintShowPrinterSettingsDialog: GdPictureStatus;
    function PrintShowPrinterSettingsDialog_2(HANDLE: Integer): GdPictureStatus;
    function Print_2(PrintSizeMode: PrintSizeOption): GdPictureStatus;
    function Redraw: GdPictureStatus;
    procedure Refresh;
    function RegionCount: Integer;
    function ReleaseGdPictureImage(ImageID: Integer): GdPictureStatus;
    procedure ReloadAnnotations;
    function RemoveAllRegions: GdPictureStatus;
    procedure RemoveItemMenu(MenuItemIdx: Integer);
    function RemoveRegionByID(RegionID: Integer): GdPictureStatus;
    function RemoveRegionByName(const Name: WideString): GdPictureStatus;
    function Rotate(Rotation: RotateFlipType): GdPictureStatus;
    function RotateAnnotations(Angle: Integer): GdPictureStatus;
    function RotateView(Rotation: RotateFlipType): GdPictureStatus;
    function SaveAnnotationsToPage: GdPictureStatus;
    function SaveAnnotationsToXMP(const FilePath: WideString): GdPictureStatus;
    function SaveAnnotationsToXMPEx(const FilePath: WideString): GdPictureStatus;
    function SaveDocumentToJPEG(const FilePath: WideString; Quality: Integer): GdPictureStatus;
    function SaveDocumentToJPEG_2(const Uri: WideString; const Login: WideString; 
                                  const Password: WideString; Quality: Integer): GdPictureStatus;
    function SaveDocumentToPDF(const FilePath: WideString): GdPictureStatus;
    function SaveDocumentToPDF_2(const Uri: WideString; const Login: WideString; 
                                 const Password: WideString): GdPictureStatus;
    function SaveDocumentToTIFF(const FilePath: WideString; Compression: TiffCompression): GdPictureStatus;
    function SaveDocumentToTIFF_2(const Uri: WideString; const Login: WideString; 
                                  const Password: WideString; Compression: TiffCompression): GdPictureStatus;
    function SearchText(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool): WordBool;
    function SearchText_2(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool): WordBool;
    function SearchText_3(Page: Integer; const Text: WideString; Occurrence: Integer; 
                          CaseSensitive: WordBool; var Left: Single; var Top: Single; 
                          var Width: Single; var Height: Single): WordBool;
    function SearchText_4(Page: Integer; const Text: WideString; Occurrence: Integer; 
                          CaseSensitive: WordBool; WholeWords: WordBool; var Left: Single; 
                          var Top: Single; var Width: Single; var Height: Single): WordBool;
    function SearchText_5(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool; 
                          WholeWords: WordBool; OrdinalComparison: WordBool): WordBool;
    function SearchText_6(Page: Integer; const Text: WideString; Occurrence: Integer; 
                          CaseSensitive: WordBool; WholeWords: WordBool; 
                          OrdinalComparison: WordBool; var Left: Single; var Top: Single; 
                          var Width: Single; var Height: Single): WordBool;
    function SearchTextRegex(const Pattern: WideString; Occurence: Integer; CaseSensitive: WordBool): WordBool;
    function SelectAllText: GdPictureStatus;
    function SelectAnnotation(AnnotationIdx: Integer): GdPictureStatus;
    procedure SetAnnotationEditorMode(EditorMode: WordBool);
    procedure SetBackgroundColor(Color: Integer);
    procedure SetFtpPassiveMode(PassiveMode: WordBool);
    procedure SetHScrollBarPosition(NewPos: Integer);
    procedure SetHttpTransferBufferSize(Buffersize: Integer);
    procedure SetHVScrollBarPosition(NewPosH: Integer; NewPosV: Integer);
    procedure SetItemMenuCaption(MenuItemIdx: Integer; const NewMenuCaption: WideString);
    procedure SetItemMenuEnabled(MenuItemIdx: Integer; Enable: WordBool);
    procedure SetRectBorderColor(Color: Integer);
    procedure SetRectCoordinatesOnDocument(Left: Integer; Top: Integer; Width: Integer; 
                                           Height: Integer);
    procedure SetRectCoordinatesOnDocumentInches(Left: Single; Top: Single; Width: Single; 
                                                 Height: Single);
    procedure SetRectCoordinatesOnViewer(Left: Integer; Top: Integer; Width: Integer; 
                                         Height: Integer);
    function SetRegionBorderColor(RegionID: Integer; BorderColor: Integer): GdPictureStatus;
    function SetRegionBorderWidth(RegionID: Integer; BorderWidth: Integer): GdPictureStatus;
    function SetRegionColor(RegionID: Integer; Color: Integer): GdPictureStatus;
    function SetRegionColorSelection(RegionID: Integer; ColorSelection: Integer): GdPictureStatus;
    function SetRegionEditable(RegionID: Integer; Editable: WordBool): GdPictureStatus;
    function SetRegionHeight(RegionID: Integer; Height: Single): GdPictureStatus;
    function SetRegionHeightPixels(RegionID: Integer; Height: Integer): GdPictureStatus;
    function SetRegionLeft(RegionID: Integer; Left: Single): GdPictureStatus;
    function SetRegionLeftPixels(RegionID: Integer; Left: Integer): GdPictureStatus;
    function SetRegionMixMode(RegionID: Integer; MixMode: ForegroundMixMode): GdPictureStatus;
    function SetRegionName(RegionID: Integer; const Name: WideString): GdPictureStatus;
    function SetRegionPage(RegionID: Integer; Page: Integer): GdPictureStatus;
    function SetRegionSelected(RegionID: Integer; Selected: WordBool): GdPictureStatus;
    function SetRegionTop(RegionID: Integer; Top: Single): GdPictureStatus;
    function SetRegionTopPixels(RegionID: Integer; Top: Integer): GdPictureStatus;
    function SetRegionWidth(RegionID: Integer; Width: Single): GdPictureStatus;
    function SetRegionWidthPixels(RegionID: Integer; Width: Integer): GdPictureStatus;
    procedure SetVScrollBarPosition(NewPos: Integer);
    function SetZoom100: GdPictureStatus;
    function SetZoomFitViewer: GdPictureStatus;
    function SetZoomHeightViewer: GdPictureStatus;
    function SetZoomShrinkWidthViewer: GdPictureStatus;
    function SetZoomViewer: GdPictureStatus;
    function SetZoomWidthViewer: GdPictureStatus;
    function TagCount: Integer;
    function TagGetID(TagNo: Integer): Tags;
    function TagGetName(TagNo: Integer): WideString;
    function TagGetValueString(TagNo: Integer): WideString;
    function ZoomArea(Left: Integer; Top: Integer; Width: Integer; Height: Integer): GdPictureStatus;
    function ZoomIN: GdPictureStatus;
    function ZoomOUT: GdPictureStatus;
    function ZoomRect: GdPictureStatus;
    procedure ReleaseEventsTarget;
    procedure AddRedactionAnnotInteractive(BackColor: Integer);
    function ApplyAllRedactions: GdPictureStatus;
    property  ControlInterface: IGdViewer read GetControlInterface;
    property  DefaultInterface: IGdViewer read GetControlInterface;
    property PageRotation: TOleEnum index 8 read GetTOleEnumProp;
    property PageRenderRotation: TOleEnum index 10 read GetTOleEnumProp;
    property PageWidth: Integer index 11 read GetIntegerProp;
    property PageHeight: Integer index 12 read GetIntegerProp;
    property VScrollVisible: WordBool index 18 read GetWordBoolProp;
    property HScrollVisible: WordBool index 19 read GetWordBoolProp;
    property ZoomMax: Double index 33 read GetDoubleProp;
    property VerticalResolution: Single index 55 read GetSingleProp;
    property HorizontalResolution: Single index 56 read GetSingleProp;
    property CurrentPage: Integer index 58 read GetIntegerProp;
    property PageCount: Integer index 62 read GetIntegerProp;
    property hWnd: Integer index 335 read GetIntegerProp;
    property DocumentFormat: TOleEnum index 336 read GetTOleEnumProp;
  published
    property Anchors;
    property PdfEnableFileLinks: WordBool index 1 read GetWordBoolProp write SetWordBoolProp stored False;
    property PdfIncreaseTextContrast: WordBool index 2 read GetWordBoolProp write SetWordBoolProp stored False;
    property PdfVerifyDigitalCertificates: WordBool index 3 read GetWordBoolProp write SetWordBoolProp stored False;
    property ScrollBars: WordBool index 4 read GetWordBoolProp write SetWordBoolProp stored False;
    property ForceScrollBars: WordBool index 5 read GetWordBoolProp write SetWordBoolProp stored False;
    property EnableMenu: WordBool index 6 read GetWordBoolProp write SetWordBoolProp stored False;
    property ViewRotation: TOleEnum index 7 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property PdfShowOpenFileDialogForDecryption: WordBool index 9 read GetWordBoolProp write SetWordBoolProp stored False;
    property MouseMode: TOleEnum index 13 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property Zoom: Double index 14 read GetDoubleProp write SetDoubleProp stored False;
    property PdfShowDialogForPassword: WordBool index 15 read GetWordBoolProp write SetWordBoolProp stored False;
    property ZoomCenterAtMousePosition: WordBool index 16 read GetWordBoolProp write SetWordBoolProp stored False;
    property MagnifierWidth: Integer index 17 read GetIntegerProp write SetIntegerProp stored False;
    property EnableICM: WordBool index 20 read GetWordBoolProp write SetWordBoolProp stored False;
    property RenderGdPictureAnnots: WordBool index 21 read GetWordBoolProp write SetWordBoolProp stored False;
    property HQAnnotationRendering: WordBool index 22 read GetWordBoolProp write SetWordBoolProp stored False;
    property AllowDropFile: WordBool index 23 read GetWordBoolProp write SetWordBoolProp stored False;
    property AnnotationDropShadow: WordBool index 24 read GetWordBoolProp write SetWordBoolProp stored False;
    property AnnotationResizeRotateHandlesScale: Single index 25 read GetSingleProp write SetSingleProp stored False;
    property AnnotationEnableMultiSelect: WordBool index 339 read GetWordBoolProp write SetWordBoolProp stored False;
    property EnableTextSelection: WordBool index 27 read GetWordBoolProp write SetWordBoolProp stored False;
    property PageDisplayMode: TOleEnum index 28 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property EnableDeferredPainting: WordBool index 29 read GetWordBoolProp write SetWordBoolProp stored False;
    property BackColor: Integer index 30 read GetIntegerProp write SetIntegerProp stored False;
    property EnabledProgressBar: WordBool index 31 read GetWordBoolProp write SetWordBoolProp stored False;
    property MagnifierHeight: Integer index 32 read GetIntegerProp write SetIntegerProp stored False;
    property MagnifierZoomY: Single index 34 read GetSingleProp write SetSingleProp stored False;
    property MouseButtonForMouseMode: TOleEnum index 35 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property ContinuousViewMode: WordBool index 36 read GetWordBoolProp write SetWordBoolProp stored False;
    property MagnifierZoomX: Single index 37 read GetSingleProp write SetSingleProp stored False;
    property RectIsEditable: WordBool index 38 read GetWordBoolProp write SetWordBoolProp stored False;
    property Gamma: Single index 39 read GetSingleProp write SetSingleProp stored False;
    property MouseWheelMode: TOleEnum index 40 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property KeepDocumentPosition: WordBool index 41 read GetWordBoolProp write SetWordBoolProp stored False;
    property PdfEnableLinks: WordBool index 42 read GetWordBoolProp write SetWordBoolProp stored False;
    property PdfDisplayFormField: WordBool index 43 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayQualityAuto: WordBool index 44 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayQuality: TOleEnum index 45 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property AnimateGIF: WordBool index 46 read GetWordBoolProp write SetWordBoolProp stored False;
    property DocumentPosition: TOleEnum index 47 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property DocumentAlignment: TOleEnum index 48 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property RegionsAreEditable: WordBool index 334 read GetWordBoolProp write SetWordBoolProp stored False;
    property ClipRegionsToPageBounds: WordBool index 337 read GetWordBoolProp write SetWordBoolProp stored False;
    property ClipAnnotsToPageBounds: WordBool index 338 read GetWordBoolProp write SetWordBoolProp stored False;
    property ZoomMode: TOleEnum index 50 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property EnableMouseWheel: WordBool index 51 read GetWordBoolProp write SetWordBoolProp stored False;
    property ZoomStep: Integer index 52 read GetIntegerProp write SetIntegerProp stored False;
    property ScrollSmallChange: Smallint index 53 read GetSmallintProp write SetSmallintProp stored False;
    property ScrollLargeChange: Smallint index 54 read GetSmallintProp write SetSmallintProp stored False;
    property RectBorderSize: Integer index 57 read GetIntegerProp write SetIntegerProp stored False;
    property SilentMode: WordBool index 59 read GetWordBoolProp write SetWordBoolProp stored False;
    property ForceTemporaryMode: WordBool index 60 read GetWordBoolProp write SetWordBoolProp stored False;
    property IgnoreDocumentResolution: WordBool index 61 read GetWordBoolProp write SetWordBoolProp stored False;
    property LockViewer: WordBool index 63 read GetWordBoolProp write SetWordBoolProp stored False;
    property DrawPageBorders: WordBool index 327 read GetWordBoolProp write SetWordBoolProp stored False;
    property PageBordersPenSize: Integer index 328 read GetIntegerProp write SetIntegerProp stored False;
    property PageBordersColor: Integer index 329 read GetIntegerProp write SetIntegerProp stored False;
    property PreserveViewRotation: WordBool index 340 read GetWordBoolProp write SetWordBoolProp stored False;
    property EnableFuzzySearch: WordBool index 346 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnPdfUriNavigation: TGdViewerPdfUriNavigation read FOnPdfUriNavigation write FOnPdfUriNavigation;
    property OnBeforeAnnotationAddedByUser: TGdViewerBeforeAnnotationAddedByUser read FOnBeforeAnnotationAddedByUser write FOnBeforeAnnotationAddedByUser;
    property OnAnnotationAddedByUser: TGdViewerAnnotationAddedByUser read FOnAnnotationAddedByUser write FOnAnnotationAddedByUser;
    property OnAnnotationRotated: TGdViewerAnnotationRotated read FOnAnnotationRotated write FOnAnnotationRotated;
    property OnAnnotationMoved: TGdViewerAnnotationMoved read FOnAnnotationMoved write FOnAnnotationMoved;
    property OnPdfCertificateRequest: TGdViewerPdfCertificateRequest read FOnPdfCertificateRequest write FOnPdfCertificateRequest;
    property OnPdfPasswordRequest: TGdViewerPdfPasswordRequest read FOnPdfPasswordRequest write FOnPdfPasswordRequest;
    property OnPdfFileNavigation: TGdViewerPdfFileNavigation read FOnPdfFileNavigation write FOnPdfFileNavigation;
    property OnPdfLaunchAction: TGdViewerPdfLaunchAction read FOnPdfLaunchAction write FOnPdfLaunchAction;
    property OnAnnotationClicked: TGdViewerAnnotationClicked read FOnAnnotationClicked write FOnAnnotationClicked;
    property OnAnnotationResized: TGdViewerAnnotationResized read FOnAnnotationResized write FOnAnnotationResized;
    property OnAnnotationSelected: TGdViewerAnnotationSelected read FOnAnnotationSelected write FOnAnnotationSelected;
    property OnViewerKeyDown: TGdViewerViewerKeyDown read FOnViewerKeyDown write FOnViewerKeyDown;
    property OnAnnotationStartEditingText: TGdViewerAnnotationStartEditingText read FOnAnnotationStartEditingText write FOnAnnotationStartEditingText;
    property OnSavingProgress: TGdViewerSavingProgress read FOnSavingProgress write FOnSavingProgress;
    property OnDropFile: TGdViewerDropFile read FOnDropFile write FOnDropFile;
    property OnViewerKeyPress: TGdViewerViewerKeyPress read FOnViewerKeyPress write FOnViewerKeyPress;
    property OnViewerKeyUp: TGdViewerViewerKeyUp read FOnViewerKeyUp write FOnViewerKeyUp;
    property OnViewerMouseUp: TGdViewerViewerMouseUp read FOnViewerMouseUp write FOnViewerMouseUp;
    property OnViewerMouseDown: TGdViewerViewerMouseDown read FOnViewerMouseDown write FOnViewerMouseDown;
    property OnViewerMouseMove: TGdViewerViewerMouseMove read FOnViewerMouseMove write FOnViewerMouseMove;
    property OnViewerClick: TNotifyEvent read FOnViewerClick write FOnViewerClick;
    property OnViewerMouseWheel: TNotifyEvent read FOnViewerMouseWheel write FOnViewerMouseWheel;
    property OnViewerDoubleClick: TNotifyEvent read FOnViewerDoubleClick write FOnViewerDoubleClick;
    property OnBeforePrintPage: TGdViewerBeforePrintPage read FOnBeforePrintPage write FOnBeforePrintPage;
    property OnAnnotationEndEditingText: TGdViewerAnnotationEndEditingText read FOnAnnotationEndEditingText write FOnAnnotationEndEditingText;
    property OnAfterPrintPage: TGdViewerAfterPrintPage read FOnAfterPrintPage write FOnAfterPrintPage;
    property OnScrollViewer: TNotifyEvent read FOnScrollViewer write FOnScrollViewer;
    property OnRectEditedByUser: TNotifyEvent read FOnRectEditedByUser write FOnRectEditedByUser;
    property OnAfterZoomChange: TNotifyEvent read FOnAfterZoomChange write FOnAfterZoomChange;
    property OnBeforeZoomChange: TNotifyEvent read FOnBeforeZoomChange write FOnBeforeZoomChange;
    property OnBeforeRotation: TGdViewerBeforeRotation read FOnBeforeRotation write FOnBeforeRotation;
    property OnRotation: TGdViewerRotation read FOnRotation write FOnRotation;
    property OnRegionSelectedByUser: TGdViewerRegionSelectedByUser read FOnRegionSelectedByUser write FOnRegionSelectedByUser;
    property OnRegionResizedByUser: TGdViewerRegionResizedByUser read FOnRegionResizedByUser write FOnRegionResizedByUser;
    property OnPageChanged: TNotifyEvent read FOnPageChanged write FOnPageChanged;
    property OnDocumentClosed: TNotifyEvent read FOnDocumentClosed write FOnDocumentClosed;
    property OnRegionEditedByUser: TGdViewerRegionEditedByUser read FOnRegionEditedByUser write FOnRegionEditedByUser;
    property OnAfterDocumentChange: TNotifyEvent read FOnAfterDocumentChange write FOnAfterDocumentChange;
    property OnBeforeDocumentChange: TNotifyEvent read FOnBeforeDocumentChange write FOnBeforeDocumentChange;
    property OnPageDisplayed: TNotifyEvent read FOnPageDisplayed write FOnPageDisplayed;
    property OnTransferEnded: TGdViewerTransferEnded read FOnTransferEnded write FOnTransferEnded;
    property OnDataReceived: TGdViewerDataReceived read FOnDataReceived write FOnDataReceived;
    property OnClickMenu: TGdViewerClickMenu read FOnClickMenu write FOnClickMenu;
    property OnRegionMovedByUser: TGdViewerRegionMovedByUser read FOnRegionMovedByUser write FOnRegionMovedByUser;
    property OnAnnotationTextBoxKeyDown: TGdViewerAnnotationTextBoxKeyDown read FOnAnnotationTextBoxKeyDown write FOnAnnotationTextBoxKeyDown;
    property OnAnnotationTextBoxLostFocus: TNotifyEvent read FOnAnnotationTextBoxLostFocus write FOnAnnotationTextBoxLostFocus;
    property OnDispose: TNotifyEvent read FOnDispose write FOnDispose;
  end;

// *********************************************************************//
// The Class CoOnDisposeEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _OnDisposeEventHandler exposed by              
// the CoClass OnDisposeEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOnDisposeEventHandler = class
    class function Create: _OnDisposeEventHandler;
    class function CreateRemote(const MachineName: string): _OnDisposeEventHandler;
  end;

// *********************************************************************//
// The Class CoPropertyChangedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _PropertyChangedEventHandler exposed by              
// the CoClass PropertyChangedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyChangedEventHandler = class
    class function Create: _PropertyChangedEventHandler;
    class function CreateRemote(const MachineName: string): _PropertyChangedEventHandler;
  end;

// *********************************************************************//
// The Class CoSavingProgressEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _SavingProgressEventHandler exposed by              
// the CoClass SavingProgressEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSavingProgressEventHandler = class
    class function Create: _SavingProgressEventHandler;
    class function CreateRemote(const MachineName: string): _SavingProgressEventHandler;
  end;

// *********************************************************************//
// The Class CoOnDisposeEventHandler_2 provides a Create and CreateRemote method to          
// create instances of the default interface _OnDisposeEventHandler_2 exposed by              
// the CoClass OnDisposeEventHandler_2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOnDisposeEventHandler_2 = class
    class function Create: _OnDisposeEventHandler_2;
    class function CreateRemote(const MachineName: string): _OnDisposeEventHandler_2;
  end;

// *********************************************************************//
// The Class CoNodeSelectedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _NodeSelectedEventHandler exposed by              
// the CoClass NodeSelectedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNodeSelectedEventHandler = class
    class function Create: _NodeSelectedEventHandler;
    class function CreateRemote(const MachineName: string): _NodeSelectedEventHandler;
  end;

// *********************************************************************//
// The Class CoTwainImagePreviewEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _TwainImagePreviewEventHandler exposed by              
// the CoClass TwainImagePreviewEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTwainImagePreviewEventHandler = class
    class function Create: _TwainImagePreviewEventHandler;
    class function CreateRemote(const MachineName: string): _TwainImagePreviewEventHandler;
  end;

// *********************************************************************//
// The Class CoBeforePdfPrintPageEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _BeforePdfPrintPageEventHandler exposed by              
// the CoClass BeforePdfPrintPageEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBeforePdfPrintPageEventHandler = class
    class function Create: _BeforePdfPrintPageEventHandler;
    class function CreateRemote(const MachineName: string): _BeforePdfPrintPageEventHandler;
  end;

// *********************************************************************//
// The Class CoAfterPdfPrintPageEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AfterPdfPrintPageEventHandler exposed by              
// the CoClass AfterPdfPrintPageEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAfterPdfPrintPageEventHandler = class
    class function Create: _AfterPdfPrintPageEventHandler;
    class function CreateRemote(const MachineName: string): _AfterPdfPrintPageEventHandler;
  end;

// *********************************************************************//
// The Class CoExternalOcrPageRequestEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ExternalOcrPageRequestEventHandler exposed by              
// the CoClass ExternalOcrPageRequestEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExternalOcrPageRequestEventHandler = class
    class function Create: _ExternalOcrPageRequestEventHandler;
    class function CreateRemote(const MachineName: string): _ExternalOcrPageRequestEventHandler;
  end;

// *********************************************************************//
// The Class CoOcrPagesProgressEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _OcrPagesProgressEventHandler exposed by              
// the CoClass OcrPagesProgressEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOcrPagesProgressEventHandler = class
    class function Create: _OcrPagesProgressEventHandler;
    class function CreateRemote(const MachineName: string): _OcrPagesProgressEventHandler;
  end;

// *********************************************************************//
// The Class CoBeforePageOcrEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _BeforePageOcrEventHandler exposed by              
// the CoClass BeforePageOcrEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBeforePageOcrEventHandler = class
    class function Create: _BeforePageOcrEventHandler;
    class function CreateRemote(const MachineName: string): _BeforePageOcrEventHandler;
  end;

// *********************************************************************//
// The Class CoPageBitmapOcrReadyEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _PageBitmapOcrReadyEventHandler exposed by              
// the CoClass PageBitmapOcrReadyEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPageBitmapOcrReadyEventHandler = class
    class function Create: _PageBitmapOcrReadyEventHandler;
    class function CreateRemote(const MachineName: string): _PageBitmapOcrReadyEventHandler;
  end;

// *********************************************************************//
// The Class CoOcrPagesDoneEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _OcrPagesDoneEventHandler exposed by              
// the CoClass OcrPagesDoneEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOcrPagesDoneEventHandler = class
    class function Create: _OcrPagesDoneEventHandler;
    class function CreateRemote(const MachineName: string): _OcrPagesDoneEventHandler;
  end;

// *********************************************************************//
// The Class CoViewerDoubleClickEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ViewerDoubleClickEventHandler exposed by              
// the CoClass ViewerDoubleClickEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoViewerDoubleClickEventHandler = class
    class function Create: _ViewerDoubleClickEventHandler;
    class function CreateRemote(const MachineName: string): _ViewerDoubleClickEventHandler;
  end;

// *********************************************************************//
// The Class CoViewerMouseWheelEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ViewerMouseWheelEventHandler exposed by              
// the CoClass ViewerMouseWheelEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoViewerMouseWheelEventHandler = class
    class function Create: _ViewerMouseWheelEventHandler;
    class function CreateRemote(const MachineName: string): _ViewerMouseWheelEventHandler;
  end;

// *********************************************************************//
// The Class CoViewerClickEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ViewerClickEventHandler exposed by              
// the CoClass ViewerClickEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoViewerClickEventHandler = class
    class function Create: _ViewerClickEventHandler;
    class function CreateRemote(const MachineName: string): _ViewerClickEventHandler;
  end;

// *********************************************************************//
// The Class CoViewerMouseUpEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ViewerMouseUpEventHandler exposed by              
// the CoClass ViewerMouseUpEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoViewerMouseUpEventHandler = class
    class function Create: _ViewerMouseUpEventHandler;
    class function CreateRemote(const MachineName: string): _ViewerMouseUpEventHandler;
  end;

// *********************************************************************//
// The Class CoViewerMouseDownEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ViewerMouseDownEventHandler exposed by              
// the CoClass ViewerMouseDownEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoViewerMouseDownEventHandler = class
    class function Create: _ViewerMouseDownEventHandler;
    class function CreateRemote(const MachineName: string): _ViewerMouseDownEventHandler;
  end;

// *********************************************************************//
// The Class CoViewerMouseMoveEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ViewerMouseMoveEventHandler exposed by              
// the CoClass ViewerMouseMoveEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoViewerMouseMoveEventHandler = class
    class function Create: _ViewerMouseMoveEventHandler;
    class function CreateRemote(const MachineName: string): _ViewerMouseMoveEventHandler;
  end;

// *********************************************************************//
// The Class CoViewerKeyUpEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ViewerKeyUpEventHandler exposed by              
// the CoClass ViewerKeyUpEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoViewerKeyUpEventHandler = class
    class function Create: _ViewerKeyUpEventHandler;
    class function CreateRemote(const MachineName: string): _ViewerKeyUpEventHandler;
  end;

// *********************************************************************//
// The Class CoViewerKeyDownEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ViewerKeyDownEventHandler exposed by              
// the CoClass ViewerKeyDownEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoViewerKeyDownEventHandler = class
    class function Create: _ViewerKeyDownEventHandler;
    class function CreateRemote(const MachineName: string): _ViewerKeyDownEventHandler;
  end;

// *********************************************************************//
// The Class CoViewerKeyPressEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ViewerKeyPressEventHandler exposed by              
// the CoClass ViewerKeyPressEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoViewerKeyPressEventHandler = class
    class function Create: _ViewerKeyPressEventHandler;
    class function CreateRemote(const MachineName: string): _ViewerKeyPressEventHandler;
  end;

// *********************************************************************//
// The Class CoOnDisposeEventHandler_3 provides a Create and CreateRemote method to          
// create instances of the default interface _OnDisposeEventHandler_3 exposed by              
// the CoClass OnDisposeEventHandler_3. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOnDisposeEventHandler_3 = class
    class function Create: _OnDisposeEventHandler_3;
    class function CreateRemote(const MachineName: string): _OnDisposeEventHandler_3;
  end;

// *********************************************************************//
// The Class CoAnnotationTextBoxKeyDownEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationTextBoxKeyDownEventHandler exposed by              
// the CoClass AnnotationTextBoxKeyDownEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationTextBoxKeyDownEventHandler = class
    class function Create: _AnnotationTextBoxKeyDownEventHandler;
    class function CreateRemote(const MachineName: string): _AnnotationTextBoxKeyDownEventHandler;
  end;

// *********************************************************************//
// The Class CoAnnotationTextBoxLostFocusEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationTextBoxLostFocusEventHandler exposed by              
// the CoClass AnnotationTextBoxLostFocusEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationTextBoxLostFocusEventHandler = class
    class function Create: _AnnotationTextBoxLostFocusEventHandler;
    class function CreateRemote(const MachineName: string): _AnnotationTextBoxLostFocusEventHandler;
  end;

// *********************************************************************//
// The Class CoDropFileEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _DropFileEventHandler exposed by              
// the CoClass DropFileEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDropFileEventHandler = class
    class function Create: _DropFileEventHandler;
    class function CreateRemote(const MachineName: string): _DropFileEventHandler;
  end;

// *********************************************************************//
// The Class CoSavingProgressEventHandler_2 provides a Create and CreateRemote method to          
// create instances of the default interface _SavingProgressEventHandler_2 exposed by              
// the CoClass SavingProgressEventHandler_2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSavingProgressEventHandler_2 = class
    class function Create: _SavingProgressEventHandler_2;
    class function CreateRemote(const MachineName: string): _SavingProgressEventHandler_2;
  end;

// *********************************************************************//
// The Class CoAnnotationStartEditingTextEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationStartEditingTextEventHandler exposed by              
// the CoClass AnnotationStartEditingTextEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationStartEditingTextEventHandler = class
    class function Create: _AnnotationStartEditingTextEventHandler;
    class function CreateRemote(const MachineName: string): _AnnotationStartEditingTextEventHandler;
  end;

// *********************************************************************//
// The Class CoAnnotationEndEditingTextEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationEndEditingTextEventHandler exposed by              
// the CoClass AnnotationEndEditingTextEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationEndEditingTextEventHandler = class
    class function Create: _AnnotationEndEditingTextEventHandler;
    class function CreateRemote(const MachineName: string): _AnnotationEndEditingTextEventHandler;
  end;

// *********************************************************************//
// The Class CoAnnotationSelectedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationSelectedEventHandler exposed by              
// the CoClass AnnotationSelectedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationSelectedEventHandler = class
    class function Create: _AnnotationSelectedEventHandler;
    class function CreateRemote(const MachineName: string): _AnnotationSelectedEventHandler;
  end;

// *********************************************************************//
// The Class CoAnnotationClickedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationClickedEventHandler exposed by              
// the CoClass AnnotationClickedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationClickedEventHandler = class
    class function Create: _AnnotationClickedEventHandler;
    class function CreateRemote(const MachineName: string): _AnnotationClickedEventHandler;
  end;

// *********************************************************************//
// The Class CoBeforeAnnotationAddedByUserEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _BeforeAnnotationAddedByUserEventHandler exposed by              
// the CoClass BeforeAnnotationAddedByUserEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBeforeAnnotationAddedByUserEventHandler = class
    class function Create: _BeforeAnnotationAddedByUserEventHandler;
    class function CreateRemote(const MachineName: string): _BeforeAnnotationAddedByUserEventHandler;
  end;

// *********************************************************************//
// The Class CoAnnotationAddedByUserEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationAddedByUserEventHandler exposed by              
// the CoClass AnnotationAddedByUserEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationAddedByUserEventHandler = class
    class function Create: _AnnotationAddedByUserEventHandler;
    class function CreateRemote(const MachineName: string): _AnnotationAddedByUserEventHandler;
  end;

// *********************************************************************//
// The Class CoAnnotationRotatedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationRotatedEventHandler exposed by              
// the CoClass AnnotationRotatedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationRotatedEventHandler = class
    class function Create: _AnnotationRotatedEventHandler;
    class function CreateRemote(const MachineName: string): _AnnotationRotatedEventHandler;
  end;

// *********************************************************************//
// The Class CoAnnotationMovedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationMovedEventHandler exposed by              
// the CoClass AnnotationMovedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationMovedEventHandler = class
    class function Create: _AnnotationMovedEventHandler;
    class function CreateRemote(const MachineName: string): _AnnotationMovedEventHandler;
  end;

// *********************************************************************//
// The Class CoAnnotationResizedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationResizedEventHandler exposed by              
// the CoClass AnnotationResizedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationResizedEventHandler = class
    class function Create: _AnnotationResizedEventHandler;
    class function CreateRemote(const MachineName: string): _AnnotationResizedEventHandler;
  end;

// *********************************************************************//
// The Class CoPdfPasswordRequestEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _PdfPasswordRequestEventHandler exposed by              
// the CoClass PdfPasswordRequestEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPdfPasswordRequestEventHandler = class
    class function Create: _PdfPasswordRequestEventHandler;
    class function CreateRemote(const MachineName: string): _PdfPasswordRequestEventHandler;
  end;

// *********************************************************************//
// The Class CoPdfCertificateRequestEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _PdfCertificateRequestEventHandler exposed by              
// the CoClass PdfCertificateRequestEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPdfCertificateRequestEventHandler = class
    class function Create: _PdfCertificateRequestEventHandler;
    class function CreateRemote(const MachineName: string): _PdfCertificateRequestEventHandler;
  end;

// *********************************************************************//
// The Class CoPdfFileNavigationEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _PdfFileNavigationEventHandler exposed by              
// the CoClass PdfFileNavigationEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPdfFileNavigationEventHandler = class
    class function Create: _PdfFileNavigationEventHandler;
    class function CreateRemote(const MachineName: string): _PdfFileNavigationEventHandler;
  end;

// *********************************************************************//
// The Class CoPdfLaunchActionEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _PdfLaunchActionEventHandler exposed by              
// the CoClass PdfLaunchActionEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPdfLaunchActionEventHandler = class
    class function Create: _PdfLaunchActionEventHandler;
    class function CreateRemote(const MachineName: string): _PdfLaunchActionEventHandler;
  end;

// *********************************************************************//
// The Class CoPdfUriNavigationEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _PdfUriNavigationEventHandler exposed by              
// the CoClass PdfUriNavigationEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPdfUriNavigationEventHandler = class
    class function Create: _PdfUriNavigationEventHandler;
    class function CreateRemote(const MachineName: string): _PdfUriNavigationEventHandler;
  end;

// *********************************************************************//
// The Class CoBeforePrintPageEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _BeforePrintPageEventHandler exposed by              
// the CoClass BeforePrintPageEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBeforePrintPageEventHandler = class
    class function Create: _BeforePrintPageEventHandler;
    class function CreateRemote(const MachineName: string): _BeforePrintPageEventHandler;
  end;

// *********************************************************************//
// The Class CoAfterPrintPageEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AfterPrintPageEventHandler exposed by              
// the CoClass AfterPrintPageEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAfterPrintPageEventHandler = class
    class function Create: _AfterPrintPageEventHandler;
    class function CreateRemote(const MachineName: string): _AfterPrintPageEventHandler;
  end;

// *********************************************************************//
// The Class CoDataReceivedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _DataReceivedEventHandler exposed by              
// the CoClass DataReceivedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDataReceivedEventHandler = class
    class function Create: _DataReceivedEventHandler;
    class function CreateRemote(const MachineName: string): _DataReceivedEventHandler;
  end;

// *********************************************************************//
// The Class CoTransferEndedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _TransferEndedEventHandler exposed by              
// the CoClass TransferEndedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTransferEndedEventHandler = class
    class function Create: _TransferEndedEventHandler;
    class function CreateRemote(const MachineName: string): _TransferEndedEventHandler;
  end;

// *********************************************************************//
// The Class CoAfterZoomChangeEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AfterZoomChangeEventHandler exposed by              
// the CoClass AfterZoomChangeEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAfterZoomChangeEventHandler = class
    class function Create: _AfterZoomChangeEventHandler;
    class function CreateRemote(const MachineName: string): _AfterZoomChangeEventHandler;
  end;

// *********************************************************************//
// The Class CoBeforeZoomChangeEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _BeforeZoomChangeEventHandler exposed by              
// the CoClass BeforeZoomChangeEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBeforeZoomChangeEventHandler = class
    class function Create: _BeforeZoomChangeEventHandler;
    class function CreateRemote(const MachineName: string): _BeforeZoomChangeEventHandler;
  end;

// *********************************************************************//
// The Class CoScrollViewerEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ScrollViewerEventHandler exposed by              
// the CoClass ScrollViewerEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoScrollViewerEventHandler = class
    class function Create: _ScrollViewerEventHandler;
    class function CreateRemote(const MachineName: string): _ScrollViewerEventHandler;
  end;

// *********************************************************************//
// The Class CoRectEditedByUserEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _RectEditedByUserEventHandler exposed by              
// the CoClass RectEditedByUserEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRectEditedByUserEventHandler = class
    class function Create: _RectEditedByUserEventHandler;
    class function CreateRemote(const MachineName: string): _RectEditedByUserEventHandler;
  end;

// *********************************************************************//
// The Class CoRegionEditedByUserEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _RegionEditedByUserEventHandler exposed by              
// the CoClass RegionEditedByUserEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRegionEditedByUserEventHandler = class
    class function Create: _RegionEditedByUserEventHandler;
    class function CreateRemote(const MachineName: string): _RegionEditedByUserEventHandler;
  end;

// *********************************************************************//
// The Class CoRegionMovedByUserEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _RegionMovedByUserEventHandler exposed by              
// the CoClass RegionMovedByUserEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRegionMovedByUserEventHandler = class
    class function Create: _RegionMovedByUserEventHandler;
    class function CreateRemote(const MachineName: string): _RegionMovedByUserEventHandler;
  end;

// *********************************************************************//
// The Class CoRegionResizedByUserEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _RegionResizedByUserEventHandler exposed by              
// the CoClass RegionResizedByUserEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRegionResizedByUserEventHandler = class
    class function Create: _RegionResizedByUserEventHandler;
    class function CreateRemote(const MachineName: string): _RegionResizedByUserEventHandler;
  end;

// *********************************************************************//
// The Class CoRegionSelectedByUserEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _RegionSelectedByUserEventHandler exposed by              
// the CoClass RegionSelectedByUserEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRegionSelectedByUserEventHandler = class
    class function Create: _RegionSelectedByUserEventHandler;
    class function CreateRemote(const MachineName: string): _RegionSelectedByUserEventHandler;
  end;

// *********************************************************************//
// The Class CoRotationEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _RotationEventHandler exposed by              
// the CoClass RotationEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRotationEventHandler = class
    class function Create: _RotationEventHandler;
    class function CreateRemote(const MachineName: string): _RotationEventHandler;
  end;

// *********************************************************************//
// The Class CoBeforeRotationEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _BeforeRotationEventHandler exposed by              
// the CoClass BeforeRotationEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBeforeRotationEventHandler = class
    class function Create: _BeforeRotationEventHandler;
    class function CreateRemote(const MachineName: string): _BeforeRotationEventHandler;
  end;

// *********************************************************************//
// The Class CoPageChangedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _PageChangedEventHandler exposed by              
// the CoClass PageChangedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPageChangedEventHandler = class
    class function Create: _PageChangedEventHandler;
    class function CreateRemote(const MachineName: string): _PageChangedEventHandler;
  end;

// *********************************************************************//
// The Class CoBeforeDocumentChangeEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _BeforeDocumentChangeEventHandler exposed by              
// the CoClass BeforeDocumentChangeEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBeforeDocumentChangeEventHandler = class
    class function Create: _BeforeDocumentChangeEventHandler;
    class function CreateRemote(const MachineName: string): _BeforeDocumentChangeEventHandler;
  end;

// *********************************************************************//
// The Class CoAfterDocumentChangeEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _AfterDocumentChangeEventHandler exposed by              
// the CoClass AfterDocumentChangeEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAfterDocumentChangeEventHandler = class
    class function Create: _AfterDocumentChangeEventHandler;
    class function CreateRemote(const MachineName: string): _AfterDocumentChangeEventHandler;
  end;

// *********************************************************************//
// The Class CoDocumentClosedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _DocumentClosedEventHandler exposed by              
// the CoClass DocumentClosedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDocumentClosedEventHandler = class
    class function Create: _DocumentClosedEventHandler;
    class function CreateRemote(const MachineName: string): _DocumentClosedEventHandler;
  end;

// *********************************************************************//
// The Class CoBeforeDocumentClosedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _BeforeDocumentClosedEventHandler exposed by              
// the CoClass BeforeDocumentClosedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBeforeDocumentClosedEventHandler = class
    class function Create: _BeforeDocumentClosedEventHandler;
    class function CreateRemote(const MachineName: string): _BeforeDocumentClosedEventHandler;
  end;

// *********************************************************************//
// The Class CoPageDisplayedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _PageDisplayedEventHandler exposed by              
// the CoClass PageDisplayedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPageDisplayedEventHandler = class
    class function Create: _PageDisplayedEventHandler;
    class function CreateRemote(const MachineName: string): _PageDisplayedEventHandler;
  end;

// *********************************************************************//
// The Class CoClickMenuEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ClickMenuEventHandler exposed by              
// the CoClass ClickMenuEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoClickMenuEventHandler = class
    class function Create: _ClickMenuEventHandler;
    class function CreateRemote(const MachineName: string): _ClickMenuEventHandler;
  end;

// *********************************************************************//
// The Class CoOnDisposeEventHandler_4 provides a Create and CreateRemote method to          
// create instances of the default interface _OnDisposeEventHandler_4 exposed by              
// the CoClass OnDisposeEventHandler_4. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOnDisposeEventHandler_4 = class
    class function Create: _OnDisposeEventHandler_4;
    class function CreateRemote(const MachineName: string): _OnDisposeEventHandler_4;
  end;

// *********************************************************************//
// The Class CoControlDoubleClickEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ControlDoubleClickEventHandler exposed by              
// the CoClass ControlDoubleClickEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoControlDoubleClickEventHandler = class
    class function Create: _ControlDoubleClickEventHandler;
    class function CreateRemote(const MachineName: string): _ControlDoubleClickEventHandler;
  end;

// *********************************************************************//
// The Class CoControlMouseWheelEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ControlMouseWheelEventHandler exposed by              
// the CoClass ControlMouseWheelEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoControlMouseWheelEventHandler = class
    class function Create: _ControlMouseWheelEventHandler;
    class function CreateRemote(const MachineName: string): _ControlMouseWheelEventHandler;
  end;

// *********************************************************************//
// The Class CoControlClickEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ControlClickEventHandler exposed by              
// the CoClass ControlClickEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoControlClickEventHandler = class
    class function Create: _ControlClickEventHandler;
    class function CreateRemote(const MachineName: string): _ControlClickEventHandler;
  end;

// *********************************************************************//
// The Class CoControlMouseUpEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ControlMouseUpEventHandler exposed by              
// the CoClass ControlMouseUpEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoControlMouseUpEventHandler = class
    class function Create: _ControlMouseUpEventHandler;
    class function CreateRemote(const MachineName: string): _ControlMouseUpEventHandler;
  end;

// *********************************************************************//
// The Class CoControlMouseDownEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ControlMouseDownEventHandler exposed by              
// the CoClass ControlMouseDownEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoControlMouseDownEventHandler = class
    class function Create: _ControlMouseDownEventHandler;
    class function CreateRemote(const MachineName: string): _ControlMouseDownEventHandler;
  end;

// *********************************************************************//
// The Class CoControlMouseMoveEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ControlMouseMoveEventHandler exposed by              
// the CoClass ControlMouseMoveEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoControlMouseMoveEventHandler = class
    class function Create: _ControlMouseMoveEventHandler;
    class function CreateRemote(const MachineName: string): _ControlMouseMoveEventHandler;
  end;

// *********************************************************************//
// The Class CoControlKeyUpEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ControlKeyUpEventHandler exposed by              
// the CoClass ControlKeyUpEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoControlKeyUpEventHandler = class
    class function Create: _ControlKeyUpEventHandler;
    class function CreateRemote(const MachineName: string): _ControlKeyUpEventHandler;
  end;

// *********************************************************************//
// The Class CoControlKeyDownEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ControlKeyDownEventHandler exposed by              
// the CoClass ControlKeyDownEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoControlKeyDownEventHandler = class
    class function Create: _ControlKeyDownEventHandler;
    class function CreateRemote(const MachineName: string): _ControlKeyDownEventHandler;
  end;

// *********************************************************************//
// The Class CoControlKeyPressEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ControlKeyPressEventHandler exposed by              
// the CoClass ControlKeyPressEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoControlKeyPressEventHandler = class
    class function Create: _ControlKeyPressEventHandler;
    class function CreateRemote(const MachineName: string): _ControlKeyPressEventHandler;
  end;

// *********************************************************************//
// The Class CoScrollEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ScrollEventHandler exposed by              
// the CoClass ScrollEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoScrollEventHandler = class
    class function Create: _ScrollEventHandler;
    class function CreateRemote(const MachineName: string): _ScrollEventHandler;
  end;

// *********************************************************************//
// The Class CoOnAllItemsLoadedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _OnAllItemsLoadedEventHandler exposed by              
// the CoClass OnAllItemsLoadedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOnAllItemsLoadedEventHandler = class
    class function Create: _OnAllItemsLoadedEventHandler;
    class function CreateRemote(const MachineName: string): _OnAllItemsLoadedEventHandler;
  end;

// *********************************************************************//
// The Class CoItemCheckedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ItemCheckedEventHandler exposed by              
// the CoClass ItemCheckedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoItemCheckedEventHandler = class
    class function Create: _ItemCheckedEventHandler;
    class function CreateRemote(const MachineName: string): _ItemCheckedEventHandler;
  end;

// *********************************************************************//
// The Class CoItemClickedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ItemClickedEventHandler exposed by              
// the CoClass ItemClickedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoItemClickedEventHandler = class
    class function Create: _ItemClickedEventHandler;
    class function CreateRemote(const MachineName: string): _ItemClickedEventHandler;
  end;

// *********************************************************************//
// The Class CoItemDoubleClickedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ItemDoubleClickedEventHandler exposed by              
// the CoClass ItemDoubleClickedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoItemDoubleClickedEventHandler = class
    class function Create: _ItemDoubleClickedEventHandler;
    class function CreateRemote(const MachineName: string): _ItemDoubleClickedEventHandler;
  end;

// *********************************************************************//
// The Class CoItemSelectionChangedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ItemSelectionChangedEventHandler exposed by              
// the CoClass ItemSelectionChangedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoItemSelectionChangedEventHandler = class
    class function Create: _ItemSelectionChangedEventHandler;
    class function CreateRemote(const MachineName: string): _ItemSelectionChangedEventHandler;
  end;

// *********************************************************************//
// The Class CoItemMovedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _ItemMovedEventHandler exposed by              
// the CoClass ItemMovedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoItemMovedEventHandler = class
    class function Create: _ItemMovedEventHandler;
    class function CreateRemote(const MachineName: string): _ItemMovedEventHandler;
  end;

// *********************************************************************//
// The Class CoFileTypeNotSupportedEventHandler provides a Create and CreateRemote method to          
// create instances of the default interface _FileTypeNotSupportedEventHandler exposed by              
// the CoClass FileTypeNotSupportedEventHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFileTypeNotSupportedEventHandler = class
    class function Create: _FileTypeNotSupportedEventHandler;
    class function CreateRemote(const MachineName: string): _FileTypeNotSupportedEventHandler;
  end;

// *********************************************************************//
// The Class CoGdPictureEventsHandler provides a Create and CreateRemote method to          
// create instances of the default interface _GdPictureEventsHandler exposed by              
// the CoClass GdPictureEventsHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGdPictureEventsHandler = class
    class function Create: _GdPictureEventsHandler;
    class function CreateRemote(const MachineName: string): _GdPictureEventsHandler;
  end;

// *********************************************************************//
// The Class CoAfterSubstitutedFontArgs provides a Create and CreateRemote method to          
// create instances of the default interface _AfterSubstitutedFontArgs exposed by              
// the CoClass AfterSubstitutedFontArgs. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAfterSubstitutedFontArgs = class
    class function Create: _AfterSubstitutedFontArgs;
    class function CreateRemote(const MachineName: string): _AfterSubstitutedFontArgs;
  end;

// *********************************************************************//
// The Class CoBeforeAlternativeFontLookupArgs provides a Create and CreateRemote method to          
// create instances of the default interface _BeforeAlternativeFontLookupArgs exposed by              
// the CoClass BeforeAlternativeFontLookupArgs. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBeforeAlternativeFontLookupArgs = class
    class function Create: _BeforeAlternativeFontLookupArgs;
    class function CreateRemote(const MachineName: string): _BeforeAlternativeFontLookupArgs;
  end;

// *********************************************************************//
// The Class CoAnnotation provides a Create and CreateRemote method to          
// create instances of the default interface _Annotation exposed by              
// the CoClass Annotation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotation = class
    class function Create: _Annotation;
    class function CreateRemote(const MachineName: string): _Annotation;
  end;

// *********************************************************************//
// The Class CoAnnotationComment provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationComment exposed by              
// the CoClass AnnotationComment. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationComment = class
    class function Create: _AnnotationComment;
    class function CreateRemote(const MachineName: string): _AnnotationComment;
  end;

// *********************************************************************//
// The Class CoAnnotationConnectedLines provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationConnectedLines exposed by              
// the CoClass AnnotationConnectedLines. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationConnectedLines = class
    class function Create: _AnnotationConnectedLines;
    class function CreateRemote(const MachineName: string): _AnnotationConnectedLines;
  end;

// *********************************************************************//
// The Class CoAnnotationPolygon provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationPolygon exposed by              
// the CoClass AnnotationPolygon. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationPolygon = class
    class function Create: _AnnotationPolygon;
    class function CreateRemote(const MachineName: string): _AnnotationPolygon;
  end;

// *********************************************************************//
// The Class CoAnnotationCustom provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationCustom exposed by              
// the CoClass AnnotationCustom. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationCustom = class
    class function Create: _AnnotationCustom;
    class function CreateRemote(const MachineName: string): _AnnotationCustom;
  end;

// *********************************************************************//
// The Class CoAnnotationEllipse provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationEllipse exposed by              
// the CoClass AnnotationEllipse. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationEllipse = class
    class function Create: _AnnotationEllipse;
    class function CreateRemote(const MachineName: string): _AnnotationEllipse;
  end;

// *********************************************************************//
// The Class CoAnnotationEmbeddedImage provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationEmbeddedImage exposed by              
// the CoClass AnnotationEmbeddedImage. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationEmbeddedImage = class
    class function Create: _AnnotationEmbeddedImage;
    class function CreateRemote(const MachineName: string): _AnnotationEmbeddedImage;
  end;

// *********************************************************************//
// The Class CoAnnotationFreeHand provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationFreeHand exposed by              
// the CoClass AnnotationFreeHand. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationFreeHand = class
    class function Create: _AnnotationFreeHand;
    class function CreateRemote(const MachineName: string): _AnnotationFreeHand;
  end;

// *********************************************************************//
// The Class CoAnnotationFreeHandHighlighter provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationFreeHandHighlighter exposed by              
// the CoClass AnnotationFreeHandHighlighter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationFreeHandHighlighter = class
    class function Create: _AnnotationFreeHandHighlighter;
    class function CreateRemote(const MachineName: string): _AnnotationFreeHandHighlighter;
  end;

// *********************************************************************//
// The Class CoAnnotationFreeHandPolygon provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationFreeHandPolygon exposed by              
// the CoClass AnnotationFreeHandPolygon. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationFreeHandPolygon = class
    class function Create: _AnnotationFreeHandPolygon;
    class function CreateRemote(const MachineName: string): _AnnotationFreeHandPolygon;
  end;

// *********************************************************************//
// The Class CoAnnotationLine provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationLine exposed by              
// the CoClass AnnotationLine. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationLine = class
    class function Create: _AnnotationLine;
    class function CreateRemote(const MachineName: string): _AnnotationLine;
  end;

// *********************************************************************//
// The Class CoAnnotationLineArrow provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationLineArrow exposed by              
// the CoClass AnnotationLineArrow. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationLineArrow = class
    class function Create: _AnnotationLineArrow;
    class function CreateRemote(const MachineName: string): _AnnotationLineArrow;
  end;

// *********************************************************************//
// The Class CoAnnotationLink provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationLink exposed by              
// the CoClass AnnotationLink. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationLink = class
    class function Create: _AnnotationLink;
    class function CreateRemote(const MachineName: string): _AnnotationLink;
  end;

// *********************************************************************//
// The Class CoAnnotationRubberStamp provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationRubberStamp exposed by              
// the CoClass AnnotationRubberStamp. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationRubberStamp = class
    class function Create: _AnnotationRubberStamp;
    class function CreateRemote(const MachineName: string): _AnnotationRubberStamp;
  end;

// *********************************************************************//
// The Class CoAnnotationPolyRuler provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationPolyRuler exposed by              
// the CoClass AnnotationPolyRuler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationPolyRuler = class
    class function Create: _AnnotationPolyRuler;
    class function CreateRemote(const MachineName: string): _AnnotationPolyRuler;
  end;

// *********************************************************************//
// The Class CoAnnotationRectangle provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationRectangle exposed by              
// the CoClass AnnotationRectangle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationRectangle = class
    class function Create: _AnnotationRectangle;
    class function CreateRemote(const MachineName: string): _AnnotationRectangle;
  end;

// *********************************************************************//
// The Class CoAnnotationRectangleHighlighter provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationRectangleHighlighter exposed by              
// the CoClass AnnotationRectangleHighlighter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationRectangleHighlighter = class
    class function Create: _AnnotationRectangleHighlighter;
    class function CreateRemote(const MachineName: string): _AnnotationRectangleHighlighter;
  end;

// *********************************************************************//
// The Class CoAnnotationRedaction provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationRedaction exposed by              
// the CoClass AnnotationRedaction. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationRedaction = class
    class function Create: _AnnotationRedaction;
    class function CreateRemote(const MachineName: string): _AnnotationRedaction;
  end;

// *********************************************************************//
// The Class CoAnnotationRuler provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationRuler exposed by              
// the CoClass AnnotationRuler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationRuler = class
    class function Create: _AnnotationRuler;
    class function CreateRemote(const MachineName: string): _AnnotationRuler;
  end;

// *********************************************************************//
// The Class CoAnnotationStickyNote provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationStickyNote exposed by              
// the CoClass AnnotationStickyNote. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationStickyNote = class
    class function Create: _AnnotationStickyNote;
    class function CreateRemote(const MachineName: string): _AnnotationStickyNote;
  end;

// *********************************************************************//
// The Class CoAnnotationText provides a Create and CreateRemote method to          
// create instances of the default interface _AnnotationText exposed by              
// the CoClass AnnotationText. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationText = class
    class function Create: _AnnotationText;
    class function CreateRemote(const MachineName: string): _AnnotationText;
  end;

// *********************************************************************//
// The Class CoGdPictureRectangle provides a Create and CreateRemote method to          
// create instances of the default interface _GdPictureRectangle exposed by              
// the CoClass GdPictureRectangle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGdPictureRectangle = class
    class function Create: _GdPictureRectangle;
    class function CreateRemote(const MachineName: string): _GdPictureRectangle;
  end;

// *********************************************************************//
// The Class CoGdPictureRectangleF provides a Create and CreateRemote method to          
// create instances of the default interface _GdPictureRectangleF exposed by              
// the CoClass GdPictureRectangleF. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGdPictureRectangleF = class
    class function Create: _GdPictureRectangleF;
    class function CreateRemote(const MachineName: string): _GdPictureRectangleF;
  end;

implementation

uses ComObj;

class function CoGdPictureDocumentConverter.Create: IGdPictureDocumentConverter;
begin
  Result := CreateComObject(CLASS_GdPictureDocumentConverter) as IGdPictureDocumentConverter;
end;

class function CoGdPictureDocumentConverter.CreateRemote(const MachineName: string): IGdPictureDocumentConverter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GdPictureDocumentConverter) as IGdPictureDocumentConverter;
end;

class function CoGdPictureDocumentUtilities.Create: IGdPictureDocumentUtilities;
begin
  Result := CreateComObject(CLASS_GdPictureDocumentUtilities) as IGdPictureDocumentUtilities;
end;

class function CoGdPictureDocumentUtilities.CreateRemote(const MachineName: string): IGdPictureDocumentUtilities;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GdPictureDocumentUtilities) as IGdPictureDocumentUtilities;
end;

class function CoGdPictureImaging.Create: IGdPictureImaging;
begin
  Result := CreateComObject(CLASS_GdPictureImaging) as IGdPictureImaging;
end;

class function CoGdPictureImaging.CreateRemote(const MachineName: string): IGdPictureImaging;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GdPictureImaging) as IGdPictureImaging;
end;

class function CoGdPictureOCR.Create: IGdPictureOCR;
begin
  Result := CreateComObject(CLASS_GdPictureOCR) as IGdPictureOCR;
end;

class function CoGdPictureOCR.CreateRemote(const MachineName: string): IGdPictureOCR;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GdPictureOCR) as IGdPictureOCR;
end;

class function CoSpreadsheetOptions.Create: ISpreadsheetOptions;
begin
  Result := CreateComObject(CLASS_SpreadsheetOptions) as ISpreadsheetOptions;
end;

class function CoSpreadsheetOptions.CreateRemote(const MachineName: string): ISpreadsheetOptions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SpreadsheetOptions) as ISpreadsheetOptions;
end;

class function CoPdfOcrOptions.Create: IPdfOcrOptions;
begin
  Result := CreateComObject(CLASS_PdfOcrOptions) as IPdfOcrOptions;
end;

class function CoPdfOcrOptions.CreateRemote(const MachineName: string): IPdfOcrOptions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PdfOcrOptions) as IPdfOcrOptions;
end;

class function CoSmartRedactionOptions.Create: ISmartRedactionOptions;
begin
  Result := CreateComObject(CLASS_SmartRedactionOptions) as ISmartRedactionOptions;
end;

class function CoSmartRedactionOptions.CreateRemote(const MachineName: string): ISmartRedactionOptions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SmartRedactionOptions) as ISmartRedactionOptions;
end;

class function CoGdPicturePDFReducer.Create: IGdPicturePDFReducer;
begin
  Result := CreateComObject(CLASS_GdPicturePDFReducer) as IGdPicturePDFReducer;
end;

class function CoGdPicturePDFReducer.CreateRemote(const MachineName: string): IGdPicturePDFReducer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GdPicturePDFReducer) as IGdPicturePDFReducer;
end;

class function CoGdPictureSegmenter.Create: IGdPictureSegmenter;
begin
  Result := CreateComObject(CLASS_GdPictureSegmenter) as IGdPictureSegmenter;
end;

class function CoGdPictureSegmenter.CreateRemote(const MachineName: string): IGdPictureSegmenter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GdPictureSegmenter) as IGdPictureSegmenter;
end;

class function CoLicenseManager.Create: ILicenseManager;
begin
  Result := CreateComObject(CLASS_LicenseManager) as ILicenseManager;
end;

class function CoLicenseManager.CreateRemote(const MachineName: string): ILicenseManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LicenseManager) as ILicenseManager;
end;

class function CoPDFReducerConfiguration.Create: IPDFReducerConfiguration;
begin
  Result := CreateComObject(CLASS_PDFReducerConfiguration) as IPDFReducerConfiguration;
end;

class function CoPDFReducerConfiguration.CreateRemote(const MachineName: string): IPDFReducerConfiguration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PDFReducerConfiguration) as IPDFReducerConfiguration;
end;

procedure TAnnotationEditor.InitControlData;
const
  CEventDispIDs: array [0..1] of DWORD = (
    $00000001, $00000002);
  CControlData: TControlData2 = (
    ClassID: '{0CEB68BB-FEF5-3F6C-9F82-7C6B1F524A3F}';
    EventIID: '{69CD38B0-3CA1-48D3-B1AA-21EBB9C78932}';
    EventCount: 2;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80004002*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnPropertyChanged) - Cardinal(Self);
end;

procedure TAnnotationEditor.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IAnnotationEditor;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAnnotationEditor.GetControlInterface: IAnnotationEditor;
begin
  CreateControl;
  Result := FIntf;
end;

procedure TAnnotationEditor.Dispose;
begin
  DefaultInterface.Dispose;
end;

procedure TAnnotationEditor.InitFromAnnotationManager(const AnnotationManager: IAnnotationManager);
begin
  DefaultInterface.InitFromAnnotationManager(AnnotationManager);
end;

procedure TAnnotationEditor.LoadFromGdViewer(GdViewer: OleVariant);
begin
  DefaultInterface.LoadFromGdViewer(GdViewer);
end;

procedure TAnnotationEditor.Refresh;
begin
  DefaultInterface.Refresh;
end;

procedure TAnnotationEditor.ReleaseEventsTarget;
begin
  DefaultInterface.ReleaseEventsTarget;
end;

class function CoGdPicturePDF.Create: IGdPicturePDF;
begin
  Result := CreateComObject(CLASS_GdPicturePDF) as IGdPicturePDF;
end;

class function CoGdPicturePDF.CreateRemote(const MachineName: string): IGdPicturePDF;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GdPicturePDF) as IGdPicturePDF;
end;

class function CoAnnotationManager.Create: IAnnotationManager;
begin
  Result := CreateComObject(CLASS_AnnotationManager) as IAnnotationManager;
end;

class function CoAnnotationManager.CreateRemote(const MachineName: string): IAnnotationManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationManager) as IAnnotationManager;
end;

procedure TBookmarksTree.InitControlData;
const
  CEventDispIDs: array [0..1] of DWORD = (
    $00000001, $00000002);
  CControlData: TControlData2 = (
    ClassID: '{8AFC06F6-7848-37B5-8044-97A2EBECF8BB}';
    EventIID: '{BAF46C9E-C563-4436-9BAC-C029B7A18E0C}';
    EventCount: 2;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80004002*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnNodeSelected) - Cardinal(Self);
end;

procedure TBookmarksTree.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IBookmarksTree;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TBookmarksTree.GetControlInterface: IBookmarksTree;
begin
  CreateControl;
  Result := FIntf;
end;

function TBookmarksTree.Get_GdViewer: IGdViewer;
begin
    Result := DefaultInterface.GdViewer;
end;

procedure TBookmarksTree._Set_GdViewer(const pRetVal: IGdViewer);
  { Warning: The property GdViewer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GdViewer := pRetVal;
end;

procedure TBookmarksTree.CollapseAll;
begin
  DefaultInterface.CollapseAll;
end;

procedure TBookmarksTree.Dispose;
begin
  DefaultInterface.Dispose;
end;

procedure TBookmarksTree.ExpandAll;
begin
  DefaultInterface.ExpandAll;
end;

procedure TBookmarksTree.LoadFromGdViewer(GdViewer: OleVariant);
begin
  DefaultInterface.LoadFromGdViewer(GdViewer);
end;

procedure TBookmarksTree.Refresh;
begin
  DefaultInterface.Refresh;
end;

procedure TBookmarksTree.ReloadBookmarks;
begin
  DefaultInterface.ReloadBookmarks;
end;

procedure TBookmarksTree.SetDefaultText(StringID: Integer; const Text: WideString);
begin
  DefaultInterface.SetDefaultText(StringID, Text);
end;

function TBookmarksTree.SetNodesBitmap(ImageID: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SetNodesBitmap(ImageID);
end;

procedure TBookmarksTree.ReleaseEventsTarget;
begin
  DefaultInterface.ReleaseEventsTarget;
end;

procedure TThumbnailEx.InitControlData;
const
  CEventDispIDs: array [0..17] of DWORD = (
    $00000001, $00000002, $00000003, $00000004, $00000005, $00000006,
    $00000007, $00000008, $00000009, $0000000A, $0000000B, $0000000C,
    $0000000D, $0000000E, $0000000F, $00000010, $00000011, $00000012);
  CControlData: TControlData2 = (
    ClassID: '{DBED514A-A877-398F-AE2A-A1EDE5F43724}';
    EventIID: '{C6B5D334-094A-4DD9-9827-780B09C418CA}';
    EventCount: 18;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80004002*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnControlDoubleClick) - Cardinal(Self);
end;

procedure TThumbnailEx.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IThumbnailEx;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TThumbnailEx.GetControlInterface: IThumbnailEx;
begin
  CreateControl;
  Result := FIntf;
end;

function TThumbnailEx.AddItemFromFile(const FilePath: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.AddItemFromFile(FilePath);
end;

function TThumbnailEx.AddItemFromGdPictureImage(ImageID: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.AddItemFromGdPictureImage(ImageID);
end;

function TThumbnailEx.AddItemFromGdPictureImage_2(ImageID: Integer; const Text: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.AddItemFromGdPictureImage_2(ImageID, Text);
end;

function TThumbnailEx.ARGBI(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer;
begin
  Result := DefaultInterface.ARGBI(Alpha, Red, Green, Blue);
end;

procedure TThumbnailEx.ClearAllItems;
begin
  DefaultInterface.ClearAllItems;
end;

procedure TThumbnailEx.Dispose;
begin
  DefaultInterface.Dispose;
end;

procedure TThumbnailEx.EnsureVisibleItem(ItemIdx: Integer);
begin
  DefaultInterface.EnsureVisibleItem(ItemIdx);
end;

function TThumbnailEx.FindNearestItem(Direction: SearchDirectionHint; X: Integer; Y: Integer): Integer;
begin
  Result := DefaultInterface.FindNearestItem(Direction, X, Y);
end;

function TThumbnailEx.GetItemAt(X: Integer; Y: Integer): Integer;
begin
  Result := DefaultInterface.GetItemAt(X, Y);
end;

function TThumbnailEx.GetItemBitmap(ItemIdx: Integer): Integer;
begin
  Result := DefaultInterface.GetItemBitmap(ItemIdx);
end;

function TThumbnailEx.GetItemCheckState(ItemIdx: Integer): WordBool;
begin
  Result := DefaultInterface.GetItemCheckState(ItemIdx);
end;

function TThumbnailEx.GetItemFileSource(ItemIdx: Integer): WideString;
begin
  Result := DefaultInterface.GetItemFileSource(ItemIdx);
end;

function TThumbnailEx.GetItemFocusState(ItemIdx: Integer): WordBool;
begin
  Result := DefaultInterface.GetItemFocusState(ItemIdx);
end;

function TThumbnailEx.GetItemSelectState(ItemIdx: Integer): WordBool;
begin
  Result := DefaultInterface.GetItemSelectState(ItemIdx);
end;

function TThumbnailEx.GetItemTag(ItemIdx: Integer): OleVariant;
begin
  Result := DefaultInterface.GetItemTag(ItemIdx);
end;

function TThumbnailEx.GetItemText(ItemIdx: Integer): WideString;
begin
  Result := DefaultInterface.GetItemText(ItemIdx);
end;

function TThumbnailEx.InsertItemFromFile(const FilePath: WideString; Position: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.InsertItemFromFile(FilePath, Position);
end;

function TThumbnailEx.InsertItemFromGdPictureImage(ImageID: Integer; const Text: WideString; 
                                                   Position: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.InsertItemFromGdPictureImage(ImageID, Text, Position);
end;

function TThumbnailEx.LoadFromDirectory(const Path: WideString; IncludeSubFolders: WordBool): GdPictureStatus;
begin
  Result := DefaultInterface.LoadFromDirectory(Path, IncludeSubFolders);
end;

function TThumbnailEx.LoadFromDirectory_2(const Path: WideString; IncludeSubFolders: WordBool; 
                                          const SearchPattern: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.LoadFromDirectory_2(Path, IncludeSubFolders, SearchPattern);
end;

function TThumbnailEx.LoadFromDirectory_3(const Path: WideString; IncludeSubFolders: WordBool; 
                                          const SearchPatterns: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.LoadFromDirectory_3(Path, IncludeSubFolders, SearchPatterns);
end;

function TThumbnailEx.LoadFromFiles(var Files: PSafeArray): GdPictureStatus;
begin
  Result := DefaultInterface.LoadFromFiles(Files);
end;

function TThumbnailEx.LoadFromGdPictureImage(ImageID: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.LoadFromGdPictureImage(ImageID);
end;

function TThumbnailEx.LoadFromGdPicturePDF(const PDF: IGdPicturePDF): GdPictureStatus;
begin
  Result := DefaultInterface.LoadFromGdPicturePDF(PDF);
end;

function TThumbnailEx.LoadFromGdViewer(GdViewer: OleVariant): GdPictureStatus;
begin
  Result := DefaultInterface.LoadFromGdViewer(GdViewer);
end;

procedure TThumbnailEx.LoadNewThumbnails;
begin
  DefaultInterface.LoadNewThumbnails;
end;

procedure TThumbnailEx.MoveItem(ItemIdx: Integer; DstIdx: Integer);
begin
  DefaultInterface.MoveItem(ItemIdx, DstIdx);
end;

procedure TThumbnailEx.RedrawItem(ItemIdx: Integer);
begin
  DefaultInterface.RedrawItem(ItemIdx);
end;

procedure TThumbnailEx.Refresh;
begin
  DefaultInterface.Refresh;
end;

function TThumbnailEx.ReleaseGdPictureImage(ImageID: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.ReleaseGdPictureImage(ImageID);
end;

procedure TThumbnailEx.ReloadThumbnails;
begin
  DefaultInterface.ReloadThumbnails;
end;

procedure TThumbnailEx.RemoveItem(ItemIdx: Integer);
begin
  DefaultInterface.RemoveItem(ItemIdx);
end;

function TThumbnailEx.SelectItem(ItemIdx: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SelectItem(ItemIdx);
end;

function TThumbnailEx.SetItemBackgroundColor(ItemIdx: Integer; Color: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SetItemBackgroundColor(ItemIdx, Color);
end;

function TThumbnailEx.SetItemBitmap(ItemIdx: Integer; ImageID: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SetItemBitmap(ItemIdx, ImageID);
end;

function TThumbnailEx.SetItemCheckState(ItemIdx: Integer; Checked: WordBool): GdPictureStatus;
begin
  Result := DefaultInterface.SetItemCheckState(ItemIdx, Checked);
end;

function TThumbnailEx.SetItemSelectState(ItemIdx: Integer; Selected: WordBool): GdPictureStatus;
begin
  Result := DefaultInterface.SetItemSelectState(ItemIdx, Selected);
end;

function TThumbnailEx.SetItemsFont(const FontName: WideString; FontSize: Single; 
                                   FontStyle: FontStyle): GdPictureStatus;
begin
  Result := DefaultInterface.SetItemsFont(FontName, FontSize, FontStyle);
end;

procedure TThumbnailEx.SetItemsSize(Width: Integer; Height: Integer);
begin
  DefaultInterface.SetItemsSize(Width, Height);
end;

procedure TThumbnailEx.SetItemsSpacing(Horizontal: Integer; Vertical: Integer);
begin
  DefaultInterface.SetItemsSpacing(Horizontal, Vertical);
end;

function TThumbnailEx.SetItemTag(ItemIdx: Integer; Tag: OleVariant): GdPictureStatus;
begin
  Result := DefaultInterface.SetItemTag(ItemIdx, Tag);
end;

function TThumbnailEx.SetItemText(ItemIdx: Integer; const Text: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.SetItemText(ItemIdx, Text);
end;

procedure TThumbnailEx.SwapItemsBitmap(Item1Idx: Integer; Item2Idx: Integer);
begin
  DefaultInterface.SwapItemsBitmap(Item1Idx, Item2Idx);
end;

procedure TThumbnailEx.SwapItemsBitmap_2(Item1Idx: Integer; Item2Idx: Integer; SwapText: WordBool);
begin
  DefaultInterface.SwapItemsBitmap_2(Item1Idx, Item2Idx, SwapText);
end;

procedure TThumbnailEx.ReleaseEventsTarget;
begin
  DefaultInterface.ReleaseEventsTarget;
end;

function TThumbnailEx.SetItemToolTipText(ItemIdx: Integer; const ToolTipText: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.SetItemToolTipText(ItemIdx, ToolTipText);
end;

function TThumbnailEx.LoadAllItems: GdPictureStatus;
begin
  Result := DefaultInterface.LoadAllItems;
end;

function TThumbnailEx.UnselectAllItems: GdPictureStatus;
begin
  Result := DefaultInterface.UnselectAllItems;
end;

procedure TGdViewer.InitControlData;
const
  CEventDispIDs: array [0..47] of DWORD = (
    $00000001, $00000002, $00000003, $00000004, $00000005, $00000006,
    $00000007, $00000008, $00000009, $0000000A, $0000000B, $0000000C,
    $0000000D, $0000000E, $0000000F, $00000011, $00000012, $00000013,
    $00000010, $0000001B, $00000014, $00000015, $00000016, $00000017,
    $00000018, $00000019, $0000001A, $0000001C, $0000001D, $0000001E,
    $0000001F, $00000020, $00000021, $00000022, $00000023, $00000024,
    $00000025, $00000026, $00000027, $00000028, $00000029, $0000002A,
    $0000002B, $0000002C, $0000002D, $0000002E, $0000002F, $00000030);
  CControlData: TControlData2 = (
    ClassID: '{0CC0D923-B9ED-310C-B453-D1A59F25712C}';
    EventIID: '{49B9A7C8-DA4F-47D5-95EB-A973DC48D461}';
    EventCount: 48;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80004002*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnPdfUriNavigation) - Cardinal(Self);
end;

procedure TGdViewer.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IGdViewer;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TGdViewer.GetControlInterface: IGdViewer;
begin
  CreateControl;
  Result := FIntf;
end;

procedure TGdViewer.AddConnectedLinesAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                                      Opacity: Single);
begin
  DefaultInterface.AddConnectedLinesAnnotInteractive(BorderColor, BorderWidth, Opacity);
end;

procedure TGdViewer.AddEllipseAnnotInteractive(Fill: WordBool; Stroke: WordBool; 
                                               BackColor: Integer; BorderColor: Integer; 
                                               BorderWidth: Single; Opacity: Single);
begin
  DefaultInterface.AddEllipseAnnotInteractive(Fill, Stroke, BackColor, BorderColor, BorderWidth, 
                                              Opacity);
end;

procedure TGdViewer.AddEmbeddedImageAnnotInteractive(ImageID: Integer; Stroke: WordBool; 
                                                     BorderColor: Integer; BorderWidth: Single; 
                                                     Opacity: Single);
begin
  DefaultInterface.AddEmbeddedImageAnnotInteractive(ImageID, Stroke, BorderColor, BorderWidth, 
                                                    Opacity);
end;

procedure TGdViewer.AddEmbeddedImageAnnotInteractive_2(const ImagePath: WideString; 
                                                       Stroke: WordBool; BorderColor: Integer; 
                                                       BorderWidth: Single; Opacity: Single);
begin
  DefaultInterface.AddEmbeddedImageAnnotInteractive_2(ImagePath, Stroke, BorderColor, BorderWidth, 
                                                      Opacity);
end;

procedure TGdViewer.AddFreeHandAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                                Opacity: Single);
begin
  DefaultInterface.AddFreeHandAnnotInteractive(BorderColor, BorderWidth, Opacity);
end;

procedure TGdViewer.AddFreeHandAnnotInteractive_2(BorderColor: Integer; BorderWidth: Single; 
                                                  Opacity: Single; ContinuousMode: WordBool);
begin
  DefaultInterface.AddFreeHandAnnotInteractive_2(BorderColor, BorderWidth, Opacity, ContinuousMode);
end;

procedure TGdViewer.AddFreeHandHighlighterAnnotInteractive(BorderColor: Integer; BorderWidth: Single);
begin
  DefaultInterface.AddFreeHandHighlighterAnnotInteractive(BorderColor, BorderWidth);
end;

procedure TGdViewer.AddFreeHandHighlighterAnnotInteractive_2(BorderColor: Integer; 
                                                             BorderWidth: Single; 
                                                             ContinuousMode: WordBool);
begin
  DefaultInterface.AddFreeHandHighlighterAnnotInteractive_2(BorderColor, BorderWidth, ContinuousMode);
end;

procedure TGdViewer.AddFreeHandPolygonAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                                       BackColor: Integer; Opacity: Single);
begin
  DefaultInterface.AddFreeHandPolygonAnnotInteractive(BorderColor, BorderWidth, BackColor, Opacity);
end;

procedure TGdViewer.AddLineAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                            Opacity: Single);
begin
  DefaultInterface.AddLineAnnotInteractive(BorderColor, BorderWidth, Opacity);
end;

procedure TGdViewer.AddLineArrowAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                                 ArrowWidth: Single; ArrowHeight: Single; 
                                                 ArrowFilled: WordBool; Opacity: Single);
begin
  DefaultInterface.AddLineArrowAnnotInteractive(BorderColor, BorderWidth, ArrowWidth, ArrowHeight, 
                                                ArrowFilled, Opacity);
end;

procedure TGdViewer.AddLineArrowAnnotInteractive_2(BorderColor: Integer; BorderWidth: Single; 
                                                   ArrowWidth: Single; ArrowHeight: Single; 
                                                   ArrowFilled: WordBool; Opacity: Single; 
                                                   Reversed: WordBool);
begin
  DefaultInterface.AddLineArrowAnnotInteractive_2(BorderColor, BorderWidth, ArrowWidth, 
                                                  ArrowHeight, ArrowFilled, Opacity, Reversed);
end;

procedure TGdViewer.AddLinkAnnotationInteractive(const Text: WideString; const Link: WideString; 
                                                 ForeColor: Integer; HoverForeColor: Integer; 
                                                 const FontName: WideString; FontStyle: FontStyle; 
                                                 HoverFontStyle: FontStyle; Opacity: Single; 
                                                 Rotation: Single);
begin
  DefaultInterface.AddLinkAnnotationInteractive(Text, Link, ForeColor, HoverForeColor, FontName, 
                                                FontStyle, HoverFontStyle, Opacity, Rotation);
end;

procedure TGdViewer.AddPolygonAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                               BackColor: Integer; Opacity: Single);
begin
  DefaultInterface.AddPolygonAnnotInteractive(BorderColor, BorderWidth, BackColor, Opacity);
end;

procedure TGdViewer.AddPolyRulerAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                                 Opacity: Single; MeasurementUnit: UnitMode);
begin
  DefaultInterface.AddPolyRulerAnnotInteractive(BorderColor, BorderWidth, Opacity, MeasurementUnit);
end;

procedure TGdViewer.AddRectangleAnnotInteractive(Fill: WordBool; Stroke: WordBool; 
                                                 BackColor: Integer; BorderColor: Integer; 
                                                 BorderWidth: Single; Opacity: Single);
begin
  DefaultInterface.AddRectangleAnnotInteractive(Fill, Stroke, BackColor, BorderColor, BorderWidth, 
                                                Opacity);
end;

procedure TGdViewer.AddRectangleHighlighterAnnotInteractive(BackColor: Integer);
begin
  DefaultInterface.AddRectangleHighlighterAnnotInteractive(BackColor);
end;

function TGdViewer.AddRegion(const Name: WideString; Left: Integer; Top: Integer; Width: Integer; 
                             Height: Integer; MixMode: ForegroundMixMode; RegionColor: Integer): Integer;
begin
  Result := DefaultInterface.AddRegion(Name, Left, Top, Width, Height, MixMode, RegionColor);
end;

function TGdViewer.AddRegionInches(const Name: WideString; Left: Single; Top: Single; 
                                   Width: Single; Height: Single; MixMode: ForegroundMixMode; 
                                   RegionColor: Integer): Integer;
begin
  Result := DefaultInterface.AddRegionInches(Name, Left, Top, Width, Height, MixMode, RegionColor);
end;

procedure TGdViewer.AddRubberStampAnnotInteractive(const Text: WideString; ForeColor: Integer; 
                                                   const FontName: WideString; 
                                                   FontStyle: FontStyle; BorderColor: Integer; 
                                                   BorderWidth: Single; Opacity: Single; 
                                                   Rotation: Single);
begin
  DefaultInterface.AddRubberStampAnnotInteractive(Text, ForeColor, FontName, FontStyle, 
                                                  BorderColor, BorderWidth, Opacity, Rotation);
end;

procedure TGdViewer.AddRulerAnnotInteractive(BorderColor: Integer; BorderWidth: Single; 
                                             Opacity: Single; MeasurementUnit: UnitMode);
begin
  DefaultInterface.AddRulerAnnotInteractive(BorderColor, BorderWidth, Opacity, MeasurementUnit);
end;

procedure TGdViewer.AddStickyNoteAnnotationInteractive(const Text: WideString; ForeColor: Integer; 
                                                       const FontName: WideString; 
                                                       FontStyle: FontStyle; FontSize: Single; 
                                                       Opacity: Single; Rotation: Single);
begin
  DefaultInterface.AddStickyNoteAnnotationInteractive(Text, ForeColor, FontName, FontStyle, 
                                                      FontSize, Opacity, Rotation);
end;

procedure TGdViewer.AddTextAnnotationInteractive(const Text: WideString; ForeColor: Integer; 
                                                 const FontName: WideString; FontStyle: FontStyle; 
                                                 FontSize: Single; Fill: WordBool; 
                                                 BorderColor: Integer; BackColor: Integer; 
                                                 Opacity: Single; Rotation: Single);
begin
  DefaultInterface.AddTextAnnotationInteractive(Text, ForeColor, FontName, FontStyle, FontSize, 
                                                Fill, BorderColor, BackColor, Opacity, Rotation);
end;

function TGdViewer.ARGBI(Alpha: Byte; Red: Byte; Green: Byte; Blue: Byte): Integer;
begin
  Result := DefaultInterface.ARGBI(Alpha, Red, Green, Blue);
end;

function TGdViewer.BurnAnnotationsToPage(RemoveInitialAnnots: WordBool): GdPictureStatus;
begin
  Result := DefaultInterface.BurnAnnotationsToPage(RemoveInitialAnnots);
end;

function TGdViewer.BurnAnnotationsToPage_2(RemoveInitialAnnots: WordBool; 
                                           Intent: GdPictureOutputIntent): GdPictureStatus;
begin
  Result := DefaultInterface.BurnAnnotationsToPage_2(RemoveInitialAnnots, Intent);
end;

function TGdViewer.BurnAnnotationsToPage_3(RemoveInitialAnnots: WordBool; VectorMode: WordBool): GdPictureStatus;
begin
  Result := DefaultInterface.BurnAnnotationsToPage_3(RemoveInitialAnnots, VectorMode);
end;

function TGdViewer.CancelLastAnnotInteractiveAdd: GdPictureStatus;
begin
  Result := DefaultInterface.CancelLastAnnotInteractiveAdd;
end;

function TGdViewer.TerminateLastAnnotInteractiveAdd: GdPictureStatus;
begin
  Result := DefaultInterface.TerminateLastAnnotInteractiveAdd;
end;

procedure TGdViewer.CenterOnRect;
begin
  DefaultInterface.CenterOnRect;
end;

procedure TGdViewer.Clear;
begin
  DefaultInterface.Clear;
end;

procedure TGdViewer.ClearCache;
begin
  DefaultInterface.ClearCache;
end;

procedure TGdViewer.ClearRect;
begin
  DefaultInterface.ClearRect;
end;

procedure TGdViewer.ClearSelectedText;
begin
  DefaultInterface.ClearSelectedText;
end;

procedure TGdViewer.CloseDocument;
begin
  DefaultInterface.CloseDocument;
end;

procedure TGdViewer.CloseDocument_2(NoCLear: WordBool);
begin
  DefaultInterface.CloseDocument_2(NoCLear);
end;

procedure TGdViewer.CoordDocumentInchToViewerPixel(DocumentLeft: Double; DocumentTop: Double; 
                                                   var ViewerLeft: Integer; var ViewerTop: Integer);
begin
  DefaultInterface.CoordDocumentInchToViewerPixel(DocumentLeft, DocumentTop, ViewerLeft, ViewerTop);
end;

procedure TGdViewer.CoordDocumentToViewer(DocumentLeft: Integer; DocumentTop: Integer; 
                                          var ViewerLeft: Integer; var ViewerTop: Integer);
begin
  DefaultInterface.CoordDocumentToViewer(DocumentLeft, DocumentTop, ViewerLeft, ViewerTop);
end;

procedure TGdViewer.CoordViewerPixelToDocumentInch(ViewerLeft: Integer; ViewerTop: Integer; 
                                                   var DocumentLeft: Double; var DocumentTop: Double);
begin
  DefaultInterface.CoordViewerPixelToDocumentInch(ViewerLeft, ViewerTop, DocumentLeft, DocumentTop);
end;

procedure TGdViewer.CoordViewerToDocument(ViewerLeft: Integer; ViewerTop: Integer; 
                                          var DocumentLeft: Integer; var DocumentTop: Integer);
begin
  DefaultInterface.CoordViewerToDocument(ViewerLeft, ViewerTop, DocumentLeft, DocumentTop);
end;

function TGdViewer.CopyRegionToClipboard(SrcLeft: Integer; SrcTop: Integer; Width: Integer; 
                                         Height: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.CopyRegionToClipboard(SrcLeft, SrcTop, Width, Height);
end;

function TGdViewer.CopyRegionToGdPictureImage(SrcLeft: Integer; SrcTop: Integer; Width: Integer; 
                                              Height: Integer): Integer;
begin
  Result := DefaultInterface.CopyRegionToGdPictureImage(SrcLeft, SrcTop, Width, Height);
end;

function TGdViewer.CopyToClipboard: GdPictureStatus;
begin
  Result := DefaultInterface.CopyToClipboard;
end;

procedure TGdViewer.DeleteAnnotation(AnnotationIdx: Integer);
begin
  DefaultInterface.DeleteAnnotation(AnnotationIdx);
end;

function TGdViewer.DisplayFirstPage: GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFirstPage;
end;

function TGdViewer.DisplayFromByteArray(var Data: PSafeArray): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromByteArray(Data);
end;

function TGdViewer.DisplayFromClipboard: GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromClipboard;
end;

function TGdViewer.DisplayFromFile(const FilePath: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromFile(FilePath);
end;

function TGdViewer.DisplayFromFile_2(const FilePath: WideString; const Password: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromFile_2(FilePath, Password);
end;

function TGdViewer.DisplayFromFTP(const Host: WideString; const Path: WideString; 
                                  const Login: WideString; const Password: WideString; 
                                  FTPPort: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromFTP(Host, Path, Login, Password, FTPPort);
end;

function TGdViewer.DisplayFromFTP_2(const Uri: WideString; const Login: WideString; 
                                    const Password: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromFTP_2(Uri, Login, Password);
end;

function TGdViewer.DisplayFromGdPictureImage(ImageID: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromGdPictureImage(ImageID);
end;

function TGdViewer.DisplayFromGdPicturePDF(const PDF: IGdPicturePDF): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromGdPicturePDF(PDF);
end;

function TGdViewer.DisplayFromHTTP(const Host: WideString; const Path: WideString; HTTPPort: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromHTTP(Host, Path, HTTPPort);
end;

procedure TGdViewer.DisplayFromHTTPStop;
begin
  DefaultInterface.DisplayFromHTTPStop;
end;

function TGdViewer.DisplayFromMemory(hMem: Integer; Length: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromMemory(hMem, Length);
end;

function TGdViewer.DisplayFromHTTP_2(const Uri: WideString; const Login: WideString; 
                                     const Password: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromHTTP_2(Uri, Login, Password);
end;

function TGdViewer.DisplayFromIStream(const Stream: IUnknown; const Password: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromIStream(Stream, Password);
end;

function TGdViewer.DisplayFromString(const Data: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromString(Data);
end;

function TGdViewer.DisplayFromDIB(Dib: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayFromDIB(Dib);
end;

function TGdViewer.DisplayLastPage: GdPictureStatus;
begin
  Result := DefaultInterface.DisplayLastPage;
end;

function TGdViewer.DisplayNextPage: GdPictureStatus;
begin
  Result := DefaultInterface.DisplayNextPage;
end;

function TGdViewer.DisplayPage(Page: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayPage(Page);
end;

function TGdViewer.DisplayPreviousPage: GdPictureStatus;
begin
  Result := DefaultInterface.DisplayPreviousPage;
end;

function TGdViewer.DisplayTextEditBox(AnnotationIdx: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.DisplayTextEditBox(AnnotationIdx);
end;

procedure TGdViewer.Dispose;
begin
  DefaultInterface.Dispose;
end;

function TGdViewer.EnsureRegionVisibility(RegionID: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.EnsureRegionVisibility(RegionID);
end;

function TGdViewer.GetAnnotationCount: Integer;
begin
  Result := DefaultInterface.GetAnnotationCount;
end;

function TGdViewer.GetAnnotationFromIdx(AnnotationIdx: Integer): _Annotation;
begin
  Result := DefaultInterface.GetAnnotationFromIdx(AnnotationIdx);
end;

function TGdViewer.GetAnnotationManager: IAnnotationManager;
begin
  Result := DefaultInterface.GetAnnotationManager;
end;

procedure TGdViewer.GetDisplayedArea(var Left: Integer; var Top: Integer; var Width: Integer; 
                                     var Height: Integer);
begin
  DefaultInterface.GetDisplayedArea(Left, Top, Width, Height);
end;

procedure TGdViewer.GetDisplayedAreaInches(var Left: Single; var Top: Single; var Width: Single; 
                                           var Height: Single);
begin
  DefaultInterface.GetDisplayedAreaInches(Left, Top, Width, Height);
end;

function TGdViewer.GetDocumentLeft: Integer;
begin
  Result := DefaultInterface.GetDocumentLeft;
end;

function TGdViewer.GetDocumentTop: Integer;
begin
  Result := DefaultInterface.GetDocumentTop;
end;

function TGdViewer.GetDocumentType: DocumentType;
begin
  Result := DefaultInterface.GetDocumentType;
end;

function TGdViewer.GetHScrollBarMaxPosition: Integer;
begin
  Result := DefaultInterface.GetHScrollBarMaxPosition;
end;

function TGdViewer.GetHScrollBarPosition: Integer;
begin
  Result := DefaultInterface.GetHScrollBarPosition;
end;

function TGdViewer.GetLastPath: WideString;
begin
  Result := DefaultInterface.GetLastPath;
end;

function TGdViewer.GetLastTransferError: WideString;
begin
  Result := DefaultInterface.GetLastTransferError;
end;

function TGdViewer.GetMouseLeftInDocument: Integer;
begin
  Result := DefaultInterface.GetMouseLeftInDocument;
end;

function TGdViewer.GetMouseTopInDocument: Integer;
begin
  Result := DefaultInterface.GetMouseTopInDocument;
end;

function TGdViewer.GetObject: OleVariant;
begin
  Result := DefaultInterface.GetObject;
end;

function TGdViewer.GetObjectInterop: OleVariant;
begin
  Result := DefaultInterface.GetObjectInterop;
end;

function TGdViewer.GetPageText: WideString;
begin
  Result := DefaultInterface.GetPageText;
end;

function TGdViewer.GetPageTextArea(Left: Single; Top: Single; Width: Single; Height: Single): WideString;
begin
  Result := DefaultInterface.GetPageTextArea(Left, Top, Width, Height);
end;

function TGdViewer.GetPageTextArea_2(Page: Integer; Left: Single; Top: Single; Width: Single; 
                                     Height: Single): WideString;
begin
  Result := DefaultInterface.GetPageTextArea_2(Page, Left, Top, Width, Height);
end;

function TGdViewer.GetPageText_2(Page: Integer): WideString;
begin
  Result := DefaultInterface.GetPageText_2(Page);
end;

function TGdViewer.GetPageThumbnail(Width: Integer; Height: Integer; Page: Integer; 
                                    BackColor: Integer): Integer;
begin
  Result := DefaultInterface.GetPageThumbnail(Width, Height, Page, BackColor);
end;

procedure TGdViewer.GetRectCoordinatesOnDocument(var Left: Integer; var Top: Integer; 
                                                 var Width: Integer; var Height: Integer);
begin
  DefaultInterface.GetRectCoordinatesOnDocument(Left, Top, Width, Height);
end;

procedure TGdViewer.GetRectCoordinatesOnDocumentInches(var Left: Single; var Top: Single; 
                                                       var Width: Single; var Height: Single);
begin
  DefaultInterface.GetRectCoordinatesOnDocumentInches(Left, Top, Width, Height);
end;

procedure TGdViewer.GetRectCoordinatesOnViewer(var Left: Integer; var Top: Integer; 
                                               var Width: Integer; var Height: Integer);
begin
  DefaultInterface.GetRectCoordinatesOnViewer(Left, Top, Width, Height);
end;

function TGdViewer.GetRectHeightOnDocument: Integer;
begin
  Result := DefaultInterface.GetRectHeightOnDocument;
end;

function TGdViewer.GetRectHeightOnViewer: Integer;
begin
  Result := DefaultInterface.GetRectHeightOnViewer;
end;

function TGdViewer.GetRectLeftOnDocument: Integer;
begin
  Result := DefaultInterface.GetRectLeftOnDocument;
end;

function TGdViewer.GetRectLeftOnViewer: Integer;
begin
  Result := DefaultInterface.GetRectLeftOnViewer;
end;

function TGdViewer.GetRectTopOnDocument: Integer;
begin
  Result := DefaultInterface.GetRectTopOnDocument;
end;

function TGdViewer.GetRectTopOnViewer: Integer;
begin
  Result := DefaultInterface.GetRectTopOnViewer;
end;

function TGdViewer.GetRectWidthOnDocument: Integer;
begin
  Result := DefaultInterface.GetRectWidthOnDocument;
end;

function TGdViewer.GetRectWidthOnViewer: Integer;
begin
  Result := DefaultInterface.GetRectWidthOnViewer;
end;

function TGdViewer.GetRegionBorderWidth(RegionID: Integer): Integer;
begin
  Result := DefaultInterface.GetRegionBorderWidth(RegionID);
end;

function TGdViewer.GetRegionHeight(RegionID: Integer): Single;
begin
  Result := DefaultInterface.GetRegionHeight(RegionID);
end;

function TGdViewer.GetRegionHeightPixels(RegionID: Integer): Integer;
begin
  Result := DefaultInterface.GetRegionHeightPixels(RegionID);
end;

function TGdViewer.GetRegionID(RegionNo: Integer): Integer;
begin
  Result := DefaultInterface.GetRegionID(RegionNo);
end;

function TGdViewer.GetRegionLeft(RegionID: Integer): Single;
begin
  Result := DefaultInterface.GetRegionLeft(RegionID);
end;

function TGdViewer.GetRegionLeftPixels(RegionID: Integer): Integer;
begin
  Result := DefaultInterface.GetRegionLeftPixels(RegionID);
end;

function TGdViewer.GetRegionMixMode(RegionID: Integer): ForegroundMixMode;
begin
  Result := DefaultInterface.GetRegionMixMode(RegionID);
end;

function TGdViewer.GetRegionName(RegionID: Integer): WideString;
begin
  Result := DefaultInterface.GetRegionName(RegionID);
end;

function TGdViewer.GetRegionPage(RegionID: Integer): Integer;
begin
  Result := DefaultInterface.GetRegionPage(RegionID);
end;

function TGdViewer.GetRegionSelected(RegionID: Integer): WordBool;
begin
  Result := DefaultInterface.GetRegionSelected(RegionID);
end;

function TGdViewer.GetRegionTop(RegionID: Integer): Single;
begin
  Result := DefaultInterface.GetRegionTop(RegionID);
end;

function TGdViewer.GetRegionTopPixels(RegionID: Integer): Integer;
begin
  Result := DefaultInterface.GetRegionTopPixels(RegionID);
end;

function TGdViewer.GetRegionWidth(RegionID: Integer): Single;
begin
  Result := DefaultInterface.GetRegionWidth(RegionID);
end;

function TGdViewer.GetRegionWidthPixels(RegionID: Integer): Integer;
begin
  Result := DefaultInterface.GetRegionWidthPixels(RegionID);
end;

function TGdViewer.GetSelectedAnnotationIdx: Integer;
begin
  Result := DefaultInterface.GetSelectedAnnotationIdx;
end;

function TGdViewer.GetSelectedText: WideString;
begin
  Result := DefaultInterface.GetSelectedText;
end;

function TGdViewer.GetSelectedTextRegion(RegionIdx: Integer; var RegionLeft: Single; 
                                         var RegionTop: Single; var RegionWidth: Single; 
                                         var RegionHeight: Single): GdPictureStatus;
begin
  Result := DefaultInterface.GetSelectedTextRegion(RegionIdx, RegionLeft, RegionTop, RegionWidth, 
                                                   RegionHeight);
end;

function TGdViewer.GetSelectedTextRegionsCount: Integer;
begin
  Result := DefaultInterface.GetSelectedTextRegionsCount;
end;

function TGdViewer.GetStat: GdPictureStatus;
begin
  Result := DefaultInterface.GetStat;
end;

function TGdViewer.GetTextOccurrenceCount(Page: Integer; const Text: WideString; 
                                          CaseSensitive: WordBool; WholeWords: WordBool): Integer;
begin
  Result := DefaultInterface.GetTextOccurrenceCount(Page, Text, CaseSensitive, WholeWords);
end;

function TGdViewer.GetTextOccurrenceCount_2(Page: Integer; const Text: WideString; 
                                            CaseSensitive: WordBool; WholeWords: WordBool; 
                                            OrdinalComparison: WordBool): Integer;
begin
  Result := DefaultInterface.GetTextOccurrenceCount_2(Page, Text, CaseSensitive, WholeWords, 
                                                      OrdinalComparison);
end;

function TGdViewer.GetVersion: Double;
begin
  Result := DefaultInterface.GetVersion;
end;

function TGdViewer.GetVScrollBarMaxPosition: Integer;
begin
  Result := DefaultInterface.GetVScrollBarMaxPosition;
end;

function TGdViewer.GetVScrollBarPosition: Integer;
begin
  Result := DefaultInterface.GetVScrollBarPosition;
end;

procedure TGdViewer.GifPlay;
begin
  DefaultInterface.GifPlay;
end;

procedure TGdViewer.GifStop;
begin
  DefaultInterface.GifStop;
end;

function TGdViewer.HideTextEditBox(SaveText: WordBool): GdPictureStatus;
begin
  Result := DefaultInterface.HideTextEditBox(SaveText);
end;

function TGdViewer.IPTCCount: Integer;
begin
  Result := DefaultInterface.IPTCCount;
end;

function TGdViewer.IPTCGetID(TagNo: Integer): IPTCTags;
begin
  Result := DefaultInterface.IPTCGetID(TagNo);
end;

function TGdViewer.IPTCGetValueString(TagNo: Integer): WideString;
begin
  Result := DefaultInterface.IPTCGetValueString(TagNo);
end;

function TGdViewer.IsAnnotationVisibleAt(AnnotationIdx: Integer; X: Integer; Y: Integer): WordBool;
begin
  Result := DefaultInterface.IsAnnotationVisibleAt(AnnotationIdx, X, Y);
end;

function TGdViewer.IsRect: WordBool;
begin
  Result := DefaultInterface.IsRect;
end;

function TGdViewer.IsRectDrawing: WordBool;
begin
  Result := DefaultInterface.IsRectDrawing;
end;

function TGdViewer.IsRectEditing: WordBool;
begin
  Result := DefaultInterface.IsRectEditing;
end;

function TGdViewer.LoadAnnotationsFromXMP(const FilePath: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.LoadAnnotationsFromXMP(FilePath);
end;

function TGdViewer.PdfGetAuthor: WideString;
begin
  Result := DefaultInterface.PdfGetAuthor;
end;

function TGdViewer.PdfGetCreationDate: WideString;
begin
  Result := DefaultInterface.PdfGetCreationDate;
end;

function TGdViewer.PdfGetCreator: WideString;
begin
  Result := DefaultInterface.PdfGetCreator;
end;

function TGdViewer.PdfGetEncryptionScheme: PdfEncryption;
begin
  Result := DefaultInterface.PdfGetEncryptionScheme;
end;

function TGdViewer.PdfGetKeywords: WideString;
begin
  Result := DefaultInterface.PdfGetKeywords;
end;

function TGdViewer.PdfGetMetadata: WideString;
begin
  Result := DefaultInterface.PdfGetMetadata;
end;

function TGdViewer.PdfGetModificationDate: WideString;
begin
  Result := DefaultInterface.PdfGetModificationDate;
end;

function TGdViewer.PdfGetPageHeight: Double;
begin
  Result := DefaultInterface.PdfGetPageHeight;
end;

function TGdViewer.PdfGetPageWidth: Double;
begin
  Result := DefaultInterface.PdfGetPageWidth;
end;

function TGdViewer.PdfGetProducer: WideString;
begin
  Result := DefaultInterface.PdfGetProducer;
end;

function TGdViewer.PdfGetSubject: WideString;
begin
  Result := DefaultInterface.PdfGetSubject;
end;

function TGdViewer.PdfGetTitle: WideString;
begin
  Result := DefaultInterface.PdfGetTitle;
end;

function TGdViewer.PdfGetVersion: WideString;
begin
  Result := DefaultInterface.PdfGetVersion;
end;

function TGdViewer.Print: GdPictureStatus;
begin
  Result := DefaultInterface.Print;
end;

function TGdViewer.PrintDialog: WordBool;
begin
  Result := DefaultInterface.PrintDialog;
end;

function TGdViewer.PrintDialog_2(PrintSizeMode: PrintSizeOption): WordBool;
begin
  Result := DefaultInterface.PrintDialog_2(PrintSizeMode);
end;

function TGdViewer.PrintGetActivePrinter: WideString;
begin
  Result := DefaultInterface.PrintGetActivePrinter;
end;

function TGdViewer.PrintGetAlignment: PrintAlignment;
begin
  Result := DefaultInterface.PrintGetAlignment;
end;

function TGdViewer.PrintGetCollate: WordBool;
begin
  Result := DefaultInterface.PrintGetCollate;
end;

function TGdViewer.PrintGetColorMode: PrinterColorMode;
begin
  Result := DefaultInterface.PrintGetColorMode;
end;

function TGdViewer.PrintGetCopies: Smallint;
begin
  Result := DefaultInterface.PrintGetCopies;
end;

function TGdViewer.PrintGetDocumentName: WideString;
begin
  Result := DefaultInterface.PrintGetDocumentName;
end;

function TGdViewer.PrintGetDuplexMode: Duplex;
begin
  Result := DefaultInterface.PrintGetDuplexMode;
end;

function TGdViewer.PrintGetLastError: WideString;
begin
  Result := DefaultInterface.PrintGetLastError;
end;

function TGdViewer.PrintGetMargins(var LeftMargin: Single; var TopMargin: Single): GdPictureStatus;
begin
  Result := DefaultInterface.PrintGetMargins(LeftMargin, TopMargin);
end;

function TGdViewer.PrintGetOrientation: PrinterOrientation;
begin
  Result := DefaultInterface.PrintGetOrientation;
end;

function TGdViewer.PrintGetPaperBin: Integer;
begin
  Result := DefaultInterface.PrintGetPaperBin;
end;

function TGdViewer.PrintGetPaperHeight: Single;
begin
  Result := DefaultInterface.PrintGetPaperHeight;
end;

function TGdViewer.PrintGetPaperSize: Integer;
begin
  Result := DefaultInterface.PrintGetPaperSize;
end;

function TGdViewer.PrintGetPaperWidth: Single;
begin
  Result := DefaultInterface.PrintGetPaperWidth;
end;

function TGdViewer.PrintGetPrinterName(PrinterNo: Integer): WideString;
begin
  Result := DefaultInterface.PrintGetPrinterName(PrinterNo);
end;

function TGdViewer.PrintGetPrintersCount: Integer;
begin
  Result := DefaultInterface.PrintGetPrintersCount;
end;

function TGdViewer.PrintGetPrinterSettings: IUnknown;
begin
  Result := DefaultInterface.PrintGetPrinterSettings;
end;

function TGdViewer.PrintGetQuality: PrintQuality;
begin
  Result := DefaultInterface.PrintGetQuality;
end;

function TGdViewer.PrintGetStat: GdPictureStatus;
begin
  Result := DefaultInterface.PrintGetStat;
end;

function TGdViewer.PrintInterop: GdPictureStatus;
begin
  Result := DefaultInterface.PrintInterop;
end;

function TGdViewer.PrintInterop_2: GdPictureStatus;
begin
  Result := DefaultInterface.PrintInterop_2;
end;

function TGdViewer.PrintSetActivePrinter(const PrinterName: WideString): WordBool;
begin
  Result := DefaultInterface.PrintSetActivePrinter(PrinterName);
end;

function TGdViewer.PrintSetAlignment(ImageAlignment: PrintAlignment): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetAlignment(ImageAlignment);
end;

function TGdViewer.PrintSetAutoRotation(AutoRotation: WordBool): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetAutoRotation(AutoRotation);
end;

function TGdViewer.PrintSetCollate(Collate: WordBool): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetCollate(Collate);
end;

function TGdViewer.PrintSetColorMode(ColorMode: PrinterColorMode): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetColorMode(ColorMode);
end;

function TGdViewer.PrintSetCopies(Copies: Smallint): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetCopies(Copies);
end;

function TGdViewer.PrintSetDocumentName(const DocumentName: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetDocumentName(DocumentName);
end;

function TGdViewer.PrintSetDuplexMode(DuplexMode: Duplex): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetDuplexMode(DuplexMode);
end;

function TGdViewer.PrintSetFromToPage(FromPage: Integer; ToPage: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetFromToPage(FromPage, ToPage);
end;

function TGdViewer.PrintSetOrientation(Orientation: PrinterOrientation): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetOrientation(Orientation);
end;

function TGdViewer.PrintSetPageSelection(const CustomRange: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetPageSelection(CustomRange);
end;

function TGdViewer.PrintSetPaperBin(PaperBin: Integer): WordBool;
begin
  Result := DefaultInterface.PrintSetPaperBin(PaperBin);
end;

function TGdViewer.PrintSetPreRasterization(PreRasterization: WordBool): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetPreRasterization(PreRasterization);
end;

function TGdViewer.PrintSetPreRasterizationDPI(DPI: Single): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetPreRasterizationDPI(DPI);
end;

function TGdViewer.PrintSetPrinterSettings(const PS: IUnknown): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetPrinterSettings(PS);
end;

function TGdViewer.PrintSetQuality(Quality: PrintQuality): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetQuality(Quality);
end;

function TGdViewer.PrintSetShowPrintingProgress(Show: WordBool): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetShowPrintingProgress(Show);
end;

function TGdViewer.PrintSetStdPaperSize(PaperSize: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetStdPaperSize(PaperSize);
end;

function TGdViewer.PrintSetUserPaperSize(PaperWidth: Single; PaperHeight: Single): GdPictureStatus;
begin
  Result := DefaultInterface.PrintSetUserPaperSize(PaperWidth, PaperHeight);
end;

function TGdViewer.PrintShowPrinterSettingsDialog: GdPictureStatus;
begin
  Result := DefaultInterface.PrintShowPrinterSettingsDialog;
end;

function TGdViewer.PrintShowPrinterSettingsDialog_2(HANDLE: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.PrintShowPrinterSettingsDialog_2(HANDLE);
end;

function TGdViewer.Print_2(PrintSizeMode: PrintSizeOption): GdPictureStatus;
begin
  Result := DefaultInterface.Print_2(PrintSizeMode);
end;

function TGdViewer.Redraw: GdPictureStatus;
begin
  Result := DefaultInterface.Redraw;
end;

procedure TGdViewer.Refresh;
begin
  DefaultInterface.Refresh;
end;

function TGdViewer.RegionCount: Integer;
begin
  Result := DefaultInterface.RegionCount;
end;

function TGdViewer.ReleaseGdPictureImage(ImageID: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.ReleaseGdPictureImage(ImageID);
end;

procedure TGdViewer.ReloadAnnotations;
begin
  DefaultInterface.ReloadAnnotations;
end;

function TGdViewer.RemoveAllRegions: GdPictureStatus;
begin
  Result := DefaultInterface.RemoveAllRegions;
end;

procedure TGdViewer.RemoveItemMenu(MenuItemIdx: Integer);
begin
  DefaultInterface.RemoveItemMenu(MenuItemIdx);
end;

function TGdViewer.RemoveRegionByID(RegionID: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.RemoveRegionByID(RegionID);
end;

function TGdViewer.RemoveRegionByName(const Name: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.RemoveRegionByName(Name);
end;

function TGdViewer.Rotate(Rotation: RotateFlipType): GdPictureStatus;
begin
  Result := DefaultInterface.Rotate(Rotation);
end;

function TGdViewer.RotateAnnotations(Angle: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.RotateAnnotations(Angle);
end;

function TGdViewer.RotateView(Rotation: RotateFlipType): GdPictureStatus;
begin
  Result := DefaultInterface.RotateView(Rotation);
end;

function TGdViewer.SaveAnnotationsToPage: GdPictureStatus;
begin
  Result := DefaultInterface.SaveAnnotationsToPage;
end;

function TGdViewer.SaveAnnotationsToXMP(const FilePath: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.SaveAnnotationsToXMP(FilePath);
end;

function TGdViewer.SaveAnnotationsToXMPEx(const FilePath: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.SaveAnnotationsToXMPEx(FilePath);
end;

function TGdViewer.SaveDocumentToJPEG(const FilePath: WideString; Quality: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SaveDocumentToJPEG(FilePath, Quality);
end;

function TGdViewer.SaveDocumentToJPEG_2(const Uri: WideString; const Login: WideString; 
                                        const Password: WideString; Quality: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SaveDocumentToJPEG_2(Uri, Login, Password, Quality);
end;

function TGdViewer.SaveDocumentToPDF(const FilePath: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.SaveDocumentToPDF(FilePath);
end;

function TGdViewer.SaveDocumentToPDF_2(const Uri: WideString; const Login: WideString; 
                                       const Password: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.SaveDocumentToPDF_2(Uri, Login, Password);
end;

function TGdViewer.SaveDocumentToTIFF(const FilePath: WideString; Compression: TiffCompression): GdPictureStatus;
begin
  Result := DefaultInterface.SaveDocumentToTIFF(FilePath, Compression);
end;

function TGdViewer.SaveDocumentToTIFF_2(const Uri: WideString; const Login: WideString; 
                                        const Password: WideString; Compression: TiffCompression): GdPictureStatus;
begin
  Result := DefaultInterface.SaveDocumentToTIFF_2(Uri, Login, Password, Compression);
end;

function TGdViewer.SearchText(const Text: WideString; Occurrence: Integer; CaseSensitive: WordBool): WordBool;
begin
  Result := DefaultInterface.SearchText(Text, Occurrence, CaseSensitive);
end;

function TGdViewer.SearchText_2(const Text: WideString; Occurrence: Integer; 
                                CaseSensitive: WordBool; WholeWords: WordBool): WordBool;
begin
  Result := DefaultInterface.SearchText_2(Text, Occurrence, CaseSensitive, WholeWords);
end;

function TGdViewer.SearchText_3(Page: Integer; const Text: WideString; Occurrence: Integer; 
                                CaseSensitive: WordBool; var Left: Single; var Top: Single; 
                                var Width: Single; var Height: Single): WordBool;
begin
  Result := DefaultInterface.SearchText_3(Page, Text, Occurrence, CaseSensitive, Left, Top, Width, 
                                          Height);
end;

function TGdViewer.SearchText_4(Page: Integer; const Text: WideString; Occurrence: Integer; 
                                CaseSensitive: WordBool; WholeWords: WordBool; var Left: Single; 
                                var Top: Single; var Width: Single; var Height: Single): WordBool;
begin
  Result := DefaultInterface.SearchText_4(Page, Text, Occurrence, CaseSensitive, WholeWords, Left, 
                                          Top, Width, Height);
end;

function TGdViewer.SearchText_5(const Text: WideString; Occurrence: Integer; 
                                CaseSensitive: WordBool; WholeWords: WordBool; 
                                OrdinalComparison: WordBool): WordBool;
begin
  Result := DefaultInterface.SearchText_5(Text, Occurrence, CaseSensitive, WholeWords, 
                                          OrdinalComparison);
end;

function TGdViewer.SearchText_6(Page: Integer; const Text: WideString; Occurrence: Integer; 
                                CaseSensitive: WordBool; WholeWords: WordBool; 
                                OrdinalComparison: WordBool; var Left: Single; var Top: Single; 
                                var Width: Single; var Height: Single): WordBool;
begin
  Result := DefaultInterface.SearchText_6(Page, Text, Occurrence, CaseSensitive, WholeWords, 
                                          OrdinalComparison, Left, Top, Width, Height);
end;

function TGdViewer.SearchTextRegex(const Pattern: WideString; Occurence: Integer; 
                                   CaseSensitive: WordBool): WordBool;
begin
  Result := DefaultInterface.SearchTextRegex(Pattern, Occurence, CaseSensitive);
end;

function TGdViewer.SelectAllText: GdPictureStatus;
begin
  Result := DefaultInterface.SelectAllText;
end;

function TGdViewer.SelectAnnotation(AnnotationIdx: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SelectAnnotation(AnnotationIdx);
end;

procedure TGdViewer.SetAnnotationEditorMode(EditorMode: WordBool);
begin
  DefaultInterface.SetAnnotationEditorMode(EditorMode);
end;

procedure TGdViewer.SetBackgroundColor(Color: Integer);
begin
  DefaultInterface.SetBackgroundColor(Color);
end;

procedure TGdViewer.SetFtpPassiveMode(PassiveMode: WordBool);
begin
  DefaultInterface.SetFtpPassiveMode(PassiveMode);
end;

procedure TGdViewer.SetHScrollBarPosition(NewPos: Integer);
begin
  DefaultInterface.SetHScrollBarPosition(NewPos);
end;

procedure TGdViewer.SetHttpTransferBufferSize(Buffersize: Integer);
begin
  DefaultInterface.SetHttpTransferBufferSize(Buffersize);
end;

procedure TGdViewer.SetHVScrollBarPosition(NewPosH: Integer; NewPosV: Integer);
begin
  DefaultInterface.SetHVScrollBarPosition(NewPosH, NewPosV);
end;

procedure TGdViewer.SetItemMenuCaption(MenuItemIdx: Integer; const NewMenuCaption: WideString);
begin
  DefaultInterface.SetItemMenuCaption(MenuItemIdx, NewMenuCaption);
end;

procedure TGdViewer.SetItemMenuEnabled(MenuItemIdx: Integer; Enable: WordBool);
begin
  DefaultInterface.SetItemMenuEnabled(MenuItemIdx, Enable);
end;

procedure TGdViewer.SetRectBorderColor(Color: Integer);
begin
  DefaultInterface.SetRectBorderColor(Color);
end;

procedure TGdViewer.SetRectCoordinatesOnDocument(Left: Integer; Top: Integer; Width: Integer; 
                                                 Height: Integer);
begin
  DefaultInterface.SetRectCoordinatesOnDocument(Left, Top, Width, Height);
end;

procedure TGdViewer.SetRectCoordinatesOnDocumentInches(Left: Single; Top: Single; Width: Single; 
                                                       Height: Single);
begin
  DefaultInterface.SetRectCoordinatesOnDocumentInches(Left, Top, Width, Height);
end;

procedure TGdViewer.SetRectCoordinatesOnViewer(Left: Integer; Top: Integer; Width: Integer; 
                                               Height: Integer);
begin
  DefaultInterface.SetRectCoordinatesOnViewer(Left, Top, Width, Height);
end;

function TGdViewer.SetRegionBorderColor(RegionID: Integer; BorderColor: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionBorderColor(RegionID, BorderColor);
end;

function TGdViewer.SetRegionBorderWidth(RegionID: Integer; BorderWidth: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionBorderWidth(RegionID, BorderWidth);
end;

function TGdViewer.SetRegionColor(RegionID: Integer; Color: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionColor(RegionID, Color);
end;

function TGdViewer.SetRegionColorSelection(RegionID: Integer; ColorSelection: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionColorSelection(RegionID, ColorSelection);
end;

function TGdViewer.SetRegionEditable(RegionID: Integer; Editable: WordBool): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionEditable(RegionID, Editable);
end;

function TGdViewer.SetRegionHeight(RegionID: Integer; Height: Single): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionHeight(RegionID, Height);
end;

function TGdViewer.SetRegionHeightPixels(RegionID: Integer; Height: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionHeightPixels(RegionID, Height);
end;

function TGdViewer.SetRegionLeft(RegionID: Integer; Left: Single): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionLeft(RegionID, Left);
end;

function TGdViewer.SetRegionLeftPixels(RegionID: Integer; Left: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionLeftPixels(RegionID, Left);
end;

function TGdViewer.SetRegionMixMode(RegionID: Integer; MixMode: ForegroundMixMode): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionMixMode(RegionID, MixMode);
end;

function TGdViewer.SetRegionName(RegionID: Integer; const Name: WideString): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionName(RegionID, Name);
end;

function TGdViewer.SetRegionPage(RegionID: Integer; Page: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionPage(RegionID, Page);
end;

function TGdViewer.SetRegionSelected(RegionID: Integer; Selected: WordBool): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionSelected(RegionID, Selected);
end;

function TGdViewer.SetRegionTop(RegionID: Integer; Top: Single): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionTop(RegionID, Top);
end;

function TGdViewer.SetRegionTopPixels(RegionID: Integer; Top: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionTopPixels(RegionID, Top);
end;

function TGdViewer.SetRegionWidth(RegionID: Integer; Width: Single): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionWidth(RegionID, Width);
end;

function TGdViewer.SetRegionWidthPixels(RegionID: Integer; Width: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.SetRegionWidthPixels(RegionID, Width);
end;

procedure TGdViewer.SetVScrollBarPosition(NewPos: Integer);
begin
  DefaultInterface.SetVScrollBarPosition(NewPos);
end;

function TGdViewer.SetZoom100: GdPictureStatus;
begin
  Result := DefaultInterface.SetZoom100;
end;

function TGdViewer.SetZoomFitViewer: GdPictureStatus;
begin
  Result := DefaultInterface.SetZoomFitViewer;
end;

function TGdViewer.SetZoomHeightViewer: GdPictureStatus;
begin
  Result := DefaultInterface.SetZoomHeightViewer;
end;

function TGdViewer.SetZoomShrinkWidthViewer: GdPictureStatus;
begin
  Result := DefaultInterface.SetZoomShrinkWidthViewer;
end;

function TGdViewer.SetZoomViewer: GdPictureStatus;
begin
  Result := DefaultInterface.SetZoomViewer;
end;

function TGdViewer.SetZoomWidthViewer: GdPictureStatus;
begin
  Result := DefaultInterface.SetZoomWidthViewer;
end;

function TGdViewer.TagCount: Integer;
begin
  Result := DefaultInterface.TagCount;
end;

function TGdViewer.TagGetID(TagNo: Integer): Tags;
begin
  Result := DefaultInterface.TagGetID(TagNo);
end;

function TGdViewer.TagGetName(TagNo: Integer): WideString;
begin
  Result := DefaultInterface.TagGetName(TagNo);
end;

function TGdViewer.TagGetValueString(TagNo: Integer): WideString;
begin
  Result := DefaultInterface.TagGetValueString(TagNo);
end;

function TGdViewer.ZoomArea(Left: Integer; Top: Integer; Width: Integer; Height: Integer): GdPictureStatus;
begin
  Result := DefaultInterface.ZoomArea(Left, Top, Width, Height);
end;

function TGdViewer.ZoomIN: GdPictureStatus;
begin
  Result := DefaultInterface.ZoomIN;
end;

function TGdViewer.ZoomOUT: GdPictureStatus;
begin
  Result := DefaultInterface.ZoomOUT;
end;

function TGdViewer.ZoomRect: GdPictureStatus;
begin
  Result := DefaultInterface.ZoomRect;
end;

procedure TGdViewer.ReleaseEventsTarget;
begin
  DefaultInterface.ReleaseEventsTarget;
end;

procedure TGdViewer.AddRedactionAnnotInteractive(BackColor: Integer);
begin
  DefaultInterface.AddRedactionAnnotInteractive(BackColor);
end;

function TGdViewer.ApplyAllRedactions: GdPictureStatus;
begin
  Result := DefaultInterface.ApplyAllRedactions;
end;

class function CoOnDisposeEventHandler.Create: _OnDisposeEventHandler;
begin
  Result := CreateComObject(CLASS_OnDisposeEventHandler) as _OnDisposeEventHandler;
end;

class function CoOnDisposeEventHandler.CreateRemote(const MachineName: string): _OnDisposeEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OnDisposeEventHandler) as _OnDisposeEventHandler;
end;

class function CoPropertyChangedEventHandler.Create: _PropertyChangedEventHandler;
begin
  Result := CreateComObject(CLASS_PropertyChangedEventHandler) as _PropertyChangedEventHandler;
end;

class function CoPropertyChangedEventHandler.CreateRemote(const MachineName: string): _PropertyChangedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyChangedEventHandler) as _PropertyChangedEventHandler;
end;

class function CoSavingProgressEventHandler.Create: _SavingProgressEventHandler;
begin
  Result := CreateComObject(CLASS_SavingProgressEventHandler) as _SavingProgressEventHandler;
end;

class function CoSavingProgressEventHandler.CreateRemote(const MachineName: string): _SavingProgressEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SavingProgressEventHandler) as _SavingProgressEventHandler;
end;

class function CoOnDisposeEventHandler_2.Create: _OnDisposeEventHandler_2;
begin
  Result := CreateComObject(CLASS_OnDisposeEventHandler_2) as _OnDisposeEventHandler_2;
end;

class function CoOnDisposeEventHandler_2.CreateRemote(const MachineName: string): _OnDisposeEventHandler_2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OnDisposeEventHandler_2) as _OnDisposeEventHandler_2;
end;

class function CoNodeSelectedEventHandler.Create: _NodeSelectedEventHandler;
begin
  Result := CreateComObject(CLASS_NodeSelectedEventHandler) as _NodeSelectedEventHandler;
end;

class function CoNodeSelectedEventHandler.CreateRemote(const MachineName: string): _NodeSelectedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NodeSelectedEventHandler) as _NodeSelectedEventHandler;
end;

class function CoTwainImagePreviewEventHandler.Create: _TwainImagePreviewEventHandler;
begin
  Result := CreateComObject(CLASS_TwainImagePreviewEventHandler) as _TwainImagePreviewEventHandler;
end;

class function CoTwainImagePreviewEventHandler.CreateRemote(const MachineName: string): _TwainImagePreviewEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TwainImagePreviewEventHandler) as _TwainImagePreviewEventHandler;
end;

class function CoBeforePdfPrintPageEventHandler.Create: _BeforePdfPrintPageEventHandler;
begin
  Result := CreateComObject(CLASS_BeforePdfPrintPageEventHandler) as _BeforePdfPrintPageEventHandler;
end;

class function CoBeforePdfPrintPageEventHandler.CreateRemote(const MachineName: string): _BeforePdfPrintPageEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BeforePdfPrintPageEventHandler) as _BeforePdfPrintPageEventHandler;
end;

class function CoAfterPdfPrintPageEventHandler.Create: _AfterPdfPrintPageEventHandler;
begin
  Result := CreateComObject(CLASS_AfterPdfPrintPageEventHandler) as _AfterPdfPrintPageEventHandler;
end;

class function CoAfterPdfPrintPageEventHandler.CreateRemote(const MachineName: string): _AfterPdfPrintPageEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AfterPdfPrintPageEventHandler) as _AfterPdfPrintPageEventHandler;
end;

class function CoExternalOcrPageRequestEventHandler.Create: _ExternalOcrPageRequestEventHandler;
begin
  Result := CreateComObject(CLASS_ExternalOcrPageRequestEventHandler) as _ExternalOcrPageRequestEventHandler;
end;

class function CoExternalOcrPageRequestEventHandler.CreateRemote(const MachineName: string): _ExternalOcrPageRequestEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExternalOcrPageRequestEventHandler) as _ExternalOcrPageRequestEventHandler;
end;

class function CoOcrPagesProgressEventHandler.Create: _OcrPagesProgressEventHandler;
begin
  Result := CreateComObject(CLASS_OcrPagesProgressEventHandler) as _OcrPagesProgressEventHandler;
end;

class function CoOcrPagesProgressEventHandler.CreateRemote(const MachineName: string): _OcrPagesProgressEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OcrPagesProgressEventHandler) as _OcrPagesProgressEventHandler;
end;

class function CoBeforePageOcrEventHandler.Create: _BeforePageOcrEventHandler;
begin
  Result := CreateComObject(CLASS_BeforePageOcrEventHandler) as _BeforePageOcrEventHandler;
end;

class function CoBeforePageOcrEventHandler.CreateRemote(const MachineName: string): _BeforePageOcrEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BeforePageOcrEventHandler) as _BeforePageOcrEventHandler;
end;

class function CoPageBitmapOcrReadyEventHandler.Create: _PageBitmapOcrReadyEventHandler;
begin
  Result := CreateComObject(CLASS_PageBitmapOcrReadyEventHandler) as _PageBitmapOcrReadyEventHandler;
end;

class function CoPageBitmapOcrReadyEventHandler.CreateRemote(const MachineName: string): _PageBitmapOcrReadyEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PageBitmapOcrReadyEventHandler) as _PageBitmapOcrReadyEventHandler;
end;

class function CoOcrPagesDoneEventHandler.Create: _OcrPagesDoneEventHandler;
begin
  Result := CreateComObject(CLASS_OcrPagesDoneEventHandler) as _OcrPagesDoneEventHandler;
end;

class function CoOcrPagesDoneEventHandler.CreateRemote(const MachineName: string): _OcrPagesDoneEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OcrPagesDoneEventHandler) as _OcrPagesDoneEventHandler;
end;

class function CoViewerDoubleClickEventHandler.Create: _ViewerDoubleClickEventHandler;
begin
  Result := CreateComObject(CLASS_ViewerDoubleClickEventHandler) as _ViewerDoubleClickEventHandler;
end;

class function CoViewerDoubleClickEventHandler.CreateRemote(const MachineName: string): _ViewerDoubleClickEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ViewerDoubleClickEventHandler) as _ViewerDoubleClickEventHandler;
end;

class function CoViewerMouseWheelEventHandler.Create: _ViewerMouseWheelEventHandler;
begin
  Result := CreateComObject(CLASS_ViewerMouseWheelEventHandler) as _ViewerMouseWheelEventHandler;
end;

class function CoViewerMouseWheelEventHandler.CreateRemote(const MachineName: string): _ViewerMouseWheelEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ViewerMouseWheelEventHandler) as _ViewerMouseWheelEventHandler;
end;

class function CoViewerClickEventHandler.Create: _ViewerClickEventHandler;
begin
  Result := CreateComObject(CLASS_ViewerClickEventHandler) as _ViewerClickEventHandler;
end;

class function CoViewerClickEventHandler.CreateRemote(const MachineName: string): _ViewerClickEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ViewerClickEventHandler) as _ViewerClickEventHandler;
end;

class function CoViewerMouseUpEventHandler.Create: _ViewerMouseUpEventHandler;
begin
  Result := CreateComObject(CLASS_ViewerMouseUpEventHandler) as _ViewerMouseUpEventHandler;
end;

class function CoViewerMouseUpEventHandler.CreateRemote(const MachineName: string): _ViewerMouseUpEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ViewerMouseUpEventHandler) as _ViewerMouseUpEventHandler;
end;

class function CoViewerMouseDownEventHandler.Create: _ViewerMouseDownEventHandler;
begin
  Result := CreateComObject(CLASS_ViewerMouseDownEventHandler) as _ViewerMouseDownEventHandler;
end;

class function CoViewerMouseDownEventHandler.CreateRemote(const MachineName: string): _ViewerMouseDownEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ViewerMouseDownEventHandler) as _ViewerMouseDownEventHandler;
end;

class function CoViewerMouseMoveEventHandler.Create: _ViewerMouseMoveEventHandler;
begin
  Result := CreateComObject(CLASS_ViewerMouseMoveEventHandler) as _ViewerMouseMoveEventHandler;
end;

class function CoViewerMouseMoveEventHandler.CreateRemote(const MachineName: string): _ViewerMouseMoveEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ViewerMouseMoveEventHandler) as _ViewerMouseMoveEventHandler;
end;

class function CoViewerKeyUpEventHandler.Create: _ViewerKeyUpEventHandler;
begin
  Result := CreateComObject(CLASS_ViewerKeyUpEventHandler) as _ViewerKeyUpEventHandler;
end;

class function CoViewerKeyUpEventHandler.CreateRemote(const MachineName: string): _ViewerKeyUpEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ViewerKeyUpEventHandler) as _ViewerKeyUpEventHandler;
end;

class function CoViewerKeyDownEventHandler.Create: _ViewerKeyDownEventHandler;
begin
  Result := CreateComObject(CLASS_ViewerKeyDownEventHandler) as _ViewerKeyDownEventHandler;
end;

class function CoViewerKeyDownEventHandler.CreateRemote(const MachineName: string): _ViewerKeyDownEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ViewerKeyDownEventHandler) as _ViewerKeyDownEventHandler;
end;

class function CoViewerKeyPressEventHandler.Create: _ViewerKeyPressEventHandler;
begin
  Result := CreateComObject(CLASS_ViewerKeyPressEventHandler) as _ViewerKeyPressEventHandler;
end;

class function CoViewerKeyPressEventHandler.CreateRemote(const MachineName: string): _ViewerKeyPressEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ViewerKeyPressEventHandler) as _ViewerKeyPressEventHandler;
end;

class function CoOnDisposeEventHandler_3.Create: _OnDisposeEventHandler_3;
begin
  Result := CreateComObject(CLASS_OnDisposeEventHandler_3) as _OnDisposeEventHandler_3;
end;

class function CoOnDisposeEventHandler_3.CreateRemote(const MachineName: string): _OnDisposeEventHandler_3;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OnDisposeEventHandler_3) as _OnDisposeEventHandler_3;
end;

class function CoAnnotationTextBoxKeyDownEventHandler.Create: _AnnotationTextBoxKeyDownEventHandler;
begin
  Result := CreateComObject(CLASS_AnnotationTextBoxKeyDownEventHandler) as _AnnotationTextBoxKeyDownEventHandler;
end;

class function CoAnnotationTextBoxKeyDownEventHandler.CreateRemote(const MachineName: string): _AnnotationTextBoxKeyDownEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationTextBoxKeyDownEventHandler) as _AnnotationTextBoxKeyDownEventHandler;
end;

class function CoAnnotationTextBoxLostFocusEventHandler.Create: _AnnotationTextBoxLostFocusEventHandler;
begin
  Result := CreateComObject(CLASS_AnnotationTextBoxLostFocusEventHandler) as _AnnotationTextBoxLostFocusEventHandler;
end;

class function CoAnnotationTextBoxLostFocusEventHandler.CreateRemote(const MachineName: string): _AnnotationTextBoxLostFocusEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationTextBoxLostFocusEventHandler) as _AnnotationTextBoxLostFocusEventHandler;
end;

class function CoDropFileEventHandler.Create: _DropFileEventHandler;
begin
  Result := CreateComObject(CLASS_DropFileEventHandler) as _DropFileEventHandler;
end;

class function CoDropFileEventHandler.CreateRemote(const MachineName: string): _DropFileEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DropFileEventHandler) as _DropFileEventHandler;
end;

class function CoSavingProgressEventHandler_2.Create: _SavingProgressEventHandler_2;
begin
  Result := CreateComObject(CLASS_SavingProgressEventHandler_2) as _SavingProgressEventHandler_2;
end;

class function CoSavingProgressEventHandler_2.CreateRemote(const MachineName: string): _SavingProgressEventHandler_2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SavingProgressEventHandler_2) as _SavingProgressEventHandler_2;
end;

class function CoAnnotationStartEditingTextEventHandler.Create: _AnnotationStartEditingTextEventHandler;
begin
  Result := CreateComObject(CLASS_AnnotationStartEditingTextEventHandler) as _AnnotationStartEditingTextEventHandler;
end;

class function CoAnnotationStartEditingTextEventHandler.CreateRemote(const MachineName: string): _AnnotationStartEditingTextEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationStartEditingTextEventHandler) as _AnnotationStartEditingTextEventHandler;
end;

class function CoAnnotationEndEditingTextEventHandler.Create: _AnnotationEndEditingTextEventHandler;
begin
  Result := CreateComObject(CLASS_AnnotationEndEditingTextEventHandler) as _AnnotationEndEditingTextEventHandler;
end;

class function CoAnnotationEndEditingTextEventHandler.CreateRemote(const MachineName: string): _AnnotationEndEditingTextEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationEndEditingTextEventHandler) as _AnnotationEndEditingTextEventHandler;
end;

class function CoAnnotationSelectedEventHandler.Create: _AnnotationSelectedEventHandler;
begin
  Result := CreateComObject(CLASS_AnnotationSelectedEventHandler) as _AnnotationSelectedEventHandler;
end;

class function CoAnnotationSelectedEventHandler.CreateRemote(const MachineName: string): _AnnotationSelectedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationSelectedEventHandler) as _AnnotationSelectedEventHandler;
end;

class function CoAnnotationClickedEventHandler.Create: _AnnotationClickedEventHandler;
begin
  Result := CreateComObject(CLASS_AnnotationClickedEventHandler) as _AnnotationClickedEventHandler;
end;

class function CoAnnotationClickedEventHandler.CreateRemote(const MachineName: string): _AnnotationClickedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationClickedEventHandler) as _AnnotationClickedEventHandler;
end;

class function CoBeforeAnnotationAddedByUserEventHandler.Create: _BeforeAnnotationAddedByUserEventHandler;
begin
  Result := CreateComObject(CLASS_BeforeAnnotationAddedByUserEventHandler) as _BeforeAnnotationAddedByUserEventHandler;
end;

class function CoBeforeAnnotationAddedByUserEventHandler.CreateRemote(const MachineName: string): _BeforeAnnotationAddedByUserEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BeforeAnnotationAddedByUserEventHandler) as _BeforeAnnotationAddedByUserEventHandler;
end;

class function CoAnnotationAddedByUserEventHandler.Create: _AnnotationAddedByUserEventHandler;
begin
  Result := CreateComObject(CLASS_AnnotationAddedByUserEventHandler) as _AnnotationAddedByUserEventHandler;
end;

class function CoAnnotationAddedByUserEventHandler.CreateRemote(const MachineName: string): _AnnotationAddedByUserEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationAddedByUserEventHandler) as _AnnotationAddedByUserEventHandler;
end;

class function CoAnnotationRotatedEventHandler.Create: _AnnotationRotatedEventHandler;
begin
  Result := CreateComObject(CLASS_AnnotationRotatedEventHandler) as _AnnotationRotatedEventHandler;
end;

class function CoAnnotationRotatedEventHandler.CreateRemote(const MachineName: string): _AnnotationRotatedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationRotatedEventHandler) as _AnnotationRotatedEventHandler;
end;

class function CoAnnotationMovedEventHandler.Create: _AnnotationMovedEventHandler;
begin
  Result := CreateComObject(CLASS_AnnotationMovedEventHandler) as _AnnotationMovedEventHandler;
end;

class function CoAnnotationMovedEventHandler.CreateRemote(const MachineName: string): _AnnotationMovedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationMovedEventHandler) as _AnnotationMovedEventHandler;
end;

class function CoAnnotationResizedEventHandler.Create: _AnnotationResizedEventHandler;
begin
  Result := CreateComObject(CLASS_AnnotationResizedEventHandler) as _AnnotationResizedEventHandler;
end;

class function CoAnnotationResizedEventHandler.CreateRemote(const MachineName: string): _AnnotationResizedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationResizedEventHandler) as _AnnotationResizedEventHandler;
end;

class function CoPdfPasswordRequestEventHandler.Create: _PdfPasswordRequestEventHandler;
begin
  Result := CreateComObject(CLASS_PdfPasswordRequestEventHandler) as _PdfPasswordRequestEventHandler;
end;

class function CoPdfPasswordRequestEventHandler.CreateRemote(const MachineName: string): _PdfPasswordRequestEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PdfPasswordRequestEventHandler) as _PdfPasswordRequestEventHandler;
end;

class function CoPdfCertificateRequestEventHandler.Create: _PdfCertificateRequestEventHandler;
begin
  Result := CreateComObject(CLASS_PdfCertificateRequestEventHandler) as _PdfCertificateRequestEventHandler;
end;

class function CoPdfCertificateRequestEventHandler.CreateRemote(const MachineName: string): _PdfCertificateRequestEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PdfCertificateRequestEventHandler) as _PdfCertificateRequestEventHandler;
end;

class function CoPdfFileNavigationEventHandler.Create: _PdfFileNavigationEventHandler;
begin
  Result := CreateComObject(CLASS_PdfFileNavigationEventHandler) as _PdfFileNavigationEventHandler;
end;

class function CoPdfFileNavigationEventHandler.CreateRemote(const MachineName: string): _PdfFileNavigationEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PdfFileNavigationEventHandler) as _PdfFileNavigationEventHandler;
end;

class function CoPdfLaunchActionEventHandler.Create: _PdfLaunchActionEventHandler;
begin
  Result := CreateComObject(CLASS_PdfLaunchActionEventHandler) as _PdfLaunchActionEventHandler;
end;

class function CoPdfLaunchActionEventHandler.CreateRemote(const MachineName: string): _PdfLaunchActionEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PdfLaunchActionEventHandler) as _PdfLaunchActionEventHandler;
end;

class function CoPdfUriNavigationEventHandler.Create: _PdfUriNavigationEventHandler;
begin
  Result := CreateComObject(CLASS_PdfUriNavigationEventHandler) as _PdfUriNavigationEventHandler;
end;

class function CoPdfUriNavigationEventHandler.CreateRemote(const MachineName: string): _PdfUriNavigationEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PdfUriNavigationEventHandler) as _PdfUriNavigationEventHandler;
end;

class function CoBeforePrintPageEventHandler.Create: _BeforePrintPageEventHandler;
begin
  Result := CreateComObject(CLASS_BeforePrintPageEventHandler) as _BeforePrintPageEventHandler;
end;

class function CoBeforePrintPageEventHandler.CreateRemote(const MachineName: string): _BeforePrintPageEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BeforePrintPageEventHandler) as _BeforePrintPageEventHandler;
end;

class function CoAfterPrintPageEventHandler.Create: _AfterPrintPageEventHandler;
begin
  Result := CreateComObject(CLASS_AfterPrintPageEventHandler) as _AfterPrintPageEventHandler;
end;

class function CoAfterPrintPageEventHandler.CreateRemote(const MachineName: string): _AfterPrintPageEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AfterPrintPageEventHandler) as _AfterPrintPageEventHandler;
end;

class function CoDataReceivedEventHandler.Create: _DataReceivedEventHandler;
begin
  Result := CreateComObject(CLASS_DataReceivedEventHandler) as _DataReceivedEventHandler;
end;

class function CoDataReceivedEventHandler.CreateRemote(const MachineName: string): _DataReceivedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DataReceivedEventHandler) as _DataReceivedEventHandler;
end;

class function CoTransferEndedEventHandler.Create: _TransferEndedEventHandler;
begin
  Result := CreateComObject(CLASS_TransferEndedEventHandler) as _TransferEndedEventHandler;
end;

class function CoTransferEndedEventHandler.CreateRemote(const MachineName: string): _TransferEndedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransferEndedEventHandler) as _TransferEndedEventHandler;
end;

class function CoAfterZoomChangeEventHandler.Create: _AfterZoomChangeEventHandler;
begin
  Result := CreateComObject(CLASS_AfterZoomChangeEventHandler) as _AfterZoomChangeEventHandler;
end;

class function CoAfterZoomChangeEventHandler.CreateRemote(const MachineName: string): _AfterZoomChangeEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AfterZoomChangeEventHandler) as _AfterZoomChangeEventHandler;
end;

class function CoBeforeZoomChangeEventHandler.Create: _BeforeZoomChangeEventHandler;
begin
  Result := CreateComObject(CLASS_BeforeZoomChangeEventHandler) as _BeforeZoomChangeEventHandler;
end;

class function CoBeforeZoomChangeEventHandler.CreateRemote(const MachineName: string): _BeforeZoomChangeEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BeforeZoomChangeEventHandler) as _BeforeZoomChangeEventHandler;
end;

class function CoScrollViewerEventHandler.Create: _ScrollViewerEventHandler;
begin
  Result := CreateComObject(CLASS_ScrollViewerEventHandler) as _ScrollViewerEventHandler;
end;

class function CoScrollViewerEventHandler.CreateRemote(const MachineName: string): _ScrollViewerEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ScrollViewerEventHandler) as _ScrollViewerEventHandler;
end;

class function CoRectEditedByUserEventHandler.Create: _RectEditedByUserEventHandler;
begin
  Result := CreateComObject(CLASS_RectEditedByUserEventHandler) as _RectEditedByUserEventHandler;
end;

class function CoRectEditedByUserEventHandler.CreateRemote(const MachineName: string): _RectEditedByUserEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RectEditedByUserEventHandler) as _RectEditedByUserEventHandler;
end;

class function CoRegionEditedByUserEventHandler.Create: _RegionEditedByUserEventHandler;
begin
  Result := CreateComObject(CLASS_RegionEditedByUserEventHandler) as _RegionEditedByUserEventHandler;
end;

class function CoRegionEditedByUserEventHandler.CreateRemote(const MachineName: string): _RegionEditedByUserEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RegionEditedByUserEventHandler) as _RegionEditedByUserEventHandler;
end;

class function CoRegionMovedByUserEventHandler.Create: _RegionMovedByUserEventHandler;
begin
  Result := CreateComObject(CLASS_RegionMovedByUserEventHandler) as _RegionMovedByUserEventHandler;
end;

class function CoRegionMovedByUserEventHandler.CreateRemote(const MachineName: string): _RegionMovedByUserEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RegionMovedByUserEventHandler) as _RegionMovedByUserEventHandler;
end;

class function CoRegionResizedByUserEventHandler.Create: _RegionResizedByUserEventHandler;
begin
  Result := CreateComObject(CLASS_RegionResizedByUserEventHandler) as _RegionResizedByUserEventHandler;
end;

class function CoRegionResizedByUserEventHandler.CreateRemote(const MachineName: string): _RegionResizedByUserEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RegionResizedByUserEventHandler) as _RegionResizedByUserEventHandler;
end;

class function CoRegionSelectedByUserEventHandler.Create: _RegionSelectedByUserEventHandler;
begin
  Result := CreateComObject(CLASS_RegionSelectedByUserEventHandler) as _RegionSelectedByUserEventHandler;
end;

class function CoRegionSelectedByUserEventHandler.CreateRemote(const MachineName: string): _RegionSelectedByUserEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RegionSelectedByUserEventHandler) as _RegionSelectedByUserEventHandler;
end;

class function CoRotationEventHandler.Create: _RotationEventHandler;
begin
  Result := CreateComObject(CLASS_RotationEventHandler) as _RotationEventHandler;
end;

class function CoRotationEventHandler.CreateRemote(const MachineName: string): _RotationEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RotationEventHandler) as _RotationEventHandler;
end;

class function CoBeforeRotationEventHandler.Create: _BeforeRotationEventHandler;
begin
  Result := CreateComObject(CLASS_BeforeRotationEventHandler) as _BeforeRotationEventHandler;
end;

class function CoBeforeRotationEventHandler.CreateRemote(const MachineName: string): _BeforeRotationEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BeforeRotationEventHandler) as _BeforeRotationEventHandler;
end;

class function CoPageChangedEventHandler.Create: _PageChangedEventHandler;
begin
  Result := CreateComObject(CLASS_PageChangedEventHandler) as _PageChangedEventHandler;
end;

class function CoPageChangedEventHandler.CreateRemote(const MachineName: string): _PageChangedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PageChangedEventHandler) as _PageChangedEventHandler;
end;

class function CoBeforeDocumentChangeEventHandler.Create: _BeforeDocumentChangeEventHandler;
begin
  Result := CreateComObject(CLASS_BeforeDocumentChangeEventHandler) as _BeforeDocumentChangeEventHandler;
end;

class function CoBeforeDocumentChangeEventHandler.CreateRemote(const MachineName: string): _BeforeDocumentChangeEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BeforeDocumentChangeEventHandler) as _BeforeDocumentChangeEventHandler;
end;

class function CoAfterDocumentChangeEventHandler.Create: _AfterDocumentChangeEventHandler;
begin
  Result := CreateComObject(CLASS_AfterDocumentChangeEventHandler) as _AfterDocumentChangeEventHandler;
end;

class function CoAfterDocumentChangeEventHandler.CreateRemote(const MachineName: string): _AfterDocumentChangeEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AfterDocumentChangeEventHandler) as _AfterDocumentChangeEventHandler;
end;

class function CoDocumentClosedEventHandler.Create: _DocumentClosedEventHandler;
begin
  Result := CreateComObject(CLASS_DocumentClosedEventHandler) as _DocumentClosedEventHandler;
end;

class function CoDocumentClosedEventHandler.CreateRemote(const MachineName: string): _DocumentClosedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DocumentClosedEventHandler) as _DocumentClosedEventHandler;
end;

class function CoBeforeDocumentClosedEventHandler.Create: _BeforeDocumentClosedEventHandler;
begin
  Result := CreateComObject(CLASS_BeforeDocumentClosedEventHandler) as _BeforeDocumentClosedEventHandler;
end;

class function CoBeforeDocumentClosedEventHandler.CreateRemote(const MachineName: string): _BeforeDocumentClosedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BeforeDocumentClosedEventHandler) as _BeforeDocumentClosedEventHandler;
end;

class function CoPageDisplayedEventHandler.Create: _PageDisplayedEventHandler;
begin
  Result := CreateComObject(CLASS_PageDisplayedEventHandler) as _PageDisplayedEventHandler;
end;

class function CoPageDisplayedEventHandler.CreateRemote(const MachineName: string): _PageDisplayedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PageDisplayedEventHandler) as _PageDisplayedEventHandler;
end;

class function CoClickMenuEventHandler.Create: _ClickMenuEventHandler;
begin
  Result := CreateComObject(CLASS_ClickMenuEventHandler) as _ClickMenuEventHandler;
end;

class function CoClickMenuEventHandler.CreateRemote(const MachineName: string): _ClickMenuEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ClickMenuEventHandler) as _ClickMenuEventHandler;
end;

class function CoOnDisposeEventHandler_4.Create: _OnDisposeEventHandler_4;
begin
  Result := CreateComObject(CLASS_OnDisposeEventHandler_4) as _OnDisposeEventHandler_4;
end;

class function CoOnDisposeEventHandler_4.CreateRemote(const MachineName: string): _OnDisposeEventHandler_4;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OnDisposeEventHandler_4) as _OnDisposeEventHandler_4;
end;

class function CoControlDoubleClickEventHandler.Create: _ControlDoubleClickEventHandler;
begin
  Result := CreateComObject(CLASS_ControlDoubleClickEventHandler) as _ControlDoubleClickEventHandler;
end;

class function CoControlDoubleClickEventHandler.CreateRemote(const MachineName: string): _ControlDoubleClickEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ControlDoubleClickEventHandler) as _ControlDoubleClickEventHandler;
end;

class function CoControlMouseWheelEventHandler.Create: _ControlMouseWheelEventHandler;
begin
  Result := CreateComObject(CLASS_ControlMouseWheelEventHandler) as _ControlMouseWheelEventHandler;
end;

class function CoControlMouseWheelEventHandler.CreateRemote(const MachineName: string): _ControlMouseWheelEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ControlMouseWheelEventHandler) as _ControlMouseWheelEventHandler;
end;

class function CoControlClickEventHandler.Create: _ControlClickEventHandler;
begin
  Result := CreateComObject(CLASS_ControlClickEventHandler) as _ControlClickEventHandler;
end;

class function CoControlClickEventHandler.CreateRemote(const MachineName: string): _ControlClickEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ControlClickEventHandler) as _ControlClickEventHandler;
end;

class function CoControlMouseUpEventHandler.Create: _ControlMouseUpEventHandler;
begin
  Result := CreateComObject(CLASS_ControlMouseUpEventHandler) as _ControlMouseUpEventHandler;
end;

class function CoControlMouseUpEventHandler.CreateRemote(const MachineName: string): _ControlMouseUpEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ControlMouseUpEventHandler) as _ControlMouseUpEventHandler;
end;

class function CoControlMouseDownEventHandler.Create: _ControlMouseDownEventHandler;
begin
  Result := CreateComObject(CLASS_ControlMouseDownEventHandler) as _ControlMouseDownEventHandler;
end;

class function CoControlMouseDownEventHandler.CreateRemote(const MachineName: string): _ControlMouseDownEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ControlMouseDownEventHandler) as _ControlMouseDownEventHandler;
end;

class function CoControlMouseMoveEventHandler.Create: _ControlMouseMoveEventHandler;
begin
  Result := CreateComObject(CLASS_ControlMouseMoveEventHandler) as _ControlMouseMoveEventHandler;
end;

class function CoControlMouseMoveEventHandler.CreateRemote(const MachineName: string): _ControlMouseMoveEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ControlMouseMoveEventHandler) as _ControlMouseMoveEventHandler;
end;

class function CoControlKeyUpEventHandler.Create: _ControlKeyUpEventHandler;
begin
  Result := CreateComObject(CLASS_ControlKeyUpEventHandler) as _ControlKeyUpEventHandler;
end;

class function CoControlKeyUpEventHandler.CreateRemote(const MachineName: string): _ControlKeyUpEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ControlKeyUpEventHandler) as _ControlKeyUpEventHandler;
end;

class function CoControlKeyDownEventHandler.Create: _ControlKeyDownEventHandler;
begin
  Result := CreateComObject(CLASS_ControlKeyDownEventHandler) as _ControlKeyDownEventHandler;
end;

class function CoControlKeyDownEventHandler.CreateRemote(const MachineName: string): _ControlKeyDownEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ControlKeyDownEventHandler) as _ControlKeyDownEventHandler;
end;

class function CoControlKeyPressEventHandler.Create: _ControlKeyPressEventHandler;
begin
  Result := CreateComObject(CLASS_ControlKeyPressEventHandler) as _ControlKeyPressEventHandler;
end;

class function CoControlKeyPressEventHandler.CreateRemote(const MachineName: string): _ControlKeyPressEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ControlKeyPressEventHandler) as _ControlKeyPressEventHandler;
end;

class function CoScrollEventHandler.Create: _ScrollEventHandler;
begin
  Result := CreateComObject(CLASS_ScrollEventHandler) as _ScrollEventHandler;
end;

class function CoScrollEventHandler.CreateRemote(const MachineName: string): _ScrollEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ScrollEventHandler) as _ScrollEventHandler;
end;

class function CoOnAllItemsLoadedEventHandler.Create: _OnAllItemsLoadedEventHandler;
begin
  Result := CreateComObject(CLASS_OnAllItemsLoadedEventHandler) as _OnAllItemsLoadedEventHandler;
end;

class function CoOnAllItemsLoadedEventHandler.CreateRemote(const MachineName: string): _OnAllItemsLoadedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OnAllItemsLoadedEventHandler) as _OnAllItemsLoadedEventHandler;
end;

class function CoItemCheckedEventHandler.Create: _ItemCheckedEventHandler;
begin
  Result := CreateComObject(CLASS_ItemCheckedEventHandler) as _ItemCheckedEventHandler;
end;

class function CoItemCheckedEventHandler.CreateRemote(const MachineName: string): _ItemCheckedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ItemCheckedEventHandler) as _ItemCheckedEventHandler;
end;

class function CoItemClickedEventHandler.Create: _ItemClickedEventHandler;
begin
  Result := CreateComObject(CLASS_ItemClickedEventHandler) as _ItemClickedEventHandler;
end;

class function CoItemClickedEventHandler.CreateRemote(const MachineName: string): _ItemClickedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ItemClickedEventHandler) as _ItemClickedEventHandler;
end;

class function CoItemDoubleClickedEventHandler.Create: _ItemDoubleClickedEventHandler;
begin
  Result := CreateComObject(CLASS_ItemDoubleClickedEventHandler) as _ItemDoubleClickedEventHandler;
end;

class function CoItemDoubleClickedEventHandler.CreateRemote(const MachineName: string): _ItemDoubleClickedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ItemDoubleClickedEventHandler) as _ItemDoubleClickedEventHandler;
end;

class function CoItemSelectionChangedEventHandler.Create: _ItemSelectionChangedEventHandler;
begin
  Result := CreateComObject(CLASS_ItemSelectionChangedEventHandler) as _ItemSelectionChangedEventHandler;
end;

class function CoItemSelectionChangedEventHandler.CreateRemote(const MachineName: string): _ItemSelectionChangedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ItemSelectionChangedEventHandler) as _ItemSelectionChangedEventHandler;
end;

class function CoItemMovedEventHandler.Create: _ItemMovedEventHandler;
begin
  Result := CreateComObject(CLASS_ItemMovedEventHandler) as _ItemMovedEventHandler;
end;

class function CoItemMovedEventHandler.CreateRemote(const MachineName: string): _ItemMovedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ItemMovedEventHandler) as _ItemMovedEventHandler;
end;

class function CoFileTypeNotSupportedEventHandler.Create: _FileTypeNotSupportedEventHandler;
begin
  Result := CreateComObject(CLASS_FileTypeNotSupportedEventHandler) as _FileTypeNotSupportedEventHandler;
end;

class function CoFileTypeNotSupportedEventHandler.CreateRemote(const MachineName: string): _FileTypeNotSupportedEventHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FileTypeNotSupportedEventHandler) as _FileTypeNotSupportedEventHandler;
end;

class function CoGdPictureEventsHandler.Create: _GdPictureEventsHandler;
begin
  Result := CreateComObject(CLASS_GdPictureEventsHandler) as _GdPictureEventsHandler;
end;

class function CoGdPictureEventsHandler.CreateRemote(const MachineName: string): _GdPictureEventsHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GdPictureEventsHandler) as _GdPictureEventsHandler;
end;

class function CoAfterSubstitutedFontArgs.Create: _AfterSubstitutedFontArgs;
begin
  Result := CreateComObject(CLASS_AfterSubstitutedFontArgs) as _AfterSubstitutedFontArgs;
end;

class function CoAfterSubstitutedFontArgs.CreateRemote(const MachineName: string): _AfterSubstitutedFontArgs;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AfterSubstitutedFontArgs) as _AfterSubstitutedFontArgs;
end;

class function CoBeforeAlternativeFontLookupArgs.Create: _BeforeAlternativeFontLookupArgs;
begin
  Result := CreateComObject(CLASS_BeforeAlternativeFontLookupArgs) as _BeforeAlternativeFontLookupArgs;
end;

class function CoBeforeAlternativeFontLookupArgs.CreateRemote(const MachineName: string): _BeforeAlternativeFontLookupArgs;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BeforeAlternativeFontLookupArgs) as _BeforeAlternativeFontLookupArgs;
end;

class function CoAnnotation.Create: _Annotation;
begin
  Result := CreateComObject(CLASS_Annotation) as _Annotation;
end;

class function CoAnnotation.CreateRemote(const MachineName: string): _Annotation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Annotation) as _Annotation;
end;

class function CoAnnotationComment.Create: _AnnotationComment;
begin
  Result := CreateComObject(CLASS_AnnotationComment) as _AnnotationComment;
end;

class function CoAnnotationComment.CreateRemote(const MachineName: string): _AnnotationComment;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationComment) as _AnnotationComment;
end;

class function CoAnnotationConnectedLines.Create: _AnnotationConnectedLines;
begin
  Result := CreateComObject(CLASS_AnnotationConnectedLines) as _AnnotationConnectedLines;
end;

class function CoAnnotationConnectedLines.CreateRemote(const MachineName: string): _AnnotationConnectedLines;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationConnectedLines) as _AnnotationConnectedLines;
end;

class function CoAnnotationPolygon.Create: _AnnotationPolygon;
begin
  Result := CreateComObject(CLASS_AnnotationPolygon) as _AnnotationPolygon;
end;

class function CoAnnotationPolygon.CreateRemote(const MachineName: string): _AnnotationPolygon;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationPolygon) as _AnnotationPolygon;
end;

class function CoAnnotationCustom.Create: _AnnotationCustom;
begin
  Result := CreateComObject(CLASS_AnnotationCustom) as _AnnotationCustom;
end;

class function CoAnnotationCustom.CreateRemote(const MachineName: string): _AnnotationCustom;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationCustom) as _AnnotationCustom;
end;

class function CoAnnotationEllipse.Create: _AnnotationEllipse;
begin
  Result := CreateComObject(CLASS_AnnotationEllipse) as _AnnotationEllipse;
end;

class function CoAnnotationEllipse.CreateRemote(const MachineName: string): _AnnotationEllipse;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationEllipse) as _AnnotationEllipse;
end;

class function CoAnnotationEmbeddedImage.Create: _AnnotationEmbeddedImage;
begin
  Result := CreateComObject(CLASS_AnnotationEmbeddedImage) as _AnnotationEmbeddedImage;
end;

class function CoAnnotationEmbeddedImage.CreateRemote(const MachineName: string): _AnnotationEmbeddedImage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationEmbeddedImage) as _AnnotationEmbeddedImage;
end;

class function CoAnnotationFreeHand.Create: _AnnotationFreeHand;
begin
  Result := CreateComObject(CLASS_AnnotationFreeHand) as _AnnotationFreeHand;
end;

class function CoAnnotationFreeHand.CreateRemote(const MachineName: string): _AnnotationFreeHand;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationFreeHand) as _AnnotationFreeHand;
end;

class function CoAnnotationFreeHandHighlighter.Create: _AnnotationFreeHandHighlighter;
begin
  Result := CreateComObject(CLASS_AnnotationFreeHandHighlighter) as _AnnotationFreeHandHighlighter;
end;

class function CoAnnotationFreeHandHighlighter.CreateRemote(const MachineName: string): _AnnotationFreeHandHighlighter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationFreeHandHighlighter) as _AnnotationFreeHandHighlighter;
end;

class function CoAnnotationFreeHandPolygon.Create: _AnnotationFreeHandPolygon;
begin
  Result := CreateComObject(CLASS_AnnotationFreeHandPolygon) as _AnnotationFreeHandPolygon;
end;

class function CoAnnotationFreeHandPolygon.CreateRemote(const MachineName: string): _AnnotationFreeHandPolygon;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationFreeHandPolygon) as _AnnotationFreeHandPolygon;
end;

class function CoAnnotationLine.Create: _AnnotationLine;
begin
  Result := CreateComObject(CLASS_AnnotationLine) as _AnnotationLine;
end;

class function CoAnnotationLine.CreateRemote(const MachineName: string): _AnnotationLine;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationLine) as _AnnotationLine;
end;

class function CoAnnotationLineArrow.Create: _AnnotationLineArrow;
begin
  Result := CreateComObject(CLASS_AnnotationLineArrow) as _AnnotationLineArrow;
end;

class function CoAnnotationLineArrow.CreateRemote(const MachineName: string): _AnnotationLineArrow;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationLineArrow) as _AnnotationLineArrow;
end;

class function CoAnnotationLink.Create: _AnnotationLink;
begin
  Result := CreateComObject(CLASS_AnnotationLink) as _AnnotationLink;
end;

class function CoAnnotationLink.CreateRemote(const MachineName: string): _AnnotationLink;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationLink) as _AnnotationLink;
end;

class function CoAnnotationRubberStamp.Create: _AnnotationRubberStamp;
begin
  Result := CreateComObject(CLASS_AnnotationRubberStamp) as _AnnotationRubberStamp;
end;

class function CoAnnotationRubberStamp.CreateRemote(const MachineName: string): _AnnotationRubberStamp;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationRubberStamp) as _AnnotationRubberStamp;
end;

class function CoAnnotationPolyRuler.Create: _AnnotationPolyRuler;
begin
  Result := CreateComObject(CLASS_AnnotationPolyRuler) as _AnnotationPolyRuler;
end;

class function CoAnnotationPolyRuler.CreateRemote(const MachineName: string): _AnnotationPolyRuler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationPolyRuler) as _AnnotationPolyRuler;
end;

class function CoAnnotationRectangle.Create: _AnnotationRectangle;
begin
  Result := CreateComObject(CLASS_AnnotationRectangle) as _AnnotationRectangle;
end;

class function CoAnnotationRectangle.CreateRemote(const MachineName: string): _AnnotationRectangle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationRectangle) as _AnnotationRectangle;
end;

class function CoAnnotationRectangleHighlighter.Create: _AnnotationRectangleHighlighter;
begin
  Result := CreateComObject(CLASS_AnnotationRectangleHighlighter) as _AnnotationRectangleHighlighter;
end;

class function CoAnnotationRectangleHighlighter.CreateRemote(const MachineName: string): _AnnotationRectangleHighlighter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationRectangleHighlighter) as _AnnotationRectangleHighlighter;
end;

class function CoAnnotationRedaction.Create: _AnnotationRedaction;
begin
  Result := CreateComObject(CLASS_AnnotationRedaction) as _AnnotationRedaction;
end;

class function CoAnnotationRedaction.CreateRemote(const MachineName: string): _AnnotationRedaction;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationRedaction) as _AnnotationRedaction;
end;

class function CoAnnotationRuler.Create: _AnnotationRuler;
begin
  Result := CreateComObject(CLASS_AnnotationRuler) as _AnnotationRuler;
end;

class function CoAnnotationRuler.CreateRemote(const MachineName: string): _AnnotationRuler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationRuler) as _AnnotationRuler;
end;

class function CoAnnotationStickyNote.Create: _AnnotationStickyNote;
begin
  Result := CreateComObject(CLASS_AnnotationStickyNote) as _AnnotationStickyNote;
end;

class function CoAnnotationStickyNote.CreateRemote(const MachineName: string): _AnnotationStickyNote;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationStickyNote) as _AnnotationStickyNote;
end;

class function CoAnnotationText.Create: _AnnotationText;
begin
  Result := CreateComObject(CLASS_AnnotationText) as _AnnotationText;
end;

class function CoAnnotationText.CreateRemote(const MachineName: string): _AnnotationText;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationText) as _AnnotationText;
end;

class function CoGdPictureRectangle.Create: _GdPictureRectangle;
begin
  Result := CreateComObject(CLASS_GdPictureRectangle) as _GdPictureRectangle;
end;

class function CoGdPictureRectangle.CreateRemote(const MachineName: string): _GdPictureRectangle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GdPictureRectangle) as _GdPictureRectangle;
end;

class function CoGdPictureRectangleF.Create: _GdPictureRectangleF;
begin
  Result := CreateComObject(CLASS_GdPictureRectangleF) as _GdPictureRectangleF;
end;

class function CoGdPictureRectangleF.CreateRemote(const MachineName: string): _GdPictureRectangleF;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GdPictureRectangleF) as _GdPictureRectangleF;
end;

end.
